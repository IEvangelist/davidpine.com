<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.net-core on IEvangelist</title>
    <link>http://davidpine.net/categories/.net-core/index.xml</link>
    <description>Recent content in .net-core on IEvangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
<<<<<<< HEAD
    <lastBuildDate>Wed, 16 Aug 2017 00:00:00 +0000</lastBuildDate>
=======
>>>>>>> c929a95f15e6d2bb07dbdb876907a6ef0a3e6c5e
    <atom:link href="http://davidpine.net/categories/.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Demystifying .NET Standard</title>
      <link>http://davidpine.net/blog/dot-net-standard-demystified/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/dot-net-standard-demystified/</guid>
      <description>

&lt;h1 id=&#34;intro:25e21f0afa689597cb12cf94537509e8&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Monday, August 14&lt;sup&gt;th&lt;/sup&gt; was an amazing day to be a &lt;code&gt;.NET&lt;/code&gt; developer! As the world celebrates another triumphant series of announcements from Microsoft, there is still confusion amongst the masses.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; What is this &lt;code&gt;.NET Standard&lt;/code&gt; thing?
&lt;p/&gt; What does it mean to target &lt;code&gt;.NET Standard&lt;/code&gt; versus &lt;code&gt;.NET Core&lt;/code&gt;, or even the &lt;code&gt;.NET Framework&lt;/code&gt;?
&lt;p/&gt; As a developer, what &lt;code&gt;.NET&lt;/code&gt; should I target and why?
&lt;p/&gt; Are Portable Class Libraries (PCLs) dead?
&lt;cite&gt;Developer Community&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All of these questions have already been answered, you just have to know where to look. In this post I will provide some invaluable resources and educate those of you who are still confused.&lt;/p&gt;

&lt;h2 id=&#34;announcements:25e21f0afa689597cb12cf94537509e8&#34;&gt;Announcements&lt;/h2&gt;

&lt;p&gt;Here are all the recent announcements, feel free to spend some time checking them out &amp;ndash; be sure to come back.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/&#34; target=&#34;_blank&#34;&gt;The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/&#34; target=&#34;_blank&#34;&gt;.NET Core 2.0 is available today August 14, as a final release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/&#34; target=&#34;_blank&#34;&gt;The .NET Standard 2.0 specification is now complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudio/2017/08/14/visual-studio-2017-version-15-3-released/&#34; target=&#34;_blank&#34;&gt;Visual Studio 17 version 15.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start by answering all these common questions.&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-docs-microsoft-com-en-us-dotnet-standard-net-standard-target-blank-net-standard-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If the name &lt;a href=&#34;https://github.com/terrajobst&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Immo Landwerth&lt;/em&gt;&lt;/a&gt; doesn&amp;rsquo;t ring a bell, perhaps &lt;a href=&#34;https://twitter.com/terrajobst&#34; target=&#34;_blank&#34;&gt;@terrajobst&lt;/a&gt; will? Regardless of whether you&amp;rsquo;ve heard of him before &amp;ndash; you&amp;rsquo;d be wise to remember him now. He is a program manager for Microsoft and has a huge part in the &lt;code&gt;.NET&lt;/code&gt; ecosystem as a whole. Immo has a &lt;code&gt;.NET Standard&lt;/code&gt; video series on &lt;i class=&#34;fa fa-lg fa-youtube&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; and if you do not have time to read this post, by all means &lt;a href=&#34;https://www.youtube.com/playlist?list=PLRAdsfhKI4OWx321A_pr-7HhRNk7wOLLY&#34; target=&#34;_blank&#34;&gt;watch his videos&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;code&gt;.NET Standard&lt;/code&gt; is a specification. It represents a set of APIs that all &lt;code&gt;.NET&lt;/code&gt; platforms have to implement.
&lt;cite&gt;&lt;a href=&#34;https://youtu.be/YI4MurjfMn8?list=PLRAdsfhKI4OWx321A_pr-7HhRNk7wOLLY&amp;t=191&#34; target=&#34;_blank&#34;&gt;Immo Landwerth&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often, the &lt;code&gt;.NET Standard&lt;/code&gt; is mistaken for a runtime. Consider the name &lt;code&gt;.NET Standard&lt;/code&gt; at face value, it has the word &amp;ldquo;standard&amp;rdquo; in it&amp;hellip;because it is not a framework or a core runtime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;code&gt;.NET Standard&lt;/code&gt; isn&amp;rsquo;t a runtime, it&amp;rsquo;s a version interface - a list of methods you can use under many different &amp;ldquo;&lt;code&gt;.NETs&lt;/code&gt;&amp;rdquo;.
&lt;cite&gt;&lt;a href=&#34;https://www.hanselman.com/blog/ExploringRefitAnAutomaticTypesafeRESTLibraryForNETStandard.aspx&#34; target=&#34;_blank&#34;&gt;Scott Hanselman&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As true with all standards (or specifications), implementations can either be compliant or non-compliant. At this point in time there are four &lt;code&gt;.NET&lt;/code&gt; implementations that are &lt;code&gt;.NET Standard 2&lt;/code&gt; compliant. They are as follows, &lt;code&gt;.NET Core&lt;/code&gt;, &lt;code&gt;.NET Framework&lt;/code&gt;, &lt;code&gt;Mono&lt;/code&gt; and &lt;code&gt;Xamarin&lt;/code&gt;. Below is a more comprehensive listing of all the &lt;code&gt;.NET&lt;/code&gt; platforms and their corresponding standard that they implement.&lt;/p&gt;

&lt;h3 id=&#34;the-net-standard-version-table-a-href-https-github-com-dotnet-standard-blob-master-docs-versions-md-net-standard-versions-target-blank-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;The .NET Standard Version Table &lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions.md#net-standard-versions&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;.NET Standard&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.0.md&#34;&gt;1.0&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.1.md&#34;&gt;1.1&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.2.md&#34;&gt;1.2&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.3.md&#34;&gt;1.3&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.4.md&#34;&gt;1.4&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.5.md&#34;&gt;1.5&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md&#34;&gt;1.6&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md&#34;&gt;2.0&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Mono&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Xamarin.iOS&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Xamarin.Mac&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Xamarin.Android&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Universal Windows Platform&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vNext&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vNext&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vNext&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows Phone&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows Phone Silverlight&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example, we can see the &lt;code&gt;.NET Framework 4.5&lt;/code&gt; is an implementation of &lt;code&gt;.NET Standard 1.1&lt;/code&gt;. This means that if you&amp;rsquo;re to author a &lt;code&gt;.NET Standard&lt;/code&gt; class library and you target &lt;code&gt;1.1&lt;/code&gt; of the standard, it can run on &lt;code&gt;.NET Core 1.0&lt;/code&gt;, &lt;code&gt;.NET Framework 4.5&lt;/code&gt;, &lt;code&gt;Mono 4.6&lt;/code&gt;, etc&amp;hellip; you get the point now I&amp;rsquo;m sure.&lt;/p&gt;

&lt;h4 id=&#34;the-trade-off:25e21f0afa689597cb12cf94537509e8&#34;&gt;The Trade-off&lt;/h4&gt;

&lt;p&gt;There is a bit of a trade-off though that you should consider. With every version of the &lt;code&gt;.NET Standard&lt;/code&gt; there is an inverse relationship to the number of implementations. The higher the version of the &lt;code&gt;.NET Standard&lt;/code&gt;, the more APIs you have access to. However, there are fewer implementations that exist for higher versions of the &lt;code&gt;.NET Standard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is typically advised that you target the lowest version of the standard that you can get away with. This allows your code to run in more places, as there are more implementations of lower versioned standards. Portable Class Libraries (or PCLs) have been replaced by the &lt;code&gt;.NET Standard&lt;/code&gt;. If you&amp;rsquo;re like me, you probably want the latest and greatest &amp;ndash; the fullest set of APIs&amp;hellip;and that is ok. As long as you control the environment in which it&amp;rsquo;s consumed, great!&lt;/p&gt;

&lt;h3 id=&#34;net-api-explorer:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;code&gt;.NET&lt;/code&gt; API Explorer&lt;/h3&gt;

&lt;p&gt;Microsoft has been hard at work, and their documentation teams have been putting together some incredibly useful ways to consume documentation. As a developer, I typically rely on &lt;strong&gt;StackOverflow&lt;/strong&gt; as a source of truth &amp;ndash; however, I have been finding myself spending more time on the official documentation sites. A big &lt;i class=&#34;fa fa-lg fa-thumbs-o-up&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; to the team for making the &lt;code&gt;.NET&lt;/code&gt; docs so much better than before. They even have a &lt;code&gt;.NET&lt;/code&gt; API Explorer. This is immensely powerful &amp;ndash; in a matter of seconds I can quickly explore APIs and determine if something is lacking.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/?view=netstandard-2.0&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2017/08/dot-net-standard-api-explorer.png&#34; alt=&#34;.NET Standard API Explorer&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-docs-microsoft-com-en-us-dotnet-core-target-blank-net-core-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;code&gt;.NET Core&lt;/code&gt; is a general purpose development platform maintained by Microsoft and the &lt;code&gt;.NET&lt;/code&gt; community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The obvious advantages are that &lt;code&gt;.NET Core&lt;/code&gt; is cross-platform and open source. Unlike &lt;code&gt;.NET Framework&lt;/code&gt; that is neither of those two things.&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-docs-microsoft-com-en-us-dotnet-framework-target-blank-net-framework-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you have been a &lt;code&gt;.NET&lt;/code&gt; developer for more than a few years, then you should already be familiar with the &lt;code&gt;.NET Framework&lt;/code&gt;. This is what you have been developing on and targeting forever. However, with the introduction of &lt;code&gt;.NET Standard&lt;/code&gt; and &lt;code&gt;.NET Core&lt;/code&gt;, that is likely to change. You no longer have to limit your OS or platform to Windows.&lt;/p&gt;

&lt;h2 id=&#34;net-foundation:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;code&gt;.NET Foundation&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;With all the &lt;code&gt;.NET&lt;/code&gt; terms flying around the web, it felt appropriate to throw another one at you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; The &lt;code&gt;.NET Foundation&lt;/code&gt; is an independent organization to foster open development and collaboration around the &lt;code&gt;.NET&lt;/code&gt; ecosystem. It serves as a forum for community and commercial developers alike to broaden and strengthen the future of the &lt;code&gt;.NET&lt;/code&gt; ecosystem by promoting openness and community participation to encourage innovation.
&lt;cite&gt;www.dotnetfoundation.org&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be sure to visit their site and get involved!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotnetfoundation.org/&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2017/08/dot-net-fondation.png&#34; alt=&#34;.NET Foundation&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:25e21f0afa689597cb12cf94537509e8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.NET&lt;/code&gt; ecosystem is rapidly evolving! With open source and cross-platform being two key priorities, you&amp;rsquo;re in good hands. When developing for &lt;code&gt;.NET&lt;/code&gt; be familiar with what version of the &lt;code&gt;.NET Standard&lt;/code&gt; suits your needs &amp;ndash; and target accordingly.&lt;/p&gt;

&lt;h3 id=&#34;resources:25e21f0afa689597cb12cf94537509e8&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Standard - Microsoft Docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Core - Microsoft Docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Framework - Microsoft Docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Overriding ASP.NET Core Framework-Provided Services</title>
      <link>http://davidpine.net/blog/overriding-default-di/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/overriding-default-di/</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In &lt;strong&gt;.NET&lt;/strong&gt; it&amp;rsquo;s really easy to create your own interfaces and implementations. Likewise, it&amp;rsquo;s seemingly effortless to register them for dependency injection. But it is not always
obvious how to override existing implementations.  Let&amp;rsquo;s discuss various aspects of &amp;ldquo;dependency injection&amp;rdquo; and how you can override the &amp;ldquo;framework-provided services&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;As an example, let&amp;rsquo;s take a recent story on our product backlog for building a security audit of login attempts.  The story involved the capture of attempted usernames along
with their corresponding IP addresses.  This would allow system administrators to monitor for potential attackers. This would require our &lt;strong&gt;ASP.NET Core&lt;/strong&gt; application to have
custom logging implemented.&lt;/p&gt;

&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;

&lt;p&gt;Luckily &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ASP.NET Core Logging&lt;/code&gt;&lt;/a&gt; is simple to use and is a first-class
citizen within &lt;code&gt;ASP.NET Core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Logging&lt;/strong&gt; repository there is an extension method namely
&lt;a href=&#34;https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging/LoggingServiceCollectionExtensions.cs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;AddLogging&lt;/code&gt;&lt;/a&gt;, here is what it
looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IServiceCollection AddLogging(this IServiceCollection services)
{
    if (services == null)
    {
        throw new ArgumentNullException(nameof(services));
    }

    services.TryAdd(ServiceDescriptor.Singleton&amp;lt;ILoggerFactory, LoggerFactory&amp;gt;());
    services.TryAdd(ServiceDescriptor.Singleton(typeof(ILogger&amp;lt;&amp;gt;), typeof(Logger&amp;lt;&amp;gt;)));

    return services;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it is rather simple. It adds two &lt;code&gt;ServiceDescriptor&lt;/code&gt; instances to the &lt;code&gt;IServiceCollection&lt;/code&gt;, effectively registering the given service type to the
corresponding implementation type.&lt;/p&gt;

&lt;h4 id=&#34;following-the-rabbit-down-the-hole&#34;&gt;Following the rabbit down the hole&lt;/h4&gt;

&lt;p&gt;When you create a new &lt;code&gt;ASP.NET Core&lt;/code&gt; project from &lt;strong&gt;Visual Studio&lt;/strong&gt;, all the templates follow the same pattern. They have the &lt;code&gt;Program.cs&lt;/code&gt; file with a &lt;code&gt;Main&lt;/code&gt; method that looks
very similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseIISIntegration()
        .UseStartup&amp;lt;Startup&amp;gt;()
        .UseApplicationInsights()
        .Build();

    host.Run();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;templates-program-cs&#34;&gt;Templates &lt;code&gt;Program.cs&lt;/code&gt;&lt;/h6&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/EmptyWeb/Program.cs&#34; target=&#34;_blank&#34;&gt;Empty &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/StarterWeb/Program.cs&#34; target=&#34;_blank&#34;&gt;Starter Web &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/WebAPI/Program.cs&#34; target=&#34;_blank&#34;&gt;Web API &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One thing that is concerning about a template like this is that the &lt;code&gt;IWebHost&lt;/code&gt; is an &lt;code&gt;IDisposable&lt;/code&gt;, so why then is this statement not wrapped in a &lt;code&gt;using&lt;/code&gt;
&lt;a href=&#34;https://github.com/IEvangelist/Templates/commit/37e78bd0dc33069901cc51924fe8a2740d1e141c&#34; target=&#34;_blank&#34;&gt;you ask&lt;/a&gt;? The answer is that the &lt;code&gt;Run&lt;/code&gt; extension method
internally wraps itself in a &lt;code&gt;using&lt;/code&gt;. If you were wondering where the &lt;code&gt;AddLogging&lt;/code&gt; occurs, it is a result of invoking the &lt;code&gt;Build&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[ Microsoft.AspNetCore.Hosting.WebHostBuilder ] 
    public IWebHost Build() ...
        private IServiceCollection BuildCommonServices() ...
            creates services then invokes services.AddLogging()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-few-words-on-the-service-descriptor&#34;&gt;A few words on the Service Descriptor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ServiceDescriptor&lt;/code&gt; class is an object that &lt;em&gt;describes&lt;/em&gt; a &lt;em&gt;service&lt;/em&gt;, and this is used by dependency injection. In other words, instances of the &lt;code&gt;ServiceDescriptor&lt;/code&gt; are
descriptions of services. The &lt;code&gt;ServiceDescriptor&lt;/code&gt; class exposes several static methods that allow its instantiation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ILoggerFactory&lt;/code&gt; interface is registered as a
&lt;a href=&#34;https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs#L14&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ServiceLifetime.Singleton&lt;/code&gt;&lt;/a&gt;
and its implementation is mapped to the &lt;code&gt;LoggerFactory&lt;/code&gt;. Likewise, the generic type &lt;code&gt;typeof(ILogger&amp;lt;&amp;gt;)&lt;/code&gt; is mapped to &lt;code&gt;typeof(Logger&amp;lt;&amp;gt;)&lt;/code&gt;. This is just one of the several key
&amp;ldquo;Framework-Provided Services&amp;rdquo; that are registered.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-together&#34;&gt;Putting it together&lt;/h2&gt;

&lt;p&gt;Now we know that the framework is providing all implementations of &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, and resolving them as their &lt;code&gt;Logger&amp;lt;T&amp;gt;&lt;/code&gt;. We also know that we could write our own implementation of
the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; interface. Being that this is open-source
&lt;a href=&#34;https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/LoggerOfT.cs&#34; target=&#34;_blank&#34;&gt;we can look to their implementation&lt;/a&gt; for inspiration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class RequestDetailLogger&amp;lt;T&amp;gt; : ILogger&amp;lt;T&amp;gt;
{
    private readonly ILogger _logger;

    public RequestDetailLogger(ILoggerFactory factory,
                               IRequestCategoryProvider requestCategoryProvider)
    {
        if (factory == null)
        {
            throw new ArgumentNullException(nameof(factory));
        }
        if (requestCategoryProvider == null)
        {
            throw new ArgumentNullException(nameof(requestCategoryProvider));
        }

        var category = requestDetailCategoryProvider.CreateCategory&amp;lt;T&amp;gt;();
        _logger = factory.CreateLogger(category);
    }

    IDisposable ILogger.BeginScope&amp;lt;TState&amp;gt;(TState state)
        =&amp;gt; _logger.BeginScope(state);

    bool ILogger.IsEnabled(LogLevel logLevel)
        =&amp;gt; _logger.IsEnabled(logLevel);

    void ILogger.Log&amp;lt;TState&amp;gt;(LogLevel logLevel, 
                             EventId eventId, 
                             TState state, 
                             Exception exception, 
                             Func&amp;lt;TState, Exception, string&amp;gt; formatter)
        =&amp;gt; _logger.Log(logLevel, eventId, state, exception, formatter);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;IRequestCategoryProvider&lt;/code&gt; is defined and implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using static Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelper;

public interface IRequestCategoryProvider
{
    string CreateCategory&amp;lt;T&amp;gt;();
}

public class RequestCategoryProvider : IRequestCategoryProvider
{
    private readonly IPrincipal _principal;
    private readonly IPAddress _ipAddress;

    public RequestCategoryProvider(IPrincipal principal,
                                   IPAddress ipAddress)
    {
        _principal = principal;
        _ipAddress = ipAddress;
    }

    public string CreateCategory&amp;lt;T&amp;gt;()
    {
        var typeDisplayName = GetTypeDisplayName(typeof(T));

        if (_principal == null || _ipAddress == null)
        {
            return typeDisplayName;
        }

        var username = _principal?.Identity?.Name;
        return $&amp;quot;User: {username}, IP: {_ipAddress} {typeDisplayName}&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re curious how to get the &lt;code&gt;IPrincipal&lt;/code&gt; and &lt;code&gt;IPAddress&lt;/code&gt; into this implementation (with DI) -
&lt;a href=&#34;http://davidpine.net/blog/principal-architecture-changes/&#34; target=&#34;_blank&#34;&gt;I discussed it here&lt;/a&gt; briefly. It is pretty straight-forward. In the &lt;code&gt;Startup.ConfigureServices&lt;/code&gt;
method do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // ... omitted for brevity

    services.AddTransient&amp;lt;IRequestCategoryProvider, RequestCategoryProvider&amp;gt;();
    services.AddTransient&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
    services.AddTransient&amp;lt;IPrincipal&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()
                           ?.HttpContext
                           ?.User);
    services.AddTransient&amp;lt;IPAddress&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()
                           ?.HttpContext
                           ?.Connection
                           ?.RemoteIpAddress);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can
&lt;a href=&#34;https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs&#34;
   target=&#34;_blank&#34;&gt;&lt;code&gt;Replace&lt;/code&gt;&lt;/a&gt; the implementations for the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; by using the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // ... omitted for brevity
    services.Replace(ServiceDescriptor.Transient(typeof(ILogger&amp;lt;&amp;gt;), 
                                                 typeof(RequestDetailLogger&amp;lt;&amp;gt;)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we replace the framework-provided service as a &lt;code&gt;ServiceLifetime.Transient&lt;/code&gt;. Opposed to the default &lt;code&gt;ServiceLifetime.Singleton&lt;/code&gt;. This is more or less an extra
precaution. We know that with each request we get the &lt;code&gt;HttpContext&lt;/code&gt; from the &lt;code&gt;IHttpContextAccessor&lt;/code&gt;, and from this we have the &lt;code&gt;User&lt;/code&gt;. This is what is passed to each
&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This approach is valid for overriding any of the various framework-provided service implementations. It is simply a matter of knowing the correct &lt;code&gt;ServiceLifetime&lt;/code&gt; for your
specific needs. Likewise, it is a good idea to leverage the open-source libraries of the framework for inspiration. With this you can take finite control of your web-stack.&lt;/p&gt;

&lt;h1 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection&#34; target=&#34;_blank&#34;&gt;
&lt;i class=&#34;fa fa-file-text-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;ASP.NET Core - Dependency Injection&lt;/code&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What happened to my Thread.CurrentPrincipal</title>
      <link>http://davidpine.net/blog/principal-architecture-changes/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/principal-architecture-changes/</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Like the title claims, if you&amp;rsquo;re using &lt;code&gt;ASP.NET Core&lt;/code&gt; and expecting the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; or &lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; to be populated you&amp;rsquo;d be wrong. This is not the
&lt;code&gt;IPrincipal&lt;/code&gt; you&amp;rsquo;re looking for. In this post we&amp;rsquo;ll discuss what happened and what you need to do now. Additionally we&amp;rsquo;ll cover all the peripheral benefits as a result of this
change.&lt;/p&gt;

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;If you have ever done any &lt;strong&gt;.NET Framework&lt;/strong&gt; development, you&amp;rsquo;ve probably seen the &lt;code&gt;Thread&lt;/code&gt; class. You&amp;rsquo;re probably familiar with the
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.threading.thread.currentprincipal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt;&lt;/a&gt; member. This member of the &lt;code&gt;Thread&lt;/code&gt; class
is defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IPrincipal CurrentPrincipal
{
    [System.Security.SecuritySafeCritical]  // auto-generated
    get
    {
        lock (CurrentThread)
        {
            var principal = (IPrincipal)CallContext.Principal;
            if (principal == null)
            {
                principal = GetDomain().GetThreadPrincipal();
                CallContext.Principal = principal;
            }
            return principal;
        }
    }

    [System.Security.SecuritySafeCritical]  // auto-generated
    [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.ControlPrincipal)]
    set
    {
        CallContext.Principal = value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Gets or sets the thread&amp;rsquo;s current principal (for role-based security).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does anyone see the issue with this? Can you say, &amp;ldquo;publically static mutable state, oh my&amp;rdquo;?! You should be alarmed. This property was never a good idea and today it
simply doesn&amp;rsquo;t belong. &lt;strong&gt;ASP.NET Core&lt;/strong&gt; is not responsible for assigning this. You might not agree with that decision, but it is final.&lt;/p&gt;

&lt;p&gt;Before diving into this, pop over to &lt;a href=&#34;https://github.com/aspnet/Security/issues/322&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
Microsoft.AspNetCore.Security &amp;ndash; Issue 332&lt;/a&gt; for more of the back story.&lt;/p&gt;

&lt;h2 id=&#34;thread-currentprincipal-today-in-asp-net-core&#34;&gt;Thread.CurrentPrincipal Today in ASP.NET Core&lt;/h2&gt;

&lt;p&gt;As part of the &lt;code&gt;ASP.NET Core&lt;/code&gt; framework, the following middleware packages are provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Identity&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;Microsoft.AspNetCore.Identity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Security&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;Microsoft.AspNetCore.Security&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you opt-in to using this middleware and you provide a login page (or expose an external provider) you&amp;rsquo;d end up creating an instance of a &lt;code&gt;ClaimsPrincipal&lt;/code&gt; that represents
an authenticated user. Subsequent requests to the web server would be handed the cookie that holds the user&amp;rsquo;s claims. However the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; would &lt;strong&gt;not&lt;/strong&gt;
actually reflect the &lt;code&gt;ClaimsPrincipal&lt;/code&gt; object that was created as the result of the login. In fact,
it would simply be an instance of the &lt;code&gt;GenericPrincipal&lt;/code&gt; implementation. Likewise, walking up to the &lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; property and asking it for the current claims
principal in context wouldn&amp;rsquo;t give you what you might expect either. Additionally, the
&lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; internally relies on the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; for its value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static ClaimsPrincipal Current
{
    get
    {
         return ClaimsPrincipal.s_principalSelector() ??
                ClaimsPrincipal.SelectClaimsPrincipal();
    }
}

private static ClaimsPrincipal SelectClaimsPrincipal()
{
    return Thread.CurrentPrincipal as ClaimsPrincipal ?? 
           new ClaimsPrincipal(Thread.CurrentPrincipal);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might be asking yourself, &amp;ldquo;how do I access this value then?&amp;rdquo;. If you&amp;rsquo;re in the context of a controller then you already have access to it via the
&lt;code&gt;.User&lt;/code&gt; property. Otherwise, the answer is &amp;ldquo;dependency injection&amp;rdquo;. Wherever you&amp;rsquo;re in need of the identity for accessing claims, use &lt;code&gt;.cstor&lt;/code&gt; injection
and give yourself the &lt;code&gt;IPrincipal&lt;/code&gt; you need. If you&amp;rsquo;re in the context of an action you might be tempted to use the &lt;code&gt;[FromServices]&lt;/code&gt; attribute to inject
the &lt;code&gt;IPrincipal&lt;/code&gt; instance, but remember that this actually comes from the current user - which is
already accessible via the controller&amp;rsquo;s &lt;code&gt;.User&lt;/code&gt; property.&lt;/p&gt;

&lt;h2 id=&#34;dependency-injection&#34;&gt;Dependency Injection&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; made dependency injection (DI) a first class citizen, and it is so easy to use. The &lt;code&gt;Startup.cs&lt;/code&gt; by convention has a &lt;code&gt;ConfigureServices&lt;/code&gt; method where you&amp;rsquo;ll
register the dependencies. In the case of &lt;code&gt;ASP.NET Core&lt;/code&gt; you&amp;rsquo;ll need to do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// This method gets called by the runtime. Use this method to add services to the container.
public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
    services.AddTransient&amp;lt;IPrincipal&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;().HttpContext.User);

    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might have noticed that we explicitly register the &lt;code&gt;IHttpContextAccessor&lt;/code&gt; and corresponding implementation. This is necessary as that service is not registered for
us. With that in place we can now specify that any class asking for an &lt;code&gt;IPrincipal&lt;/code&gt; will be given the &lt;code&gt;IHttpContextAccessor.HttpContext.User&lt;/code&gt; as the implementation.
This is exactly what we needed. The exact same pattern is true for class libraries that want to leverage identity-based claim values from the &lt;code&gt;ClaimsPrincipal&lt;/code&gt;
implementation of the &lt;code&gt;IPrincipal&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Security.Claims;
using System.Security.Principal;

public class SampleService : ISampleService
{
    private readonly ClaimsPrincipal _principal;

    public SampleService(IPrincipal principal)
    {
        _principal = principal as ClaimsPrincipal;
    }

    public Task ConsumeAsync()
    {
        var dobClaim = _principal?.FindFirst(ClaimTypes.DateOfBirth);
        // Take some action ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the example above we can see how simple it is to use dependency injection. Simply define the &lt;code&gt;IPrincipal&lt;/code&gt; as a &lt;code&gt;.cstor&lt;/code&gt; parameter, store it in a field and consume it as needed.&lt;/p&gt;

&lt;h3 id=&#34;but-why&#34;&gt;But Why?&lt;/h3&gt;

&lt;p&gt;There are a lot of people who feel as though DI is overrated and that it is much easier to ask the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; for its value. While that is easy, it is also
risky&amp;hellip;think about it. Since it is mutable anyone (even 3rd party libraries) can set it. Additionally, you avoid concerns about trying to synchronize static state between
the &lt;code&gt;Thread&lt;/code&gt; and &lt;code&gt;ClaimsPrincipal&lt;/code&gt; classes. Scott Hanselman blogged about a
&lt;a href=&#34;http://www.hanselman.com/blog/SystemThreadingThreadCurrentPrincipalVsSystemWebHttpContextCurrentUserOrWhyFormsAuthenticationCanBeSubtle.aspx&#34; target=&#34;_blank&#34;&gt;similar issue&lt;/a&gt;
nearly thirteen years ago!&lt;/p&gt;

&lt;p&gt;One of the first benefits that comes to mind from this is the fact that with DI the code is unit-testable. It is extremely easy to mock out an &lt;code&gt;IPrincipal&lt;/code&gt; to use for unit
testing. Additionally, this alleviates all of the concerns about synchronization and reliability. The &lt;code&gt;IPrincipal&lt;/code&gt; you&amp;rsquo;re given is the principal you&amp;rsquo;d expect and it is fully
populated accordingly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Magic Mirror</title>
      <link>http://davidpine.net/blog/building-a-magic-mirror/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/building-a-magic-mirror/</guid>
      <description>

&lt;h1 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h1&gt;

&lt;p&gt;I am certainly not the first one to create a magic mirror, and I will not be the last either. I was inspired by those who are true Innovators&amp;hellip;some might say,
&amp;ldquo;I&amp;rsquo;m standing on the shoulders of giants&amp;rdquo;. They would probably we right, and I&amp;rsquo;m okay with that. Earlier this year, I stumbled upon a tweet about someone how created a
magic mirror&amp;hellip;this is the root of my inspiration.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
    &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
        Yup, it is official &amp;ndash; I want a mirror like this one!
        &lt;a href=&#34;https://t.co/MVcM1nca7A&#34;&gt;https://t.co/MVcM1nca7A&lt;/a&gt;
    &lt;/p&gt;
    &amp;mdash; David Pine (@davidpine7)
    &lt;a href=&#34;https://twitter.com/davidpine7/status/695318303326265345&#34;&gt;
        February 4, 2016
    &lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Before continuing on, allow me to explain what a magic mirror is. A magic mirror is simply a two-way mirror with a monitor positioned behind it that projects through the
mirror. The monitor displays the application. The application is running on a small computer, in most cases a &lt;strong&gt;Raspberry Pi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2016/12/pi-logo.png&#34; alt=&#34;Raspberry Pi&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I noticed that a lot of the magic mirror&amp;rsquo;s had greeting messages such as &amp;ldquo;you look handsome&amp;rdquo; or &amp;ldquo;good morning sexy&amp;rdquo; and other curiously intuitive sayings.
I thought &amp;ldquo;wow&amp;rdquo; this really is a smart mirror, much to my surprise these were all just static messages (or only dynamic when accounting for the time of day). I was thinking
to myself, &amp;ldquo;I wonder if I could improve upon this&amp;rdquo;, and that was my motivation!&lt;/p&gt;

&lt;h2 id=&#34;open-source&#34;&gt;Open Source&lt;/h2&gt;

&lt;p&gt;If you want to skip out from reading this post, you can checkout my project up on &lt;strong&gt;GitHub&lt;/strong&gt; &amp;nbsp;
&lt;a href=&#34;https://www.github.com/IEvangelist/Mirror&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; IEvangelist.Mirror&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;hardware&#34;&gt;Hardware&lt;/h1&gt;

&lt;p&gt;I was excited when &lt;strong&gt;Microsoft&lt;/strong&gt; started selling the &lt;strong&gt;Raspberry Pi 3, Model B&lt;/strong&gt; - I ordered one immediately.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/pi3.gif&#34; alt=&#34;Raspberry Pi 3&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;specs&#34;&gt;Specs&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/pi-layout.png&#34; alt=&#34;Specs&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h3&gt;

&lt;p&gt;Below is a semi-comprehensive listing of all the materials and their corresponding cost that I used for building my magic mirror.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Rough Cost&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Hardware&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$60&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.microsoftstore.com/store/msusa/en_US/pdp/Raspberry-Pi-3-Bundle/productID.5068162700&#34; target=&#34;_blank&#34;&gt;Raspberry Pi 3 Bundle &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;a/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B00IZBIMLK/ref=oh_aui_search_detailpage?ie=UTF8&amp;psc=1&#34; target=&#34;_blank&#34;&gt;BenQ 27&amp;rdquo; HDMI LED Monitor &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;a/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$90&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.tapplastics.com/product/plastics/cut_to_size_plastic/two_way_mirrored_acrylic/558&#34; target=&#34;_blank&#34;&gt;Custom-sized Two-way Mirrored Acrylic &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;a/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.amazon.com/Microsoft-LifeCam-Cinema-720p-Webcam/dp/B009CPC6QA&#34; target=&#34;_blank&#34;&gt;Microsoft LifeCam &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;a/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B00DEJXRAE/ref=oh_aui_search_detailpage?ie=UTF8&amp;psc=1&#34; target=&#34;_blank&#34;&gt;Dell USB Wired Soundbar &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;a/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B000234UFG/ref=oh_aui_detailpage_o06_s00?ie=UTF8&amp;psc=1&#34; target=&#34;_blank&#34;&gt;Power Cord Splitter &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;a/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Full HDMI Cable, USB Extension Cables&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Carpentry Materials&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Glenlivet 12 Year Old Scotch Whisky (not technically hardware)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;~$480&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Considering the total investment is still under $500 bucks, that&amp;rsquo;s not too bad!&lt;/p&gt;

&lt;h1 id=&#34;os-platform&#34;&gt;OS &amp;ndash; Platform&lt;/h1&gt;

&lt;p&gt;One of my favorite parts about developing the magic mirror was the fact that I could do so from the comfort of &lt;strong&gt;Visual Studio&lt;/strong&gt; using the worlds most powerful programming
language today, &lt;strong&gt;C#&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2016/12/vs.png&#34; alt=&#34;Visual Studio&#34; style=&#34;max-width: 175px;&#34; /&gt;
&lt;/a&gt;
&amp;nbsp; &amp;nbsp;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/kx37x362.aspx&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2016/12/csharp.png&#34; alt=&#34;C#&#34; style=&#34;max-width: 175px;&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name &amp;ndash; Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;OS&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/iot/explore/iotcore&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Windows 10 IoT Core, &amp;quot;Build 10.0.14393&amp;quot;&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Universal Windows Platform (UWP), &amp;quot;UAP 1.0&amp;quot;&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;software&#34;&gt;Software&lt;/h1&gt;

&lt;p&gt;When people throw around the acronym &lt;strong&gt;IoT&lt;/strong&gt; it can mean a lot of different things. For this specific application, it is essential. Using the built-in &lt;em&gt;WIFI&lt;/em&gt; on the &lt;strong&gt;Pi 3&lt;/strong&gt; we
can leverage the power of the internet to gather and share information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Software is simply the movement and manipulation of data. But without context, said data is meaningless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The magic mirror application strives to provide data that is all of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relevant&lt;/li&gt;
&lt;li&gt;Practical&lt;/li&gt;
&lt;li&gt;Convenient&lt;/li&gt;
&lt;li&gt;Timely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is the user-interface layout. Let&amp;rsquo;s have a look at the various components that our application is built on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/layout.png&#34; alt=&#34;Layout&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;components&#34;&gt;Components&lt;/h2&gt;

&lt;p&gt;From the layout above, it is clear to visualize the key components of the application. Most of these components implement the
&lt;code&gt;IContextSynthesizer&lt;/code&gt; interface. These implementations are indicators that each component is capable of handling voice commands, and providing a message that is consumable
by the &lt;strong&gt;UWP&lt;/strong&gt; speech-synthesizer.  More on this later&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;weather-forecast&#34;&gt;Weather &amp;ndash; Forecast&lt;/h3&gt;

&lt;p&gt;The current weather and forecast are retrieved every fifteen minutes from the free &lt;a href=&#34;http://openweathermap.org/api&#34; target=&#34;_blank&#34;&gt;Open Weather API&lt;/a&gt;.
The developer API key and zip code are configurable. Additionally the unit-of-measure is configurable, where you can specify &lt;code&gt;imperial&lt;/code&gt; or &lt;code&gt;metric&lt;/code&gt; as valid settings.&lt;/p&gt;

&lt;h3 id=&#34;clock&#34;&gt;Clock&lt;/h3&gt;

&lt;p&gt;The clock is extremely simple. It is literally just the current date and time. It updates every second, formatting to the hour, minute and second &amp;ndash; additionally displaying the
name of the day followed by the month and day number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
&lt;pre&gt;
&lt;code class=&#34;language-yaml&#34;&gt;&lt;span style=&#34;font-size: large&#34;&gt;8:29&lt;/span&gt; &lt;sup&gt;34&lt;/sup&gt;
Wednesday, December 21&lt;sup&gt;st&lt;/sup&gt;
&lt;/code&gt;
&lt;/pre&gt;
Note: I opted to omit whether or not we&amp;rsquo;re in ante or post meridiem as it is assumed the user would know if it&amp;rsquo;s morning or in the afternoon.&lt;/p&gt;

&lt;h3 id=&#34;event-calendar-schedule&#34;&gt;Event Calendar / Schedule&lt;/h3&gt;

&lt;p&gt;My magic mirror is configured to display an aggregation of two calendars. This is entirely configurable, so if you were to
&lt;a href=&#34;https://github.com/IEvangelist/Mirror#fork-destination-box&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-code-fork&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; fork my repo&lt;/a&gt; &amp;ndash; you would need to setup
your desired endpoints. The only requirement is that the URL is an accessible endpoint that returns valid &lt;code&gt;iCal&lt;/code&gt; &lt;a href=&#34;http://icalendar.org/&#34; target=&#34;_blank&#34;&gt;(*.ics) formatting&lt;/a&gt;.
The events are truncated to fit on the page and ordered by the date of the event.&lt;/p&gt;

&lt;h3 id=&#34;music-player&#34;&gt;Music Player&lt;/h3&gt;

&lt;p&gt;Imagine you have the magic mirror mounted in your bathroom, or bedroom&amp;hellip;it would be nice to say, &amp;ldquo;play a song&amp;rdquo;, or &amp;ldquo;play Deftones&amp;rdquo; for example and music starts playing. That is
the idea behind the music player component. The current implementation of the music player is limited. I spent a few long nights trying to figure out how to use the built-in &lt;strong&gt;Bluetooth&lt;/strong&gt;
on the &lt;strong&gt;Pi 3&lt;/strong&gt;, while &lt;strong&gt;UWP&lt;/strong&gt; does have some support it is limited. I was able to pair but not stream songs from my &lt;strong&gt;iPod&lt;/strong&gt; for example, which was really frustrating. For the meantime
I simply placed several songs in the &lt;code&gt;Assets&lt;/code&gt; directory as content and I can play these resources. Ideally, I will use a web-based service like Spotify or Pandora.&lt;/p&gt;

&lt;h3 id=&#34;voice-commands&#34;&gt;Voice Commands&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Universal Windows Platform&lt;/strong&gt; provides two very useful classes, the
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/windows.media.speechrecognition.speechrecognizer.aspx&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SpeechRecognizer&lt;/code&gt;&lt;/a&gt; and the
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/windows.media.speechsynthesis.speechsynthesizer.aspx&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SpeechSynthesizer&lt;/code&gt;&lt;/a&gt;. Leveraging this
I have built out the ability to talk to my magic mirror, I can ask it things like &amp;ldquo;what&amp;rsquo;s the weather&amp;rdquo;, &amp;ldquo;what&amp;rsquo;s my schedule for Wednesday&amp;rdquo;, or even tell it commands like &amp;ldquo;turn
this up&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;microsoft-cognitive-services&#34;&gt;Microsoft Cognitive Services&lt;/h2&gt;

&lt;p&gt;Formally known was &amp;ldquo;Project Oxford&amp;rdquo;, Microsoft Cognitive Services offers a ton of programming power and you can start using it today for &lt;strong&gt;free&lt;/strong&gt;. Simply
&lt;a href=&#34;https://www.microsoft.com/cognitive-services/en-us/subscriptions&#34; target=&#34;_blank&#34;&gt;subscribe&lt;/a&gt; and use your subscription key as the argument to the client &lt;code&gt;.ctor&lt;/code&gt;.
The magic mirror makes use of the Emotion API, and corresponding &lt;code&gt;EmotionServiceClient&lt;/code&gt; from the
&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.ProjectOxford.Emotion/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Microsoft.ProjectOxford.Emotion&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;async Task&amp;lt;IEnumerable&amp;lt;RawEmotion&amp;gt;&amp;gt; CaptureEmotionAsync()
{
    RawEmotion[] result;

    try
    {
        var photoFile = await _photoService.CreateAsync();
        var imageProperties = ImageEncodingProperties.CreateBmp();
        await _mediaManager.CapturePhotoToStorageFileAsync(imageProperties, photoFile);
        result = await _emotionClient.RecognizeAsync(await photoFile.OpenStreamForReadAsync());
    }
    finally
    {
        await _photoService.CleanupAsync();
    }

    return result.IsNullOrEmpty()
        ? await TaskCache&amp;lt;IEnumerable&amp;lt;RawEmotion&amp;gt;&amp;gt;.Value(() =&amp;gt; Enumerable.Empty&amp;lt;RawEmotion&amp;gt;())
        : result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;First our &lt;code&gt;_photoService&lt;/code&gt; asynchronously creates a photo file&lt;/li&gt;
&lt;li&gt;From the &lt;code&gt;ImageEncodingProperties&lt;/code&gt; class, we create a bitmap encoding property set&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;_mediaManager&lt;/code&gt; captures a photo, storing it in the photo file with the specified encoding&lt;/li&gt;
&lt;li&gt;Finally we invoke the &lt;code&gt;_emotionClient&lt;/code&gt; passing it the stream from the persisted photo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; object contains a &lt;code&gt;Scores&lt;/code&gt; class that looks like the following (from my mugshot):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/set.png&#34; alt=&#34;Set&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The service returned a result. The result claims an &lt;strong&gt;81.5%&lt;/strong&gt; level of confidence that I&amp;rsquo;m happy based on the given image, what do you think? What you don&amp;rsquo;t see is that I&amp;rsquo;m actually taking a selfie
with 

    
        
    

    &lt;a href=&#34;https://twitter.com/codefoster&#34; target=&#39;_blank&#39;&gt;Jeremy Foster&lt;/a&gt;

 &amp;ndash; so, yeah &amp;ndash; I was pretty happy!&lt;/p&gt;

&lt;h1 id=&#34;construction&#34;&gt;Construction&lt;/h1&gt;

&lt;p&gt;I would be lying if I tried taking credit for any of the construction. I&amp;rsquo;m slightly embarrassed to admit that I opted out of building it, as I lack the carpentry skills needed
to do a decent job. Instead I asked a friend who just so happens to be awesome at carpentry. After persuading him with a bottle of single malt scotch whiskey, I had my magic
mirror constructed and the results were amazing!&lt;/p&gt;




    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2016/12/con-1.jpg&#39;
                            alt=&#34;Step 1&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2016/12/con-2.jpg&#39;
                            alt=&#34;Step 2&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u$&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2016/12/con-3.jpg&#39;
                            alt=&#34;Step 3&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;






    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2016/12/con-4.jpg&#39;
                            alt=&#34;Step 4&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2016/12/con-5.jpg&#39;
                            alt=&#34;Step 5&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u$&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2016/12/con-6.jpg&#39;
                            alt=&#34;Step 6&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;



&lt;p&gt;I was really excited to deploy my mirror software and give it a go.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/magic mirror.jpg&#34; alt=&#34;Mirror&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;check-it-out&#34;&gt;Check it out&lt;/h1&gt;

&lt;p&gt;&lt;style&gt;
    .iframe_container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 - this is responsive by adjusting the hight according to the width! */
        padding-top: 25px;
        height: 0;
    }
    .iframe_container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
&lt;/style&gt;
&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/KOTYW8EioBk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/PWr1zRBO90o&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The power of the global.json</title>
      <link>http://davidpine.net/blog/the-global-json/</link>
      <pubDate>Mon, 18 Jul 2016 22:40:31 -0500</pubDate>
      
      <guid>http://davidpine.net/blog/the-global-json/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;As I&amp;rsquo;m sure you&amp;rsquo;re all aware by now, &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/&#34;&gt;Monday June 27&lt;sup&gt;th&lt;/sup&gt;&lt;/a&gt; was a
special day for those of you who were anticipating the release of  &lt;code&gt;.NET Core&lt;/code&gt; and &lt;code&gt;ASP.NET Core&lt;/code&gt;. While the &amp;ldquo;core&amp;rdquo; frameworks and runtimes are RTM, the
tooling is actually still in preview. In fact, we&amp;rsquo;re currently on &lt;em&gt;Tools Preview 2&lt;/em&gt;. I wanted to focus this post entirely on one specific enhancement
to &lt;strong&gt;Visual Studio&lt;/strong&gt; solutions, enter the &lt;code&gt;global.json&lt;/code&gt;.
&lt;hr/&gt;
Let me paint a picture for you&amp;hellip;you&amp;rsquo;re developing an application. This application doesn&amp;rsquo;t have all the source code in the world, so you take on some dependencies.
Since we&amp;rsquo;re not living in caves, we have packages &amp;ndash; this is common nomenclature for and the norm for any modern software development project.
One of the aforementioned dependencies is a package that you just so happen to also work on and develop for. Imagine that you find a bug or want to make
an improvement to said package, what does that work-flow look like?&lt;/p&gt;

&lt;p&gt;For me, this typically involved the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open dependency project in a new instance of &lt;strong&gt;Visual Studio&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Make code change&lt;/li&gt;
&lt;li&gt;Code review&lt;/li&gt;
&lt;li&gt;Commit code&lt;/li&gt;
&lt;li&gt;Build server builds code&lt;/li&gt;
&lt;li&gt;Build goes &amp;ldquo;green&amp;rdquo; (tests passed)&lt;/li&gt;
&lt;li&gt;Build server publishes package&lt;/li&gt;
&lt;li&gt;Wander the halls playing Pokémon Go&lt;/li&gt;
&lt;li&gt;Return to original project, update package reference&lt;/li&gt;
&lt;li&gt;Continue with life&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What if I told you, that headache is all but gone and you will never have to go through those agonizing steps again! Say it ain&amp;rsquo;t so
(queue &lt;a href=&#34;https://youtu.be/ENXvZ9YRjbo&#34; target=&#34;_blank&#34;&gt;Weezer&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;global-json&#34;&gt;Global.json&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;global.json&lt;/code&gt; file sits out at the solution directory-level and literally has one of the simplest &lt;code&gt;JSON&lt;/code&gt; schemas you will ever see. The default templates
generate the following (for the &lt;a href=&#34;http://json.schemastore.org/global&#34;&gt;full schema&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;projects&amp;quot;: [ &amp;quot;src&amp;quot;, &amp;quot;test&amp;quot; ],
  &amp;quot;sdk&amp;quot;: {
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0-preview2-003121&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I always immediately delete the &lt;code&gt;sdk&lt;/code&gt; property. If omitted the tooling simply assumes the latest &lt;strong&gt;SDK&lt;/strong&gt; installed. Now, for all the fun! The &lt;code&gt;projects&lt;/code&gt;
property is an array of strings. It&amp;rsquo;s defined as the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; A list of project folders relative to this file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These folders are search locations for resolving dependencies, where projects take precedence over packages.&lt;/p&gt;

&lt;h3 id=&#34;projects-over-packages&#34;&gt;Projects over Packages&lt;/h3&gt;

&lt;p&gt;Assume you&amp;rsquo;re developing in a project, namely &lt;code&gt;IEvangelist.NetCore.App&lt;/code&gt; and it takes a dependency on &lt;code&gt;IEvangelist.NetCore.ClassLib&lt;/code&gt; and &lt;code&gt;IEvangelist.NetCore.Services&lt;/code&gt;. These
dependencies are packages (outside the solution) and you can use the &lt;code&gt;global.json/projects&lt;/code&gt; array to your advantage. Using our imaginations, let us find a need
to source-step into &lt;code&gt;IEvangelist.NetCore.ClassLib&lt;/code&gt;. Let us also imagine that this project is in a neighboring folder outside our solution, perhaps the same repo,
we can now use a relative path like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;projects&amp;quot;: [ 
    &amp;quot;src&amp;quot;, 
    &amp;quot;../../IEvangelist.NetCore.ClassLib/src&amp;quot;, // &amp;lt;-- Relative path to packaged source
    &amp;quot;../../IEvangelist.NetCore.Services/src&amp;quot;    
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;before&#34;&gt;Before&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/07/before.jpg&#34; alt=&#34;Before global.json changes&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;after&#34;&gt;After&lt;/h4&gt;

&lt;p&gt;After saving these changes to the &lt;code&gt;global.json&lt;/code&gt; you&amp;rsquo;ll notice &lt;strong&gt;Visual Studio&lt;/strong&gt; pull this project into solution, but outside of the &lt;code&gt;src&lt;/code&gt; folder. Now when
you debug you can actually step into the source and treat it like any other source code you have. Project dependencies are resolved by way of their &lt;code&gt;project.json&lt;/code&gt; being discovered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/07/after.jpg&#34; alt=&#34;After global.json changes&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;open-source-for-everyone&#34;&gt;Open Source for Everyone&lt;/h3&gt;

&lt;p&gt;One of the biggest advantages in my opinion is the ability to pull down source from &lt;code&gt;github&lt;/code&gt; that I rely on and source-step into it. For example, I have been developing with &lt;code&gt;ASP.NET
Core&lt;/code&gt; since &lt;strong&gt;RC1&lt;/strong&gt;, nearly eight months!! With the power of the &lt;code&gt;global.json&lt;/code&gt; I can pull down source that I&amp;rsquo;m relying on in a package and fulfill my understanding of it
as it executes. Simply amazing!&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;For more details, these are some additional links and points of reference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/core/tools/global-json&#34;&gt;&lt;strong&gt;Global.json Reference&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/34794054/2410379&#34;&gt;&lt;strong&gt;Explanation of projects section in Global.json&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core RC2 (Migration Guide)</title>
      <link>http://davidpine.net/blog/migrating-to-rc2/</link>
      <pubDate>Fri, 20 May 2016 22:40:31 -0500</pubDate>
      
      <guid>http://davidpine.net/blog/migrating-to-rc2/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;On Monday, May 16&lt;sup&gt;th&lt;/sup&gt; 2016 there was an amazing announcement from the &lt;strong&gt;.NET Blog&lt;/strong&gt; team!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/05/16/announcing-net-core-rc2/&#34;&gt;Announcing .NET Core RC2 and .NET Core SDK Preview 1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post will serve as a guide that walks you through the steps as I experienced them from migrating existing &lt;code&gt;ASP.NET Core RC1&lt;/code&gt; applications to &lt;code&gt;ASP.NET Core RC2&lt;/code&gt;.
It is worth mentioning that I&amp;rsquo;m am targeting the &lt;code&gt;.NET 4.6&lt;/code&gt; framework. So, I &lt;em&gt;do not&lt;/em&gt; cover the &lt;code&gt;.netcoreapp&lt;/code&gt; or &lt;code&gt;netstandard&lt;/code&gt; TFMs (target framework monikers).&lt;/p&gt;

&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;RC2&lt;/strong&gt; release brings the &lt;code&gt;.NET Core CLI&lt;/code&gt; to the forefront, and with that all the other command line tooling that
you&amp;rsquo;ve grown accustomed to should be stricken from your environment, i.e.; &lt;code&gt;DNX&lt;/code&gt;, &lt;code&gt;DNU&lt;/code&gt;, and &lt;code&gt;DNVM&lt;/code&gt;. Let&amp;rsquo;s start with the
removal of all these utilities.&lt;/p&gt;

&lt;h3 id=&#34;removing-dnvm&#34;&gt;Removing DNVM&lt;/h3&gt;

&lt;p&gt;Believe it or not, you might have a dated version of the &lt;strong&gt;DNVM CLI&lt;/strong&gt; and in order to invoke the &lt;code&gt;uninstall&lt;/code&gt; you might have to first
perform an &lt;code&gt;update-self&lt;/code&gt; command. Doing so will ensure that you have the latest version, which will contain the &lt;code&gt;uninstall&lt;/code&gt; command.
From a &lt;code&gt;cmd&lt;/code&gt; window &lt;em&gt;running as admininistrator&lt;/em&gt;, execute the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm update-self
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then execute the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm uninstall
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;verification&#34;&gt;Verification&lt;/h4&gt;

&lt;p&gt;From a new &lt;code&gt;cmd&lt;/code&gt; window, the &lt;code&gt;dnvm&lt;/code&gt; command should result in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;λ dnvm
&#39;dnvm&#39; is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-dnx-dnu&#34;&gt;Removing DNX &amp;amp; DNU&lt;/h3&gt;

&lt;p&gt;From a &lt;code&gt;cmd&lt;/code&gt; line window, execute &lt;code&gt;dnx&lt;/code&gt; - you should see something similar to this as output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;λ dnx
Microsoft .NET Execution environment Clr-x86-1.0.0-rc1-16231

Usage: dnx [options]

Options:
  --project|-p &amp;lt;PATH&amp;gt;              Path to the project.json file or the application folder. Defaults to the current folder if not provided.
  --appbase &amp;lt;PATH&amp;gt;                 Application base directory path
  --lib &amp;lt;LIB_PATHS&amp;gt;                Paths used for library look-up
  --debug                          Waits for the debugger to attach before beginning execution.
  --bootstrapper-debug             Waits for the debugger to attach before bootstrapping runtime.
  --framework &amp;lt;FRAMEWORK_ID&amp;gt;       Set the framework version to use when running (i.e. dnx451, dnx452, dnx46, ...)
  -?|-h|--help                     Show help information
  --version                        Show version information
  --watch                          Watch file changes
  --packages &amp;lt;PACKAGE_DIR&amp;gt;         Directory containing packages
  --configuration &amp;lt;CONFIGURATION&amp;gt;  The configuration to run under
  --port &amp;lt;PORT&amp;gt;                    The port to the compilation server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise enter &lt;code&gt;dnu&lt;/code&gt; in the same &lt;code&gt;cmd&lt;/code&gt; window, expecting the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;λ dnu
Microsoft .NET Development Utility Clr-x86-1.0.0-rc1-16231

Usage: dnu [options] [command]

Options:
  -v|--verbose  Show verbose output
  -?|-h|--help  Show help information
  --version     Show version information

Commands:
  build             Produce assemblies for the project in given directory
  clear-http-cache  Clears the package cache.
  commands          Commands related to managing application commands (install, uninstall)
  feeds             Commands related to managing package feeds currently in use
  install           Install the given dependency
  list              Print the dependencies of a given project
  pack              Build NuGet packages for the project in given directory
  packages          Commands related to managing local and remote packages folders
  publish           Publish application for deployment
  restore           Restore packages
  wrap              Wrap a csproj/assembly into a project.json, which can be referenced by project.json files

Use &amp;quot;dnu [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;DNX&lt;/code&gt; and &lt;code&gt;DNU&lt;/code&gt; command line tools are simply &lt;code&gt;exe&#39;s&lt;/code&gt; in your &lt;code&gt;%USERPROFILE%\.dnx&lt;/code&gt; and &lt;code&gt;%USERPROFILE%\.dnx\bin&lt;/code&gt; directories. Navigate to your &lt;code&gt;%USERPROFILE%&lt;/code&gt;
directory from windows explorer and delete the &lt;code&gt;.dnx&lt;/code&gt; directory entirely. Once you have successfully deleted this directory you
should be able to execute the &lt;code&gt;dnx&lt;/code&gt; and &lt;code&gt;dnu&lt;/code&gt; commands again from a &lt;code&gt;cmd&lt;/code&gt; window and the system should complain that they are not
recognized.&lt;/p&gt;

&lt;h4 id=&#34;verification-1&#34;&gt;Verification&lt;/h4&gt;

&lt;p&gt;From a new &lt;code&gt;cmd&lt;/code&gt; window, the &lt;code&gt;dnx&lt;/code&gt; and &lt;code&gt;dnu&lt;/code&gt; commands should result in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;λ dnx
&#39;dnx&#39; is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;λ dnu
&#39;dnu&#39; is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environment-variables&#34;&gt;Environment Variables&lt;/h3&gt;

&lt;p&gt;Unfortunately, the &lt;code&gt;PATH&lt;/code&gt; environment variable is not cleaned up and this needs to be done manually.&lt;/p&gt;

&lt;p&gt;Press the &lt;kbd&gt;Windows&lt;/kbd&gt; key, then begin typing &amp;ldquo;environment&amp;rdquo;, then select either of the two top options returned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/win-search.png&#34; alt=&#34;Windows Search&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You are then presented the &amp;ldquo;system properties&amp;rdquo; dialog, select &lt;strong&gt;Environment Variables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/sys-props.png&#34; alt=&#34;System Properties&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We will need to ensure that both &lt;code&gt;PATH&lt;/code&gt; variables are cleaned up, including your &lt;code&gt;%USERPROFILE%&lt;/code&gt; and the &lt;code&gt;System&lt;/code&gt; variables. Let&amp;rsquo;s &lt;kbd&gt;Edit&lt;/kbd&gt; both of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/env-vars.png&#34; alt=&#34;Environment Variables&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From the &lt;strong&gt;Edit Variables&lt;/strong&gt; dialog, remove any and all of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\[ your global identifier ]\.dnx\bin;
C:\Users\[ your global identifier ]\.dnx\runtimes\dnx-clr-win-x86.1.0.0-rc1-update1\bin;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/edit-vars.png&#34; alt=&#34;Edit User Variables&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;net-core-cli&#34;&gt;.NET Core CLI&lt;/h3&gt;

&lt;p&gt;Simply follow &lt;a href=&#34;https://www.microsoft.com/net/core#windows&#34;&gt;these instuctions&lt;/a&gt;. Once you&amp;rsquo;re able to &amp;ldquo;Run the app&amp;rdquo; from the new &lt;strong&gt;CLI&lt;/strong&gt; you&amp;rsquo;re good to go.&lt;/p&gt;

&lt;h4 id=&#34;review&#34;&gt;Review&lt;/h4&gt;

&lt;p&gt;You should the following checklist fully satisfied at this point.&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;fa fa-check-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;strong&gt;DNX&lt;/strong&gt;, &lt;strong&gt;DNU&lt;/strong&gt; and &lt;strong&gt;DNVM&lt;/strong&gt; completely removed / uninstalled&lt;br&gt;
&lt;i class=&#34;fa fa-check-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;strong&gt;Visual Studio 2015 Update 2&lt;/strong&gt; installed&lt;br&gt;
&lt;i class=&#34;fa fa-check-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;strong&gt;.NET Core CLI&lt;/strong&gt; installed&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;edit-by-hand-i-class-fa-fa-pencil-square-o-aria-hidden-true-i&#34;&gt;Edit by Hand &lt;i class=&#34;fa fa-pencil-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/h2&gt;

&lt;p&gt;There were changes to &lt;strong&gt;APIs&lt;/strong&gt; which required changes to implementation aspects of the source code. Additionally, &lt;code&gt;namespace&lt;/code&gt;
changes such as (but not limited to) &lt;code&gt;Microsoft.AspNet.*&lt;/code&gt; to &lt;code&gt;Microsoft.AspNetCore.*&lt;/code&gt;. But the bulk of the work was really in the hand-editing
of &lt;code&gt;.sln&lt;/code&gt;, &lt;code&gt;global.json&lt;/code&gt;, &lt;code&gt;.xproj&lt;/code&gt;, &lt;code&gt;project.json&lt;/code&gt;, etc. files. Let&amp;rsquo;s look at what changed.&lt;/p&gt;

&lt;h3 id=&#34;the-sln-file&#34;&gt;The &lt;code&gt;.sln&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Change the &lt;strong&gt;VisualStudioVersion&lt;/strong&gt; from &lt;code&gt;14.0.24720.0&lt;/code&gt; to &lt;code&gt;14.0.25123.0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VisualStudioVersion = 14.0.25123.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-global-json-file&#34;&gt;The &lt;code&gt;global.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Change the &lt;strong&gt;version&lt;/strong&gt; from &lt;code&gt;1.0.0-rc1-update1&lt;/code&gt; to &lt;code&gt;1.0.0-preview1-002702&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;projects&amp;quot;: [ &amp;quot;src&amp;quot;, &amp;quot;test&amp;quot; ],
  &amp;quot;sdk&amp;quot;: {
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0-preview1-002702&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-xproj-file&#34;&gt;The &lt;code&gt;.xproj&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.xproj&lt;/code&gt; files are a little more involved, there are a few items that are required to be changed. In &lt;strong&gt;RC1&lt;/strong&gt; we had proprerties that
were specific to &lt;strong&gt;DNX&lt;/strong&gt;, now we replace these with &lt;strong&gt;DOTNET&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;rc1&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DNX\Microsoft.DNX.Props&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DotNet\Microsoft.DotNet.Props&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, we need to change the targets. This one requires that you know the type of project you&amp;rsquo;re editing, for example &lt;em&gt;&amp;ldquo;class library&amp;rdquo;&lt;/em&gt; vs. &lt;em&gt;&amp;ldquo;web site&amp;rdquo;&lt;/em&gt;. In &lt;strong&gt;RC1&lt;/strong&gt;
there was only one target, but with &lt;strong&gt;RC2&lt;/strong&gt; they are differeniated.&lt;/p&gt;

&lt;h4 id=&#34;rc1-1&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DNX\Microsoft.DNX.targets&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-class-library&#34;&gt;RC2 (class library)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DotNet\Microsoft.DotNet.targets&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-web&#34;&gt;RC2 (web)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DotNet.Web\Microsoft.DotNet.Web.targets&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-project-json-file&#34;&gt;The &lt;code&gt;project.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;There has been a large reworking of the &lt;code&gt;project.json&lt;/code&gt; file - detailed &lt;a href=&#34;https://github.com/aspnet/Announcements/issues/175&#34;&gt;here&lt;/a&gt;. I will not be covering all
of the changes here, but I do intend calling attention to some of the observations I have made and changes that were most pertinent. Here is the link for the official
&lt;a href=&#34;http://json.schemastore.org/project-1.0.0-rc2&#34;&gt;&lt;code&gt;project.json schema&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will look at various sections of the &lt;code&gt;project.json&lt;/code&gt; file changes. Let&amp;rsquo;s start with replacing &lt;code&gt;compilationOptionsbuildOptions&lt;/code&gt; with &lt;code&gt;buildOptions&lt;/code&gt;, and notice that
we are adding much more options than before.&lt;/p&gt;

&lt;h4 id=&#34;rc1-2&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;compilationOptions&amp;quot;: {
  &amp;quot;emitEntryPoint&amp;quot;: true,
  &amp;quot;warningsAsErrors&amp;quot;: true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-1&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;buildOptions&amp;quot;: {       
  &amp;quot;emitEntryPoint&amp;quot;: true,
  &amp;quot;warningsAsErrors&amp;quot;: true,
  &amp;quot;preserveCompilationContext&amp;quot;: true,
  &amp;quot;embed&amp;quot;: &amp;quot;Views/**&amp;quot;, // Instead of &amp;quot;.:resource&amp;quot;: &amp;quot;Views/**&amp;quot;,
  &amp;quot;compile&amp;quot;: {
    &amp;quot;exclude&amp;quot;: [ &amp;quot;wwwroot&amp;quot;, &amp;quot;node_modules&amp;quot; ] // Now here, instead of &amp;quot;.:exclude&amp;quot;
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, we have &lt;code&gt;publishOptions&lt;/code&gt; that we can utilize - consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;publishOptions&amp;quot;: {
  &amp;quot;include&amp;quot;: [
    &amp;quot;wwwroot&amp;quot;,
    &amp;quot;appsettings.json&amp;quot;,
    &amp;quot;web.config&amp;quot;
  ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we have to be a little more specific with how we want the server to handle garbage collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;runtimeOptions&amp;quot;: {
  &amp;quot;gcServer&amp;quot;: true, // Yes, please perform garbage collection
  &amp;quot;gcConcurrent&amp;quot;: true // Yes, please do so concurrently...
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-web-config-file&#34;&gt;The &lt;code&gt;web.config&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Now, &lt;strong&gt;IIS&lt;/strong&gt; is a little smarter and is starting to recognize &lt;strong&gt;ASP.NET Core&lt;/strong&gt; a little more.&lt;/p&gt;

&lt;h4 id=&#34;rc1-3&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;handlers&amp;gt;
      &amp;lt;add name=&amp;quot;httpPlatformHandler&amp;quot; path=&amp;quot;*&amp;quot; verb=&amp;quot;*&amp;quot; modules=&amp;quot;httpPlatformHandler&amp;quot; 
           resourceType=&amp;quot;Unspecified&amp;quot;/&amp;gt;
    &amp;lt;/handlers&amp;gt;
    &amp;lt;httpPlatform processPath=&amp;quot;%DNX_PATH%&amp;quot; arguments=&amp;quot;%DNX_ARGS%&amp;quot; stdoutLogEnabled=&amp;quot;false&amp;quot; /&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-2&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;handlers&amp;gt;
      &amp;lt;add name=&amp;quot;aspNetCore&amp;quot; path=&amp;quot;*&amp;quot; verb=&amp;quot;*&amp;quot; modules=&amp;quot;AspNetCoreModule&amp;quot; 
           resourceType=&amp;quot;Unspecified&amp;quot; /&amp;gt;
    &amp;lt;/handlers&amp;gt;
    &amp;lt;aspNetCore processPath=&amp;quot;%LAUNCHER_PATH%&amp;quot; arguments=&amp;quot;%LAUNCHER_ARGS%&amp;quot; 
                forwardWindowsAuthToken=&amp;quot;false&amp;quot; stdoutLogEnabled=&amp;quot;false&amp;quot; /&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-hosting-json-file&#34;&gt;The &lt;code&gt;hosting.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;With the release of &lt;strong&gt;RC2&lt;/strong&gt;, the &lt;code&gt;project.json&lt;/code&gt; schema removed the &lt;code&gt;webroot&lt;/code&gt; property. Now in order to specify the websites&amp;rsquo; static content directory we need to
create a &lt;code&gt;hosting.json&lt;/code&gt; file. This file should look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;webroot&amp;quot;: &amp;quot;wwwroot&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-appsettings-json-file&#34;&gt;The &lt;code&gt;appsettings.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;This was a minor change, but if you forgot to change this - then you&amp;rsquo;ll end up with a runtime exception. The &lt;code&gt;Logging:LogLevel:Default&lt;/code&gt; should now be
&lt;code&gt;Debug&lt;/code&gt; as &lt;code&gt;Verbose&lt;/code&gt; was removed altogether.&lt;/p&gt;

&lt;h4 id=&#34;rc1-4&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Logging&amp;quot;: {
      &amp;quot;IncludeScopes&amp;quot;: false,
      &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Verbose&amp;quot;, // &amp;lt; -- Change &amp;quot;Verbose&amp;quot;
        &amp;quot;System&amp;quot;: &amp;quot;Information&amp;quot;,
        &amp;quot;Microsoft&amp;quot;: &amp;quot;Information&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-3&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Logging&amp;quot;: {
      &amp;quot;IncludeScopes&amp;quot;: false,
      &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Debug&amp;quot;, // &amp;lt; --- To &amp;quot;Debug&amp;quot;
        &amp;quot;System&amp;quot;: &amp;quot;Information&amp;quot;,
        &amp;quot;Microsoft&amp;quot;: &amp;quot;Information&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-launchsettings-json-file&#34;&gt;The &lt;code&gt;launchSettings.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;environmentVariables&lt;/code&gt; changed, such that the key name for the environment is no longer referred to as &amp;ldquo;Hosting:Environment&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;rc1-5&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;environmentVariables&amp;quot;: {
  &amp;quot;Hosting:Environment&amp;quot;: &amp;quot;Development&amp;quot; // &amp;lt; -- Change &amp;quot;Hosting:Environment&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-4&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;environmentVariables&amp;quot;: {
  &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot; // &amp;lt; -- To &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-cs-files&#34;&gt;The &lt;code&gt;*.cs&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;Some of these were very simple to fix. After updating your &lt;code&gt;project.json&lt;/code&gt; with the latest &lt;strong&gt;RC2&lt;/strong&gt; versions - some changes are as simple as a &lt;code&gt;namespace&lt;/code&gt; change (but others are more involed).&lt;/p&gt;

&lt;h4 id=&#34;rc1-6&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNet.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-5&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNetCore.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-changes&#34;&gt;API changes&lt;/h3&gt;

&lt;p&gt;There was an attempt to unify some of the APIs as it pertains to consistency. As such, I had to make the following changes to my projects.
The &lt;code&gt;IApplicationBuilder.Use*&lt;/code&gt; pattern now takes a new &lt;code&gt;*Options&lt;/code&gt; instance rather than an &lt;code&gt;Action&amp;lt;*Options&amp;gt;&lt;/code&gt;, providing more control to the consumer.&lt;/p&gt;

&lt;h4 id=&#34;rc1-7&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.UseCookieAuthentication(options =&amp;gt;
{
    options.AuthenticationScheme = &amp;quot;AspNetCookie&amp;quot;;
    options.AutomaticAuthenticate = true;
    options.AutomaticChallenge = true;
    options.LoginPath = &amp;quot;/account/login&amp;quot;;
    options.LogoutPath = &amp;quot;/account/logout&amp;quot;;
    options.AccessDeniedPath = &amp;quot;/account/forbidden&amp;quot;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-6&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationScheme = AuthenticationScheme.JciCookie,
    AutomaticAuthenticate = true,
    AutomaticChallenge = true,
    LoginPath = &amp;quot;/account/login&amp;quot;,
    LogoutPath = &amp;quot;/account/logout&amp;quot;,
    AccessDeniedPath = &amp;quot;/account/forbidden&amp;quot;,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The service locator pattern (or should I say &amp;ldquo;anti-pattern&amp;rdquo;) is slowing being removed from the framework. As such, if you were relying on the &lt;code&gt;CallContextServiceLocator.Locator.ServiceProvider&lt;/code&gt;
you can no longer do so with the &lt;strong&gt;RC2&lt;/strong&gt; release.&lt;/p&gt;

&lt;p&gt;Wherever you were using the &lt;code&gt;IApplication&lt;/code&gt; interface, you should be able to instead use the &lt;code&gt;IWebHost&lt;/code&gt; interface.&lt;/p&gt;

&lt;h3 id=&#34;controllers-as-services&#34;&gt;Controllers as Services&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;RC1&lt;/strong&gt;, there was a nice little feature that allowed for any &lt;code&gt;Type&lt;/code&gt; to exist in a list of plausible controller/services - meaning that you could basically register external controllers as
valid API and View entry points into your hosting application. You simply needed to add the types via the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IMvcBuilder.AddControllersAsServices(params Type[] types);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method signature changed with &lt;strong&gt;RC2&lt;/strong&gt; and it no longer accepts any arguments. In order to retain this functionality, you must first add the desired external assemblies as an &lt;code&gt;AssemblyPart&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var assembly in GetExternalAssemblies())
{
    builder.PartManager.ApplicationParts.Add(new AssemblyPart(assembly));    
}

builder.AddControllersAsServices();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-startup-ctor&#34;&gt;The Startup &lt;code&gt;.ctor&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;One little change, you&amp;rsquo;re now required to explicitly set the base path and you can do so with the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Startup(IHostingEnvironment env)
{
    var builder =
        new ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath) // Explicity set base from the content root path
            .AddJsonFile(&amp;quot;appsettings.json&amp;quot;, true)
            .AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, true)
            .AddEnvironmentVariables();
    // Omitted for brevity...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-program-cs-file&#34;&gt;The &lt;code&gt;Program.cs&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Yes, we are now a console application&amp;hellip;so we&amp;rsquo;ll need this for our entry point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Program
{
    public static void Main(string[] arguments)
    {
        using (var host = 
            new WebHostBuilder()
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .UseIISIntegration()
                .UseStartup&amp;lt;Startup&amp;gt;()
                .Build();)
        {
            host.Run();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;breaking-changes&#34;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;For a complete listing of all the announcements, please visit the official
&lt;a href=&#34;https://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-rc2&#34;&gt;&lt;strong&gt;ASP.NET &lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Repo&lt;/strong&gt;&lt;/a&gt; announcements issue.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;The previous steps were really to get your environment in an &lt;strong&gt;RC2&lt;/strong&gt; ready state, but there is so much more you can learn that has changed.
I encourage bookmarking and reading the following articles as time permits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dotnet.github.io/docs/core-concepts/dnx-migration.html&#34;&gt;&lt;strong&gt;Migrating from DNX to .NET Core CLI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.asp.net/en/latest/migration/rc1-to-rc2.html&#34;&gt;&lt;strong&gt;Migrating from ASP.NET 5 RC1 to ASP.NET Core&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md&#34;&gt;&lt;strong&gt;The .NET Platform Standard&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dotnet.github.io/docs/core-concepts/libraries/libraries-with-cli.html&#34;&gt;&lt;strong&gt;Writing Libraries with Cross Platform Tools&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There, that really wasn&amp;rsquo;t too bad - was it? I&amp;rsquo;m certain that I didn&amp;rsquo;t cover everything and that I probably missed something. I hope that this was helpful, please feel free to share this!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>