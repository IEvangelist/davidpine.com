<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET Core on IEvangelist</title>
    <link>http://davidpine.net/categories/asp/index.net-core/</link>
    <description>Recent content in ASP.NET Core on IEvangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Mar 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://davidpine.net/categories/asp.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ASP.NET Core Unit Testing For Security Attributes</title>
      <link>http://davidpine.net/blog/asp-net-core-security-unit-testing/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/asp-net-core-security-unit-testing/</guid>
      <description>

&lt;h1 id=&#34;intro:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;As a developer, I can say that developers are lazy - at least I know and acknowledge that I am. If I&amp;rsquo;m tasked with something even the slightest bit repetitious I&amp;rsquo;ll script it out, or find a way to automate it. Likewise, if I fall into a habit of forgetting something important - I&amp;rsquo;ll figure out a way to &lt;em&gt;not forget&lt;/em&gt;. Especially when it comes to securing an application.&lt;/p&gt;

&lt;h2 id=&#34;security-soapbox:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Security Soapbox&lt;/h2&gt;

&lt;p&gt;We should take application security very seriously! With &lt;strong&gt;ASP.NET Core&lt;/strong&gt; there&amp;rsquo;s a lot of &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/&#34; target=&#34;_blank&#34;&gt;existing documentation&lt;/a&gt; for securing your application. This covers identity, authentication, authorization, data protection, HTTPS, safe storage, Azure key vault, anti-request forgery, open redirect attack, cross-site scripting, etc&amp;hellip; the list goes on and on. All these things are important and as a developer you&amp;rsquo;re ultimately accountable for writing secure code.&lt;/p&gt;

&lt;h2 id=&#34;the-dilemma:62ff3a2cc4e15c531086d495140b895f&#34;&gt;The Dilemma&lt;/h2&gt;

&lt;p&gt;A while back I spent a fair amount of time writing some &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; endpoints and I kept forgetting to provide the &lt;code&gt;AuthorizeAttribute&lt;/code&gt; on various controller classes or even controller actions.&lt;/p&gt;

&lt;p&gt;There is an easy way to solve this. Within &lt;code&gt;ConfigureServices&lt;/code&gt; we could apply an &lt;code&gt;AuthorizeFilter&lt;/code&gt; with a policy that requires an authenticated user. This serves as a nice security blanket, that ensures all endpoints are only accessible from an authenticated user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServicesCollection services)
{
    services.AddMvc(
        options =&amp;gt;
        {
            // Only allow authenticated users.
            var defaultPolicy =
                new AuthorizationPolicyBuilder()
                    .RequireAuthenticatedUser()
                    .Build();

            options.Filters.Add(new AuthorizeFilter(defaultPolicy));    
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, based on your needs - you may choose to not apply this filter. If you choose to not apply this filter you&amp;rsquo;re left with three options.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply an &lt;code&gt;AuthorizeAttribute&lt;/code&gt; at the controller class level (cascades onto all the actions)&lt;/li&gt;
&lt;li&gt;Apply an &lt;code&gt;AuthorizeAttribute&lt;/code&gt; on each individual action method &lt;i class=&#34;fa fa-meh-o&#34;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Not protect your API at all &lt;i class=&#34;fa fa-frown-o&#34;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;automation-to-the-rescue:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Automation To The Rescue&lt;/h2&gt;

&lt;p&gt;Some of our &lt;strong&gt;ASP.NET Core Web APIs&lt;/strong&gt; were protected by the filter, some by controller class level &lt;code&gt;AuthorizeAttribute&lt;/code&gt; decoration and others by the individual action&amp;hellip; and some not at all. This is a problem! It is common practice to run unit tests prior to pushing code into a feature branch for a pull request. If I forget to do that, my build system has some pull request pre-checks in place - one of which is to run the unit tests. As such, I know that unit tests will be executed. With this, I decided to write a unit test that leveraged a bit of reflection. Since it is a unit test, I&amp;rsquo;m not terribly concerned with performance - so reflection is fine&amp;hellip;&lt;/p&gt;

&lt;p&gt;Here was the thought process to write a unit test that could ensure that I&amp;rsquo;m not forgetful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load all assemblies into the current &lt;code&gt;AppDomain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Of all the loaded assemblies, get all the controller types

&lt;ul&gt;
&lt;li&gt;Of those controller types, get the ones that are missing the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Of the unauthorized controller types, get the &lt;code&gt;HttpMethodAttribute&lt;/code&gt; methods&lt;/li&gt;
&lt;li&gt;If missing both the &lt;code&gt;AuthorizeAttribute&lt;/code&gt; and &lt;code&gt;AllowAnonymousAttribute&lt;/code&gt; - &lt;strong&gt;fail&lt;/strong&gt; &lt;i class=&#34;fa fa-frown-o&#34;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;codify:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Codify&lt;/h3&gt;

&lt;p&gt;So, our step one is to load all assemblies into the current &lt;code&gt;AppDomain&lt;/code&gt;. This makes some assumptions. It assumes that our test project will have a reference to the &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; project, so that its &lt;code&gt;.dll&lt;/code&gt; will be available to us for loading (in our &lt;code&gt;bin&lt;/code&gt; directory). We will also assume the root namespace we&amp;rsquo;re looking for, we should know this anyway as we follow naming conventions and we&amp;rsquo;re the owner of the corresponding project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ActionTests
{
    const string RootNamespace = nameof(IEvangelist);
    static readonly string[] ExecutableExtensions = { &amp;quot;.exe&amp;quot;, &amp;quot;.dll&amp;quot; };

    public ActionTests()
        =&amp;gt; Directory.EnumerateFiles(
                Path.GetDirectoryName(
                        Assembly.GetExecutingAssembly().Location) ?? string.Empty,
                        $&amp;quot;{RootNamespace}.*&amp;quot;)
                     .Where(IsExeOrDll)
                     .Select(Assembly.LoadFrom)
                     .Select(assembly =&amp;gt; 
                        TryCatchIgnore(
                            () =&amp;gt; AppDomain.CurrentDomain.Load(assembly.GetName())))
                     .ToList();

    static bool IsExeOrDll(string path)
        =&amp;gt; ExecutableExtensions.Any(
            extension =&amp;gt; 
                extension.Equals(
                    Path.GetExtension(path), 
                    StringComparison.OrdinalIgnoreCase));

    static T TryCatchIgnore&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; func) {
        try { return func(); }
        catch { return default; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step two, is really the entry point of our core functionality for the test itself. We&amp;rsquo;ll need a &lt;code&gt;Fact&lt;/code&gt; test method. Yes, &lt;a href=&#34;http://davidpine.net/blog/xunit-powered-by-roslyn&#34; target=&#34;_blank&#34;&gt;I&amp;rsquo;m a HUGE fan of &lt;strong&gt;xUnit&lt;/strong&gt;&lt;/a&gt; - they have done some amazing things! In this test method we will start by getting all the types that are a subclass of &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Fact]
public void AllActionsOrParentControllerHaveAuthorizationAttributeTest()
{
    var allControllers = GetAllControllerTypes();

    // we&#39;ll continue here ...
}

static List&amp;lt;Type&amp;gt; GetAllControllerTypes()
    =&amp;gt; AppDomain.CurrentDomain
                .GetAssemblies()
                .Where(a =&amp;gt; a.FullName.StartsWith(RootNamespace))
                .SelectMany(a =&amp;gt; a.GetTypes()
                                  .Where(t =&amp;gt; t.FullName.Contains(Controller)
                                           || t.BaseType == ControllerType
                                           || t.DeclaringType == ControllerType))
                .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have all the controller types from all the assemblies loaded into our &lt;code&gt;AppDomain&lt;/code&gt;, we need to filter them. We need to find the types that are missing the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;, we&amp;rsquo;ll call these &lt;code&gt;unauthorizedControllers&lt;/code&gt; for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Fact]
public void AllActionsOrParentControllerHaveAuthorizationAttributeTest()
{
    var allControllers = GetAllControllerTypes();
    var unauthorizedControllers = 
        GetControllerTypesThatAreMissing&amp;lt;AuthorizeAttribute&amp;gt;(allControllers);

    // We&#39;ll continue from here...
}

static List&amp;lt;Type&amp;gt; GetControllerTypesThatAreMissing&amp;lt;TAttribute&amp;gt;(
    IEnumerable&amp;lt;Type&amp;gt; types)
    where TAttribute : Attribute
    =&amp;gt; types.Where(t =&amp;gt; t.GetCustomAttribute&amp;lt;TAttribute&amp;gt;() == null)
            .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method iterates through the given &lt;code&gt;IEnumerable&amp;lt;Type&amp;gt;&lt;/code&gt; and returns a &lt;code&gt;List&amp;lt;Type&amp;gt;&lt;/code&gt; that are not attributed with the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;. The reason that we&amp;rsquo;re filtering out controller types that are attributed, is that we&amp;rsquo;ll consider them to be protected from the standpoint of our unit-testing capabilities. Now, we need to find all the methods on these types that match the following criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are a &lt;code&gt;public&lt;/code&gt; instance method&lt;/li&gt;
&lt;li&gt;Have any &lt;code&gt;HttpMethodAttribute&lt;/code&gt; subclass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These methods are the controller&amp;rsquo;s actions. From these actions, we need to find the unauthorized actions. This is done by filtering out actions that explicitly declare themselves with the &lt;code&gt;AllowAnonymousAttribute&lt;/code&gt; and are also missing the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var controller in unauthorizedControllers)
{
    var actions =
        controller.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                    .Where(m =&amp;gt; m.GetCustomAttributes&amp;lt;HttpMethodAttribute&amp;gt;().Any())
                    .ToList();

    var unauthorizedActions = 
        actions.Where(
            action =&amp;gt; 
                action.GetCustomAttribute&amp;lt;AuthorizeAttribute&amp;gt;() == null &amp;amp;&amp;amp;
                action.GetCustomAttribute&amp;lt;AllowAnonymousAttribute&amp;gt;() == null)
               .ToList();
    
    // If unauthorizedActions.Any() is true, sound the alarms!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add a few additional sanity checks along the way - with the caveat that this is not your typical &amp;ldquo;unit test&amp;rdquo;. For example we could add the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assert that we do in fact load assemblies&lt;/li&gt;
&lt;li&gt;Assert that count of all the controllers is greater than the unauthorized controllers&lt;/li&gt;
&lt;li&gt;Assert that we find our &amp;ldquo;white-listed&amp;rdquo; controller&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;putting-it-all-together:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Putting It All Together&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Routing;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Xunit;

namespace IEvangelist.Tests
{
    public class ActionTests
    {
        const string RootNamespace = nameof(_Evangelist);
        const string Controller = nameof(Controller);
        const string WhiteListed = nameof(UnauthorizedActionInController.GetZero);

        static readonly Type ControllerType = typeof(Controller);
        static readonly string[] ExecutableExtensions = { &amp;quot;.exe&amp;quot;, &amp;quot;.dll&amp;quot; };

        public ActionTests()
            =&amp;gt; LoadAllAssemblies();

        void LoadAllAssemblies()
        {
            var assemblies =
                Directory.EnumerateFiles(
                    Path.GetDirectoryName(
                            Assembly.GetExecutingAssembly().Location) ?? string.Empty,
                            $&amp;quot;{RootNamespace}.*&amp;quot;)
                        .Where(IsExeOrDll)
                        .Select(Assembly.LoadFrom)
                        .Select(assembly =&amp;gt; 
                            TryCatchIgnore(
                                () =&amp;gt; AppDomain.CurrentDomain.Load(assembly.GetName())))
                        .ToList();

            Assert.False(assemblies.IsNullOrEmpty());        
        }

        [Fact]
        public void AllActionsOrParentControllerHaveAuthorizationAttributeTest()
        {
            var allControllers = GetAllControllerTypes();
            var unauthorizedControllers = 
                GetControllerTypesThatAreMissing&amp;lt;AuthorizeAttribute&amp;gt;(allControllers);
            
            Assert.True(allControllers.Count &amp;gt; unauthorizedControllers.Count);
            
            foreach (var controller in unauthorizedControllers)
            {
                var actions =
                    controller.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                              .Where(m =&amp;gt; m.GetCustomAttributes&amp;lt;HttpMethodAttribute&amp;gt;().Any())
                              .ToList();

                var unauthorizedActions = 
                    actions.Where(
                        action =&amp;gt; 
                            action.GetCustomAttribute&amp;lt;AuthorizeAttribute&amp;gt;() == null &amp;amp;&amp;amp;
                            action.GetCustomAttribute&amp;lt;AllowAnonymousAttribute&amp;gt;() == null)
                           .ToList();

                if (unauthorizedActions.IsNullOrEmpty() ||
                   (unauthorizedActions.Count == 1 &amp;amp;&amp;amp; 
                    unauthorizedActions[0].Name == WhiteListed))
                {
                    continue;
                }

                unauthorizedActions.ForEach(
                    action =&amp;gt; Console.WriteLine($&amp;quot;{action} is unauthorized!&amp;quot;));

                Assert.True(false, $&amp;quot;Unauthorized action(s) found!&amp;quot;);
            }
        }

        static List&amp;lt;Type&amp;gt; GetAllControllerTypes()
            =&amp;gt; AppDomain.CurrentDomain
                        .GetAssemblies()
                        .Where(a =&amp;gt; a.FullName.StartsWith(RootNamespace))
                        .SelectMany(a =&amp;gt; a.GetTypes()
                                          .Where(t =&amp;gt; t.FullName.Contains(Controller) ||
                                                      t.BaseType == ControllerType ||
                                                      t.DeclaringType == ControllerType))
                        .ToList();

        static List&amp;lt;Type&amp;gt; GetControllerTypesThatAreMissing&amp;lt;TAttribute&amp;gt;(
            IEnumerable&amp;lt;Type&amp;gt; types)
            where TAttribute : Attribute
            =&amp;gt; types.Where(t =&amp;gt; t.GetCustomAttribute&amp;lt;TAttribute&amp;gt;() == null)
                    .ToList();

        static bool IsExeOrDll(string path)
            =&amp;gt; ExecutableExtensions.Any(
                extension =&amp;gt; 
                    extension.Equals(
                        Path.GetExtension(path), 
                        StringComparison.OrdinalIgnoreCase));

        static T TryCatchIgnore&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; func) {
            try { return func(); }
            catch { return default; }
        }
    }

    public class UnauthorizedTestController 
        : Controller
    {
    }

    public class UnauthorizedActionInController 
        : Controller
    {
        [HttpGet]
        public int GetZero() =&amp;gt; 0;

        [Authorize, HttpPost]
        public IActionResult Post([FromBody] int number) =&amp;gt; Ok();

        [OverrideAge, HttpDelete]
        public IActionResult Delete() =&amp;gt; Ok();
    }
    
    public class OverrideAge : Authorize {  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This solution is not perfect, it has a lot of opportunity for improvement. I&amp;rsquo;m open to suggestions&amp;hellip; If you have an idea, drop it in the comments and feel free to share your source. Likewise, if you like this idea - let me know. I was hoping to eventually find a way to turn this into a &lt;strong&gt;C# Roslyn-Powered Analyzer&lt;/strong&gt; but I&amp;rsquo;m not sure that is possible. There is one fact that remains, this has actually proven itself useful - there have been several times where this test failed as a result of someone (myself included) forgot to apply the appropriate security attributes to an &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; endpoint we were writing. I hope that this can help you too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core Configuration Tips</title>
      <link>http://davidpine.net/blog/asp-net-core-configuration/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/asp-net-core-configuration/</guid>
      <description>

&lt;p&gt;Being a software developer, it&amp;rsquo;s in our nature to configure various aspects of the applications that we write. With &lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuring our applications is really straight forward. Luckily, there is a lot of really well written documentation surrounding this topic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?tabs=basicconfiguration&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-file-text&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; ASP.NET Core - Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-file-text&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; ASP.NET Core - Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, there is still room for improvement. I&amp;rsquo;ve prepared a few tips that can enhance developer productivity by taking advantage of various C# features.&lt;/p&gt;

&lt;h2 id=&#34;c-class-json:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;C# Class &amp;lt; &amp;ndash; &amp;gt; JSON&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuration via the &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;IOptionsSnapshot&amp;lt;T&amp;gt;&lt;/code&gt; have been around for a long time. Their usage is a first class citizen within &lt;strong&gt;ASP.NET Core&lt;/strong&gt; applications, and work to tie &lt;code&gt;appsettings.json&lt;/code&gt; values to corresponding configuration &lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_old_CLR_object&#34; target=&#34;_blank&#34;&gt;POCO&amp;rsquo;s&lt;/a&gt;. As a refresher on configuration, there is a one-to-one relationship between a JSON object in the &lt;code&gt;appsettings.json&lt;/code&gt; and the C# class that represents it.&lt;/p&gt;

&lt;h3 id=&#34;appsettings-json:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;&lt;code&gt;appsettings.json&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;notificationSettings&amp;quot;: {
        &amp;quot;notificationInterval&amp;quot;: &amp;quot;00:15:00&amp;quot;,
        &amp;quot;isMulticast&amp;quot;: true,
        &amp;quot;sources&amp;quot;: [
            {
                &amp;quot;url&amp;quot;: &amp;quot;http://www.contoso.com/notificationHub&amp;quot;,
                &amp;quot;key&amp;quot;: &amp;quot;f7ea5e2b22bf907344f3a780caa0a166&amp;quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notificationsettings-cs-and-notificationsource-cs:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;&lt;code&gt;NotificationSettings.cs&lt;/code&gt; and &lt;code&gt;NotificationSource.cs&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NotificationSettings
{
    public TimeSpan NotificationInterval { get;set; }
    public TimeSpan TimeoutInterval { get; set; }
    public bool IsImplicit { get; set; }
    public List&amp;lt;NotificationSource&amp;gt; Sources { get; set; }

    public NotificationSetting()
    {
        IsImplicit = true;
        TimeoutInterval = TimeSpan.FromSeconds(30);
    }
}

public class NotificationSource
{
    public Uri Url { get; set; }
    public string Key { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you looked at both the &lt;code&gt;appsettings.json&lt;/code&gt; and the two C# classes, I&amp;rsquo;m hoping that you noticed something. I hope that you noticed that the JSON settings didn&amp;rsquo;t fully provide a value for all the mapped properties in the &lt;code&gt;NotificationSettings&lt;/code&gt; object. We have however, set these values as part of the object&amp;rsquo;s &lt;code&gt;.ctor&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;cite&gt;&lt;strong&gt;ProTip&lt;/strong&gt;&lt;/cite&gt;
Use C# 6 Property Initializers to set default values. If the corresponding property exists in the JSON object mapping, it will be overwritten as to be expected; however, if omitted your default value is used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using property initializers, this is simplified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NotificationSettings
{
    public TimeSpan NotificationInterval { get;set; }
    public TimeSpan TimeoutInterval { get; set; } = TimeSpan.FromSeconds(30);
    public bool IsImplicit { get; set; } = true;
    public List&amp;lt;NotificationSource&amp;gt; Sources { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is a good practice to specify default values for your settings classes. As part of the &lt;code&gt;Startup.cs&lt;/code&gt; class, the &lt;code&gt;ConfigureServices&lt;/code&gt; method is where you will &amp;ldquo;Configure&amp;rdquo; your mappings of the JSON section that is associated to the C# object representing it. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(
    IServiceCollection services)
{
    // Configure the &amp;quot;NotificationSettings&amp;quot;
    // mapping it to the corresponding JSON section

    services.Configure&amp;lt;NotificationSettings&amp;gt;(
        Configuration.GetSection(&amp;quot;NotificationSettings&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should look very familiar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;cite&gt;&lt;strong&gt;ProTip&lt;/strong&gt;&lt;/cite&gt;
Use C# 6 &lt;code&gt;nameof&lt;/code&gt; operator to configure your C# class mapping. This alleviates the usage of magic strings and enforces a consistent naming convention.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The change is tiny, however; this is another great usage of the &lt;code&gt;nameof&lt;/code&gt; operator. This assumes that the the section in the JSON file matches the name of the class object representing it. Additionally, it serves as a reason to keep the names matching.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(
    IServiceCollection services)
{
    services.Configure&amp;lt;NotificationSettings&amp;gt;(
        Configuration.GetSection(nameof(NotificationSettings));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have provided a few simple tips for &lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuration leveraging a few C# 6 features. They are nothing earth-shattering, but they are practical and very useful. I often see developers &lt;em&gt;not&lt;/em&gt; taking advantage of simple features like these when they are available. These two features alone in an &lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuration could simplify refactoring and stream-line readability &amp;ndash; that&amp;rsquo;s enough reason for me, I hope it is for you too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overriding ASP.NET Core Framework-Provided Services</title>
      <link>http://davidpine.net/blog/overriding-default-di/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/overriding-default-di/</guid>
      <description>

&lt;h1 id=&#34;overview:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In &lt;strong&gt;.NET&lt;/strong&gt; it&amp;rsquo;s really easy to create your own interfaces and implementations. Likewise, it&amp;rsquo;s seemingly effortless to register them for dependency injection. But it is not always
obvious how to override existing implementations.  Let&amp;rsquo;s discuss various aspects of &amp;ldquo;dependency injection&amp;rdquo; and how you can override the &amp;ldquo;framework-provided services&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;As an example, let&amp;rsquo;s take a recent story on our product backlog for building a security audit of login attempts.  The story involved the capture of attempted usernames along
with their corresponding IP addresses.  This would allow system administrators to monitor for potential attackers. This would require our &lt;strong&gt;ASP.NET Core&lt;/strong&gt; application to have
custom logging implemented.&lt;/p&gt;

&lt;h2 id=&#34;logging:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Logging&lt;/h2&gt;

&lt;p&gt;Luckily &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ASP.NET Core Logging&lt;/code&gt;&lt;/a&gt; is simple to use and is a first-class
citizen within &lt;code&gt;ASP.NET Core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Logging&lt;/strong&gt; repository there is an extension method namely
&lt;a href=&#34;https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging/LoggingServiceCollectionExtensions.cs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;AddLogging&lt;/code&gt;&lt;/a&gt;, here is what it
looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IServiceCollection AddLogging(this IServiceCollection services)
{
    if (services == null)
    {
        throw new ArgumentNullException(nameof(services));
    }

    services.TryAdd(ServiceDescriptor.Singleton&amp;lt;ILoggerFactory, LoggerFactory&amp;gt;());
    services.TryAdd(ServiceDescriptor.Singleton(typeof(ILogger&amp;lt;&amp;gt;), typeof(Logger&amp;lt;&amp;gt;)));

    return services;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it is rather simple. It adds two &lt;code&gt;ServiceDescriptor&lt;/code&gt; instances to the &lt;code&gt;IServiceCollection&lt;/code&gt;, effectively registering the given service type to the
corresponding implementation type.&lt;/p&gt;

&lt;h4 id=&#34;following-the-rabbit-down-the-hole:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Following the rabbit down the hole&lt;/h4&gt;

&lt;p&gt;When you create a new &lt;code&gt;ASP.NET Core&lt;/code&gt; project from &lt;strong&gt;Visual Studio&lt;/strong&gt;, all the templates follow the same pattern. They have the &lt;code&gt;Program.cs&lt;/code&gt; file with a &lt;code&gt;Main&lt;/code&gt; method that looks
very similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseIISIntegration()
        .UseStartup&amp;lt;Startup&amp;gt;()
        .UseApplicationInsights()
        .Build();

    host.Run();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;templates-program-cs:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Templates &lt;code&gt;Program.cs&lt;/code&gt;&lt;/h6&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/EmptyWeb/Program.cs&#34; target=&#34;_blank&#34;&gt;Empty &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/StarterWeb/Program.cs&#34; target=&#34;_blank&#34;&gt;Starter Web &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/WebAPI/Program.cs&#34; target=&#34;_blank&#34;&gt;Web API &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One thing that is concerning about a template like this is that the &lt;code&gt;IWebHost&lt;/code&gt; is an &lt;code&gt;IDisposable&lt;/code&gt;, so why then is this statement not wrapped in a &lt;code&gt;using&lt;/code&gt;
&lt;a href=&#34;https://github.com/IEvangelist/Templates/commit/37e78bd0dc33069901cc51924fe8a2740d1e141c&#34; target=&#34;_blank&#34;&gt;you ask&lt;/a&gt;? The answer is that the &lt;code&gt;Run&lt;/code&gt; extension method
internally wraps itself in a &lt;code&gt;using&lt;/code&gt;. If you were wondering where the &lt;code&gt;AddLogging&lt;/code&gt; occurs, it is a result of invoking the &lt;code&gt;Build&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[ Microsoft.AspNetCore.Hosting.WebHostBuilder ] 
    public IWebHost Build() ...
        private IServiceCollection BuildCommonServices() ...
            creates services then invokes services.AddLogging()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-few-words-on-the-service-descriptor:d7c1ff5c185090641e598e96532d52e8&#34;&gt;A few words on the Service Descriptor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ServiceDescriptor&lt;/code&gt; class is an object that &lt;em&gt;describes&lt;/em&gt; a &lt;em&gt;service&lt;/em&gt;, and this is used by dependency injection. In other words, instances of the &lt;code&gt;ServiceDescriptor&lt;/code&gt; are
descriptions of services. The &lt;code&gt;ServiceDescriptor&lt;/code&gt; class exposes several static methods that allow its instantiation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ILoggerFactory&lt;/code&gt; interface is registered as a
&lt;a href=&#34;https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs#L14&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ServiceLifetime.Singleton&lt;/code&gt;&lt;/a&gt;
and its implementation is mapped to the &lt;code&gt;LoggerFactory&lt;/code&gt;. Likewise, the generic type &lt;code&gt;typeof(ILogger&amp;lt;&amp;gt;)&lt;/code&gt; is mapped to &lt;code&gt;typeof(Logger&amp;lt;&amp;gt;)&lt;/code&gt;. This is just one of the several key
&amp;ldquo;Framework-Provided Services&amp;rdquo; that are registered.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-together:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Putting it together&lt;/h2&gt;

&lt;p&gt;Now we know that the framework is providing all implementations of &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, and resolving them as their &lt;code&gt;Logger&amp;lt;T&amp;gt;&lt;/code&gt;. We also know that we could write our own implementation of
the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; interface. Being that this is open-source
&lt;a href=&#34;https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/LoggerOfT.cs&#34; target=&#34;_blank&#34;&gt;we can look to their implementation&lt;/a&gt; for inspiration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class RequestDetailLogger&amp;lt;T&amp;gt; : ILogger&amp;lt;T&amp;gt;
{
    private readonly ILogger _logger;

    public RequestDetailLogger(ILoggerFactory factory,
                               IRequestCategoryProvider requestCategoryProvider)
    {
        if (factory == null)
        {
            throw new ArgumentNullException(nameof(factory));
        }
        if (requestCategoryProvider == null)
        {
            throw new ArgumentNullException(nameof(requestCategoryProvider));
        }

        var category = requestDetailCategoryProvider.CreateCategory&amp;lt;T&amp;gt;();
        _logger = factory.CreateLogger(category);
    }

    IDisposable ILogger.BeginScope&amp;lt;TState&amp;gt;(TState state)
        =&amp;gt; _logger.BeginScope(state);

    bool ILogger.IsEnabled(LogLevel logLevel)
        =&amp;gt; _logger.IsEnabled(logLevel);

    void ILogger.Log&amp;lt;TState&amp;gt;(LogLevel logLevel, 
                             EventId eventId, 
                             TState state, 
                             Exception exception, 
                             Func&amp;lt;TState, Exception, string&amp;gt; formatter)
        =&amp;gt; _logger.Log(logLevel, eventId, state, exception, formatter);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;IRequestCategoryProvider&lt;/code&gt; is defined and implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using static Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelper;

public interface IRequestCategoryProvider
{
    string CreateCategory&amp;lt;T&amp;gt;();
}

public class RequestCategoryProvider : IRequestCategoryProvider
{
    private readonly IPrincipal _principal;
    private readonly IPAddress _ipAddress;

    public RequestCategoryProvider(IPrincipal principal,
                                   IPAddress ipAddress)
    {
        _principal = principal;
        _ipAddress = ipAddress;
    }

    public string CreateCategory&amp;lt;T&amp;gt;()
    {
        var typeDisplayName = GetTypeDisplayName(typeof(T));

        if (_principal == null || _ipAddress == null)
        {
            return typeDisplayName;
        }

        var username = _principal?.Identity?.Name;
        return $&amp;quot;User: {username}, IP: {_ipAddress} {typeDisplayName}&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re curious how to get the &lt;code&gt;IPrincipal&lt;/code&gt; and &lt;code&gt;IPAddress&lt;/code&gt; into this implementation (with DI) -
&lt;a href=&#34;http://davidpine.net/blog/principal-architecture-changes/&#34; target=&#34;_blank&#34;&gt;I discussed it here&lt;/a&gt; briefly. It is pretty straight-forward. In the &lt;code&gt;Startup.ConfigureServices&lt;/code&gt;
method do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // ... omitted for brevity

    services.AddTransient&amp;lt;IRequestCategoryProvider, RequestCategoryProvider&amp;gt;();
    services.AddTransient&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
    services.AddTransient&amp;lt;IPrincipal&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()
                           ?.HttpContext
                           ?.User);
    services.AddTransient&amp;lt;IPAddress&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()
                           ?.HttpContext
                           ?.Connection
                           ?.RemoteIpAddress);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can
&lt;a href=&#34;https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs&#34;
   target=&#34;_blank&#34;&gt;&lt;code&gt;Replace&lt;/code&gt;&lt;/a&gt; the implementations for the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; by using the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // ... omitted for brevity
    services.Replace(ServiceDescriptor.Transient(typeof(ILogger&amp;lt;&amp;gt;), 
                                                 typeof(RequestDetailLogger&amp;lt;&amp;gt;)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we replace the framework-provided service as a &lt;code&gt;ServiceLifetime.Transient&lt;/code&gt;. Opposed to the default &lt;code&gt;ServiceLifetime.Singleton&lt;/code&gt;. This is more or less an extra
precaution. We know that with each request we get the &lt;code&gt;HttpContext&lt;/code&gt; from the &lt;code&gt;IHttpContextAccessor&lt;/code&gt;, and from this we have the &lt;code&gt;User&lt;/code&gt;. This is what is passed to each
&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This approach is valid for overriding any of the various framework-provided service implementations. It is simply a matter of knowing the correct &lt;code&gt;ServiceLifetime&lt;/code&gt; for your
specific needs. Likewise, it is a good idea to leverage the open-source libraries of the framework for inspiration. With this you can take finite control of your web-stack.&lt;/p&gt;

&lt;h1 id=&#34;further-reading:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Further Reading&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection&#34; target=&#34;_blank&#34;&gt;
&lt;i class=&#34;fa fa-file-text-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;ASP.NET Core - Dependency Injection&lt;/code&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What happened to my Thread.CurrentPrincipal</title>
      <link>http://davidpine.net/blog/principal-architecture-changes/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/principal-architecture-changes/</guid>
      <description>

&lt;h1 id=&#34;overview:7e1a3c88d019532475826e491625ef2c&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Like the title claims, if you&amp;rsquo;re using &lt;code&gt;ASP.NET Core&lt;/code&gt; and expecting the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; or &lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; to be populated you&amp;rsquo;d be wrong. This is not the
&lt;code&gt;IPrincipal&lt;/code&gt; you&amp;rsquo;re looking for. In this post we&amp;rsquo;ll discuss what happened and what you need to do now. Additionally we&amp;rsquo;ll cover all the peripheral benefits as a result of this
change.&lt;/p&gt;

&lt;h2 id=&#34;history:7e1a3c88d019532475826e491625ef2c&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;If you have ever done any &lt;strong&gt;.NET Framework&lt;/strong&gt; development, you&amp;rsquo;ve probably seen the &lt;code&gt;Thread&lt;/code&gt; class. You&amp;rsquo;re probably familiar with the
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.threading.thread.currentprincipal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt;&lt;/a&gt; member. This member of the &lt;code&gt;Thread&lt;/code&gt; class
is defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IPrincipal CurrentPrincipal
{
    [System.Security.SecuritySafeCritical]  // auto-generated
    get
    {
        lock (CurrentThread)
        {
            var principal = (IPrincipal)CallContext.Principal;
            if (principal == null)
            {
                principal = GetDomain().GetThreadPrincipal();
                CallContext.Principal = principal;
            }
            return principal;
        }
    }

    [System.Security.SecuritySafeCritical]  // auto-generated
    [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.ControlPrincipal)]
    set
    {
        CallContext.Principal = value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Gets or sets the thread&amp;rsquo;s current principal (for role-based security).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does anyone see the issue with this? Can you say, &amp;ldquo;publically static mutable state, oh my&amp;rdquo;?! You should be alarmed. This property was never a good idea and today it
simply doesn&amp;rsquo;t belong. &lt;strong&gt;ASP.NET Core&lt;/strong&gt; is not responsible for assigning this. You might not agree with that decision, but it is final.&lt;/p&gt;

&lt;p&gt;Before diving into this, pop over to &lt;a href=&#34;https://github.com/aspnet/Security/issues/322&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
Microsoft.AspNetCore.Security &amp;ndash; Issue 332&lt;/a&gt; for more of the back story.&lt;/p&gt;

&lt;h2 id=&#34;thread-currentprincipal-today-in-asp-net-core:7e1a3c88d019532475826e491625ef2c&#34;&gt;Thread.CurrentPrincipal Today in ASP.NET Core&lt;/h2&gt;

&lt;p&gt;As part of the &lt;code&gt;ASP.NET Core&lt;/code&gt; framework, the following middleware packages are provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Identity&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;Microsoft.AspNetCore.Identity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Security&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;Microsoft.AspNetCore.Security&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you opt-in to using this middleware and you provide a login page (or expose an external provider) you&amp;rsquo;d end up creating an instance of a &lt;code&gt;ClaimsPrincipal&lt;/code&gt; that represents
an authenticated user. Subsequent requests to the web server would be handed the cookie that holds the user&amp;rsquo;s claims. However the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; would &lt;strong&gt;not&lt;/strong&gt;
actually reflect the &lt;code&gt;ClaimsPrincipal&lt;/code&gt; object that was created as the result of the login. In fact,
it would simply be an instance of the &lt;code&gt;GenericPrincipal&lt;/code&gt; implementation. Likewise, walking up to the &lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; property and asking it for the current claims
principal in context wouldn&amp;rsquo;t give you what you might expect either. Additionally, the
&lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; internally relies on the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; for its value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static ClaimsPrincipal Current
{
    get
    {
         return ClaimsPrincipal.s_principalSelector() ??
                ClaimsPrincipal.SelectClaimsPrincipal();
    }
}

private static ClaimsPrincipal SelectClaimsPrincipal()
{
    return Thread.CurrentPrincipal as ClaimsPrincipal ?? 
           new ClaimsPrincipal(Thread.CurrentPrincipal);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might be asking yourself, &amp;ldquo;how do I access this value then?&amp;rdquo;. If you&amp;rsquo;re in the context of a controller then you already have access to it via the
&lt;code&gt;.User&lt;/code&gt; property. Otherwise, the answer is &amp;ldquo;dependency injection&amp;rdquo;. Wherever you&amp;rsquo;re in need of the identity for accessing claims, use &lt;code&gt;.cstor&lt;/code&gt; injection
and give yourself the &lt;code&gt;IPrincipal&lt;/code&gt; you need. If you&amp;rsquo;re in the context of an action you might be tempted to use the &lt;code&gt;[FromServices]&lt;/code&gt; attribute to inject
the &lt;code&gt;IPrincipal&lt;/code&gt; instance, but remember that this actually comes from the current user - which is
already accessible via the controller&amp;rsquo;s &lt;code&gt;.User&lt;/code&gt; property.&lt;/p&gt;

&lt;h2 id=&#34;dependency-injection:7e1a3c88d019532475826e491625ef2c&#34;&gt;Dependency Injection&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; made dependency injection (DI) a first class citizen, and it is so easy to use. The &lt;code&gt;Startup.cs&lt;/code&gt; by convention has a &lt;code&gt;ConfigureServices&lt;/code&gt; method where you&amp;rsquo;ll
register the dependencies. In the case of &lt;code&gt;ASP.NET Core&lt;/code&gt; you&amp;rsquo;ll need to do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// This method gets called by the runtime. Use this method to add services to the container.
public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
    services.AddTransient&amp;lt;IPrincipal&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;().HttpContext.User);

    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might have noticed that we explicitly register the &lt;code&gt;IHttpContextAccessor&lt;/code&gt; and corresponding implementation. This is necessary as that service is not registered for
us. With that in place we can now specify that any class asking for an &lt;code&gt;IPrincipal&lt;/code&gt; will be given the &lt;code&gt;IHttpContextAccessor.HttpContext.User&lt;/code&gt; as the implementation.
This is exactly what we needed. The exact same pattern is true for class libraries that want to leverage identity-based claim values from the &lt;code&gt;ClaimsPrincipal&lt;/code&gt;
implementation of the &lt;code&gt;IPrincipal&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example:7e1a3c88d019532475826e491625ef2c&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Security.Claims;
using System.Security.Principal;

public class SampleService : ISampleService
{
    private readonly ClaimsPrincipal _principal;

    public SampleService(IPrincipal principal)
    {
        _principal = principal as ClaimsPrincipal;
    }

    public Task ConsumeAsync()
    {
        var dobClaim = _principal?.FindFirst(ClaimTypes.DateOfBirth);
        // Take some action ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the example above we can see how simple it is to use dependency injection. Simply define the &lt;code&gt;IPrincipal&lt;/code&gt; as a &lt;code&gt;.cstor&lt;/code&gt; parameter, store it in a field and consume it as needed.&lt;/p&gt;

&lt;h3 id=&#34;but-why:7e1a3c88d019532475826e491625ef2c&#34;&gt;But Why?&lt;/h3&gt;

&lt;p&gt;There are a lot of people who feel as though DI is overrated and that it is much easier to ask the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; for its value. While that is easy, it is also
risky&amp;hellip;think about it. Since it is mutable anyone (even 3rd party libraries) can set it. Additionally, you avoid concerns about trying to synchronize static state between
the &lt;code&gt;Thread&lt;/code&gt; and &lt;code&gt;ClaimsPrincipal&lt;/code&gt; classes. Scott Hanselman blogged about a
&lt;a href=&#34;http://www.hanselman.com/blog/SystemThreadingThreadCurrentPrincipalVsSystemWebHttpContextCurrentUserOrWhyFormsAuthenticationCanBeSubtle.aspx&#34; target=&#34;_blank&#34;&gt;similar issue&lt;/a&gt;
nearly thirteen years ago!&lt;/p&gt;

&lt;p&gt;One of the first benefits that comes to mind from this is the fact that with DI the code is unit-testable. It is extremely easy to mock out an &lt;code&gt;IPrincipal&lt;/code&gt; to use for unit
testing. Additionally, this alleviates all of the concerns about synchronization and reliability. The &lt;code&gt;IPrincipal&lt;/code&gt; you&amp;rsquo;re given is the principal you&amp;rsquo;d expect and it is fully
populated accordingly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core Response Optimization</title>
      <link>http://davidpine.net/blog/asp-net-core-optimization/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/asp-net-core-optimization/</guid>
      <description>

&lt;h2 id=&#34;intro:f7ba068c12f661d5bfa879f663970183&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re a web developer, chances are you&amp;rsquo;re familiar with optimization strategies such as static file caching and response compression. I recently implemented these two concepts in
tandem on an &lt;strong&gt;ASP.NET Core&lt;/strong&gt; application that I have been developing&amp;hellip; I&amp;rsquo;m going to share what I have learned.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t had a chance to use &lt;a href=&#34;https://www.asp.net/core&#34;&gt;&lt;code&gt;ASP.NET Core&lt;/code&gt;&lt;/a&gt; yet, you&amp;rsquo;re missing out! As my friend &lt;a href=&#34;https://scottaddie.com/&#34;&gt;Scott Addie&lt;/a&gt; likes to say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; is a cafeteria plan in which developers choose application dependencies &lt;em&gt;à la carte&lt;/em&gt;. This is in stark contrast to &lt;strong&gt;ASP.NET&lt;/strong&gt; proper, where developers
are provided a set meal (a bloated dependency chain) containing undesired items. Don&amp;rsquo;t like broccoli with your steak? Maybe it&amp;rsquo;s time to consider &lt;strong&gt;ASP.NET Core&lt;/strong&gt;.
&lt;cite&gt;Scott Addie&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, all dependencies are pluggable middleware. This provides ultimate control as you have to explicitly &lt;em&gt;opt-in&lt;/em&gt; for the middleware you desire.&lt;/p&gt;

&lt;h3 id=&#34;know-thy-middleware:f7ba068c12f661d5bfa879f663970183&#34;&gt;Know thy Middleware&lt;/h3&gt;

&lt;p&gt;Not all middleware is equal. Different middleware serves different purposes (obviously). Try to think of each middleware as its own standalone feature-set. Not all middleware is
given a chance to execute on a given request. Certain middleware might send a web response and early exit. This can prevent other middleware in the pipeline from executing at all. In
fact, this is the case when using static file caching and response compression together.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt;The &lt;em&gt;order&lt;/em&gt; in which middleware is added matters and dictates the order of execution during a request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;installing-dependencies:f7ba068c12f661d5bfa879f663970183&#34;&gt;Installing Dependencies&lt;/h4&gt;

&lt;p&gt;I wrote a tiny application and put it up on GitHub, check it out &lt;a href=&#34;https://github.com/IEvangelist/IEvangelist.AspNetCore.Optimization&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; if you want
to follow along. Now let&amp;rsquo;s install the dependencies we&amp;rsquo;ll need. For static file caching and response compression we need to add two &lt;code&gt;dependencies&lt;/code&gt; to the project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; &lt;code&gt;Microsoft.AspNetCore.StaticFiles&lt;/code&gt; will already have been installed if you started from a &lt;strong&gt;Visual Studio&lt;/strong&gt; template.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Repository&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nuget Package&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Add / Use Extension Method(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/StaticFiles&#34; target=&#34;_blank&#34; title=&#34;Static File Caching, GitHub Repo&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;1.1.0&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.StaticFiles/&#34; target=&#34;_blank&#34;&gt;Static Files&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/StaticFiles/blob/dev/src/Microsoft.AspNetCore.StaticFiles/StaticFileExtensions.cs#L56-L68&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.UseStaticFiles&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/BasicMiddleware&#34; target=&#34;_blank&#34; title=&#34;Response Compression, GitHub Repo&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;1.0.0&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.ResponseCompression/&#34; target=&#34;_blank&#34;&gt;Response Compression&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/BasicMiddleware/blob/dev/src/Microsoft.AspNetCore.ResponseCompression/ResponseCompressionServicesExtensions.cs#L38-L53&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.AddResponseCompression&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aspnet/BasicMiddleware/blob/dev/src/Microsoft.AspNetCore.ResponseCompression/ResponseCompressionBuilderExtensions.cs#L20-L29&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.UseResponseCompression&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Follow these instructions, from within &lt;strong&gt;Visual Studio&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Tools ➪
    NuGet Package Manager ➪
        Manage NuGet Packages for Solution... ➪ 
            Browse ➪
                Search ➪
                    [ Install ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configuring-startup:f7ba068c12f661d5bfa879f663970183&#34;&gt;Configuring Startup&lt;/h3&gt;

&lt;p&gt;There are two common nomenclatures that exist for wiring up middleware in your startup classes, the &lt;code&gt;.Add*&lt;/code&gt; and &lt;code&gt;.Use*&lt;/code&gt; extension methods. The &lt;code&gt;.Add*&lt;/code&gt; calls are intended to add
services to the &lt;code&gt;IServiceCollection&lt;/code&gt; instance, ensuring that they are ready for &lt;em&gt;usage&lt;/em&gt;. The &lt;code&gt;.Use*&lt;/code&gt; calls specify that you want to use the middleware and makes the assumption
that any services required by &lt;strong&gt;DI&lt;/strong&gt; will have already been &lt;em&gt;added&lt;/em&gt; with the corresponding &lt;code&gt;.Add*&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s &amp;ldquo;add&amp;rdquo; response compression in the &lt;code&gt;.ConfigureServices&lt;/code&gt; call of our &lt;code&gt;Startup.cs&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{    
    services.AddMvc();
    services.AddResponseCompression(
        options =&amp;gt; 
            options.MimeTypes = ResponseCompressionMimeTypes.Defaults);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several bits of the implementation details should jump out at you. First, we do not need to call an &lt;code&gt;.AddStaticFiles&lt;/code&gt; extension method because there are no services required
for this middleware, as such it doesn&amp;rsquo;t exist. Second, we are providing a lambda expression to satisfy the &lt;code&gt;Action&amp;lt;ResponseCompressionOptions&amp;gt;&lt;/code&gt; parameter. We also assign the
&lt;code&gt;.MimeTypes&lt;/code&gt; property from the &lt;code&gt;ResponseCompressionMimeTypes.Defaults&lt;/code&gt; we are targeting for compression.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; If no compression providers are specified then &lt;code&gt;GZip&lt;/code&gt; is used by default.
&lt;cite&gt;&lt;a href=&#34;https://github.com/aspnet/BasicMiddleware/blob/dev/src/Microsoft.AspNetCore.ResponseCompression/ResponseCompressionProvider.cs#L22&#34; target=&#34;_blank&#34;&gt;ASP.NET Core Team - GitHub&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;ResponseCompressionMimeTypes.cs&lt;/code&gt; is defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Collections.Generic;
using System.Linq;
using static Microsoft.AspNetCore.ResponseCompression.ResponseCompressionDefaults;

namespace IEvangelist.AspNetCore.Optimization
{
    public static class ResponseCompressionMimeTypes
    {
        public static IEnumerable&amp;lt;string&amp;gt; Defaults
            =&amp;gt; MimeTypes.Concat(new[]
                                {
                                    &amp;quot;image/svg+xml&amp;quot;,
                                    &amp;quot;application/font-woff2&amp;quot;
                                });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are several types defined by default in &lt;strong&gt;ASP.NET Core&lt;/strong&gt; class &lt;code&gt;ResponseCompressionDefaults.MimeTypes&lt;/code&gt;, we are simply expanding that to include &amp;ldquo;SVG&amp;rdquo; images and the &amp;ldquo;Woff2&amp;rdquo; fonts.&lt;/p&gt;

&lt;h3 id=&#34;order-exemplified:f7ba068c12f661d5bfa879f663970183&#34;&gt;Order Exemplified&lt;/h3&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Configure(IApplicationBuilder app,
                      IHostingEnvironment env,
                      ILoggerFactory loggerFactory)
{
    app.UseStaticFiles()          // Adds the static middleware to the request pipeline
       .UseResponseCompression(); // Adds the response compression to the request pipeline
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The snippet above will absolutely work for serving static files, but it will not compress or cache anything. Note the differences below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Configure(IApplicationBuilder app,
                      IHostingEnvironment env,
                      ILoggerFactory loggerFactory)
{
    app.UseResponseCompression()  // Adds the response compression to the request pipeline
       .UseStaticFiles();         // Adds the static middleware to the request pipeline       
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;order&lt;/em&gt; in which the middleware was invoked in the pipeline changed, as such the order in which the middleware is executed on a request is also changed.
When static file middleware occurs before response compression, it returns the file as a response before compression has a chance to execute.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client requests &lt;code&gt;main.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Static file middleware determines it can fully satisfy said request&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;main.css&lt;/code&gt; file is &lt;a href=&#34;https://github.com/aspnet/StaticFiles/blob/dev/src/Microsoft.AspNetCore.StaticFiles/StaticFileMiddleware.cs#L109&#34; target=&#34;_blank&#34;&gt;sent&lt;/a&gt; and the &lt;a href=&#34;https://github.com/aspnet/StaticFiles/blob/dev/src/Microsoft.AspNetCore.StaticFiles/StaticFileMiddleware.cs#L126&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;next&amp;rdquo;&lt;/a&gt; middleware in the pipeline is never exectued&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have these two pieces of middleware wired into out pipeline in the correct order, what else is left. There is one important thing that we forgot to do.
While we do have static file middleware, we didn&amp;rsquo;t know that &amp;ldquo;caching&amp;rdquo; is off by default. So we&amp;rsquo;ll need to handle this with an instance of the the &lt;code&gt;StaticFileOptions&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt;Keep your &lt;i class=&#34;fa fa-eye&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fa fa-eye&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;rsquo;s open for extension method overloads. These are often clues that there are &lt;em&gt;options&lt;/em&gt; for providing customized configuration for the middleware you&amp;rsquo;re wiring up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Configure(IApplicationBuilder app,
                      IHostingEnvironment env,
                      ILoggerFactory loggerFactory)
{
    app.UseResponseCompression()
       .UseStaticFiles(
           new StaticFileOptions
           {
               OnPrepareResponse =
                   _ =&amp;gt; _.Context.Response.Headers[HeaderNames.CacheControl] = 
                        &amp;quot;public,max-age=604800&amp;quot; // A week in seconds
           })
       .UseMvc(routes =&amp;gt; routes.MapRoute(&amp;quot;default&amp;quot;, &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The instance of the &lt;code&gt;StaticFileOptions&lt;/code&gt; object has a public property namely &amp;ldquo;OnPrepareResponse&amp;rdquo; of type &lt;code&gt;Action&amp;lt;StaticFileResponseContext&amp;gt;&lt;/code&gt;. So we can again specify a lambda
expression. This expression can be used to delegate the preperation of the response. Notice we&amp;rsquo;re simply setting the &lt;code&gt;Cache-Control&lt;/code&gt; header to a &amp;ldquo;max-age&amp;rdquo; of a week. That was
pretty simple, hey?!&lt;/p&gt;

&lt;h3 id=&#34;compression-awareness:f7ba068c12f661d5bfa879f663970183&#34;&gt;Compression Awareness&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s all the little things! The response compression middleware boasts deterministic compression, i.e.; if the
&lt;a href=&#34;https://github.com/aspnet/KestrelHttpServer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;KestrelHttpServer&lt;/code&gt;&lt;/a&gt; is running behind the
&lt;a href=&#34;https://www.iis.net/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;IIS&lt;/strong&gt;&lt;/a&gt; reverse proxy then the middleware may or may not compress the response. The middleware determines the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the request accepts compression&lt;/li&gt;
&lt;li&gt;If the requested resource matches the configured MIME types&lt;/li&gt;
&lt;li&gt;Whether or not the response needs to be compressed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;results:f7ba068c12f661d5bfa879f663970183&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s spend some time examining the results of our response optimization efforts.&lt;/p&gt;

&lt;h4 id=&#34;before:f7ba068c12f661d5bfa879f663970183&#34;&gt;Before&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/before.png&#34; alt=&#34;Before&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;total-s:f7ba068c12f661d5bfa879f663970183&#34;&gt;Total(s)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;13 Requests | 549 KB transfered | ... | ... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;banner1.svg Response Headers&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;HTTP/1.1 200 OK
Content-Length: 9679
Content-Type: image/svg+xml
Accept-Ranges: bytes
ETag: &amp;quot;1d1ce31e3bd09cf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;after:f7ba068c12f661d5bfa879f663970183&#34;&gt;After&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/after.png&#34; alt=&#34;After&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;total-s-1:f7ba068c12f661d5bfa879f663970183&#34;&gt;Total(s)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;13 Requests | 175 KB transfered | ... | ... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The total payload for all 13 requests is a total of 3.137 times smaller (a meager 31.9% of the original size). The larger the application, the more dramatic and valuable
this becomes! Consider an &lt;strong&gt;Angular2&lt;/strong&gt; application (or other SPA framwork based application), which has tons of &lt;strong&gt;JavaScript&lt;/strong&gt; files to download &amp;ndash; 5 MB turns into ~1.5 MB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;banner1.svg Response Headers&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;HTTP/1.1 200 OK
Content-Type: image/svg+xml
Server: Kestrel
Cache-Control: public,max-age=604800
Transfer-Encoding: chunked
Content-Encoding: gzip
Accept-Ranges: bytes
ETag: &amp;quot;1d1ce31e3bd09cf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;subsequent-cached-requests:f7ba068c12f661d5bfa879f663970183&#34;&gt;Subsequent (Cached) Requests&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/12/cached.png&#34; alt=&#34;Cached&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-summarize:f7ba068c12f661d5bfa879f663970183&#34;&gt;Let&amp;rsquo;s Summarize&lt;/h3&gt;

&lt;p&gt;We learned some of the basics about &lt;strong&gt;ASP.NET Core&lt;/strong&gt; middleware. Together we implemented a response optimization strategy that included deterministic response compression, as well
as static file caching. We learned some of the common patterns and naming conventions for integrating with &lt;strong&gt;ASP.NET Core&lt;/strong&gt; middleware. Finally, we have a good understanding of
the &lt;strong&gt;ASP.NET Core&lt;/strong&gt; request pipeline middleware precedence.&lt;/p&gt;

&lt;h3 id=&#34;source-code:f7ba068c12f661d5bfa879f663970183&#34;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IEvangelist/IEvangelist.AspNetCore.Optimization&#34; target=&#34;_blank&#34;&gt;
   &lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; IEvangelist.AspNetCore.Optimization
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The power of the global.json</title>
      <link>http://davidpine.net/blog/the-global-json/</link>
      <pubDate>Mon, 18 Jul 2016 22:40:31 -0500</pubDate>
      
      <guid>http://davidpine.net/blog/the-global-json/</guid>
      <description>

&lt;h1 id=&#34;introduction:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;As I&amp;rsquo;m sure you&amp;rsquo;re all aware by now, &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/&#34;&gt;Monday June 27&lt;sup&gt;th&lt;/sup&gt;&lt;/a&gt; was a
special day for those of you who were anticipating the release of  &lt;code&gt;.NET Core&lt;/code&gt; and &lt;code&gt;ASP.NET Core&lt;/code&gt;. While the &amp;ldquo;core&amp;rdquo; frameworks and runtimes are RTM, the
tooling is actually still in preview. In fact, we&amp;rsquo;re currently on &lt;em&gt;Tools Preview 2&lt;/em&gt;. I wanted to focus this post entirely on one specific enhancement
to &lt;strong&gt;Visual Studio&lt;/strong&gt; solutions, enter the &lt;code&gt;global.json&lt;/code&gt;.
&lt;hr/&gt;
Let me paint a picture for you&amp;hellip;you&amp;rsquo;re developing an application. This application doesn&amp;rsquo;t have all the source code in the world, so you take on some dependencies.
Since we&amp;rsquo;re not living in caves, we have packages &amp;ndash; this is common nomenclature for and the norm for any modern software development project.
One of the aforementioned dependencies is a package that you just so happen to also work on and develop for. Imagine that you find a bug or want to make
an improvement to said package, what does that work-flow look like?&lt;/p&gt;

&lt;p&gt;For me, this typically involved the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open dependency project in a new instance of &lt;strong&gt;Visual Studio&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Make code change&lt;/li&gt;
&lt;li&gt;Code review&lt;/li&gt;
&lt;li&gt;Commit code&lt;/li&gt;
&lt;li&gt;Build server builds code&lt;/li&gt;
&lt;li&gt;Build goes &amp;ldquo;green&amp;rdquo; (tests passed)&lt;/li&gt;
&lt;li&gt;Build server publishes package&lt;/li&gt;
&lt;li&gt;Wander the halls playing Pokémon Go&lt;/li&gt;
&lt;li&gt;Return to original project, update package reference&lt;/li&gt;
&lt;li&gt;Continue with life&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What if I told you, that headache is all but gone and you will never have to go through those agonizing steps again! Say it ain&amp;rsquo;t so
(queue &lt;a href=&#34;https://youtu.be/ENXvZ9YRjbo&#34; target=&#34;_blank&#34;&gt;Weezer&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;global-json:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;Global.json&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;global.json&lt;/code&gt; file sits out at the solution directory-level and literally has one of the simplest &lt;code&gt;JSON&lt;/code&gt; schemas you will ever see. The default templates
generate the following (for the &lt;a href=&#34;http://json.schemastore.org/global&#34;&gt;full schema&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;projects&amp;quot;: [ &amp;quot;src&amp;quot;, &amp;quot;test&amp;quot; ],
  &amp;quot;sdk&amp;quot;: {
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0-preview2-003121&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I always immediately delete the &lt;code&gt;sdk&lt;/code&gt; property. If omitted the tooling simply assumes the latest &lt;strong&gt;SDK&lt;/strong&gt; installed. Now, for all the fun! The &lt;code&gt;projects&lt;/code&gt;
property is an array of strings. It&amp;rsquo;s defined as the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; A list of project folders relative to this file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These folders are search locations for resolving dependencies, where projects take precedence over packages.&lt;/p&gt;

&lt;h3 id=&#34;projects-over-packages:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;Projects over Packages&lt;/h3&gt;

&lt;p&gt;Assume you&amp;rsquo;re developing in a project, namely &lt;code&gt;IEvangelist.NetCore.App&lt;/code&gt; and it takes a dependency on &lt;code&gt;IEvangelist.NetCore.ClassLib&lt;/code&gt; and &lt;code&gt;IEvangelist.NetCore.Services&lt;/code&gt;. These
dependencies are packages (outside the solution) and you can use the &lt;code&gt;global.json/projects&lt;/code&gt; array to your advantage. Using our imaginations, let us find a need
to source-step into &lt;code&gt;IEvangelist.NetCore.ClassLib&lt;/code&gt;. Let us also imagine that this project is in a neighboring folder outside our solution, perhaps the same repo,
we can now use a relative path like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;projects&amp;quot;: [ 
    &amp;quot;src&amp;quot;, 
    &amp;quot;../../IEvangelist.NetCore.ClassLib/src&amp;quot;, // &amp;lt;-- Relative path to packaged source
    &amp;quot;../../IEvangelist.NetCore.Services/src&amp;quot;    
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;before:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;Before&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/07/before.jpg&#34; alt=&#34;Before global.json changes&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;after:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;After&lt;/h4&gt;

&lt;p&gt;After saving these changes to the &lt;code&gt;global.json&lt;/code&gt; you&amp;rsquo;ll notice &lt;strong&gt;Visual Studio&lt;/strong&gt; pull this project into solution, but outside of the &lt;code&gt;src&lt;/code&gt; folder. Now when
you debug you can actually step into the source and treat it like any other source code you have. Project dependencies are resolved by way of their &lt;code&gt;project.json&lt;/code&gt; being discovered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/07/after.jpg&#34; alt=&#34;After global.json changes&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;open-source-for-everyone:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;Open Source for Everyone&lt;/h3&gt;

&lt;p&gt;One of the biggest advantages in my opinion is the ability to pull down source from &lt;code&gt;github&lt;/code&gt; that I rely on and source-step into it. For example, I have been developing with &lt;code&gt;ASP.NET
Core&lt;/code&gt; since &lt;strong&gt;RC1&lt;/strong&gt;, nearly eight months!! With the power of the &lt;code&gt;global.json&lt;/code&gt; I can pull down source that I&amp;rsquo;m relying on in a package and fulfill my understanding of it
as it executes. Simply amazing!&lt;/p&gt;

&lt;h2 id=&#34;further-reading:919389ea8ea658b3eb14ef94d6f5803e&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;For more details, these are some additional links and points of reference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/core/tools/global-json&#34;&gt;&lt;strong&gt;Global.json Reference&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/34794054/2410379&#34;&gt;&lt;strong&gt;Explanation of projects section in Global.json&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core RC2 (Migration Guide)</title>
      <link>http://davidpine.net/blog/migrating-to-rc2/</link>
      <pubDate>Fri, 20 May 2016 22:40:31 -0500</pubDate>
      
      <guid>http://davidpine.net/blog/migrating-to-rc2/</guid>
      <description>

&lt;h1 id=&#34;introduction:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;On Monday, May 16&lt;sup&gt;th&lt;/sup&gt; 2016 there was an amazing announcement from the &lt;strong&gt;.NET Blog&lt;/strong&gt; team!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/05/16/announcing-net-core-rc2/&#34;&gt;Announcing .NET Core RC2 and .NET Core SDK Preview 1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post will serve as a guide that walks you through the steps as I experienced them from migrating existing &lt;code&gt;ASP.NET Core RC1&lt;/code&gt; applications to &lt;code&gt;ASP.NET Core RC2&lt;/code&gt;.
It is worth mentioning that I&amp;rsquo;m am targeting the &lt;code&gt;.NET 4.6&lt;/code&gt; framework. So, I &lt;em&gt;do not&lt;/em&gt; cover the &lt;code&gt;.netcoreapp&lt;/code&gt; or &lt;code&gt;netstandard&lt;/code&gt; TFMs (target framework monikers).&lt;/p&gt;

&lt;h2 id=&#34;tooling:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;RC2&lt;/strong&gt; release brings the &lt;code&gt;.NET Core CLI&lt;/code&gt; to the forefront, and with that all the other command line tooling that
you&amp;rsquo;ve grown accustomed to should be stricken from your environment, i.e.; &lt;code&gt;DNX&lt;/code&gt;, &lt;code&gt;DNU&lt;/code&gt;, and &lt;code&gt;DNVM&lt;/code&gt;. Let&amp;rsquo;s start with the
removal of all these utilities.&lt;/p&gt;

&lt;h3 id=&#34;removing-dnvm:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Removing DNVM&lt;/h3&gt;

&lt;p&gt;Believe it or not, you might have a dated version of the &lt;strong&gt;DNVM CLI&lt;/strong&gt; and in order to invoke the &lt;code&gt;uninstall&lt;/code&gt; you might have to first
perform an &lt;code&gt;update-self&lt;/code&gt; command. Doing so will ensure that you have the latest version, which will contain the &lt;code&gt;uninstall&lt;/code&gt; command.
From a &lt;code&gt;cmd&lt;/code&gt; window &lt;em&gt;running as admininistrator&lt;/em&gt;, execute the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm update-self
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then execute the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm uninstall
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;verification:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Verification&lt;/h4&gt;

&lt;p&gt;From a new &lt;code&gt;cmd&lt;/code&gt; window, the &lt;code&gt;dnvm&lt;/code&gt; command should result in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;λ dnvm
&#39;dnvm&#39; is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-dnx-dnu:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Removing DNX &amp;amp; DNU&lt;/h3&gt;

&lt;p&gt;From a &lt;code&gt;cmd&lt;/code&gt; line window, execute &lt;code&gt;dnx&lt;/code&gt; - you should see something similar to this as output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;λ dnx
Microsoft .NET Execution environment Clr-x86-1.0.0-rc1-16231

Usage: dnx [options]

Options:
  --project|-p &amp;lt;PATH&amp;gt;              Path to the project.json file or the application folder. Defaults to the current folder if not provided.
  --appbase &amp;lt;PATH&amp;gt;                 Application base directory path
  --lib &amp;lt;LIB_PATHS&amp;gt;                Paths used for library look-up
  --debug                          Waits for the debugger to attach before beginning execution.
  --bootstrapper-debug             Waits for the debugger to attach before bootstrapping runtime.
  --framework &amp;lt;FRAMEWORK_ID&amp;gt;       Set the framework version to use when running (i.e. dnx451, dnx452, dnx46, ...)
  -?|-h|--help                     Show help information
  --version                        Show version information
  --watch                          Watch file changes
  --packages &amp;lt;PACKAGE_DIR&amp;gt;         Directory containing packages
  --configuration &amp;lt;CONFIGURATION&amp;gt;  The configuration to run under
  --port &amp;lt;PORT&amp;gt;                    The port to the compilation server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise enter &lt;code&gt;dnu&lt;/code&gt; in the same &lt;code&gt;cmd&lt;/code&gt; window, expecting the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;λ dnu
Microsoft .NET Development Utility Clr-x86-1.0.0-rc1-16231

Usage: dnu [options] [command]

Options:
  -v|--verbose  Show verbose output
  -?|-h|--help  Show help information
  --version     Show version information

Commands:
  build             Produce assemblies for the project in given directory
  clear-http-cache  Clears the package cache.
  commands          Commands related to managing application commands (install, uninstall)
  feeds             Commands related to managing package feeds currently in use
  install           Install the given dependency
  list              Print the dependencies of a given project
  pack              Build NuGet packages for the project in given directory
  packages          Commands related to managing local and remote packages folders
  publish           Publish application for deployment
  restore           Restore packages
  wrap              Wrap a csproj/assembly into a project.json, which can be referenced by project.json files

Use &amp;quot;dnu [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;DNX&lt;/code&gt; and &lt;code&gt;DNU&lt;/code&gt; command line tools are simply &lt;code&gt;exe&#39;s&lt;/code&gt; in your &lt;code&gt;%USERPROFILE%\.dnx&lt;/code&gt; and &lt;code&gt;%USERPROFILE%\.dnx\bin&lt;/code&gt; directories. Navigate to your &lt;code&gt;%USERPROFILE%&lt;/code&gt;
directory from windows explorer and delete the &lt;code&gt;.dnx&lt;/code&gt; directory entirely. Once you have successfully deleted this directory you
should be able to execute the &lt;code&gt;dnx&lt;/code&gt; and &lt;code&gt;dnu&lt;/code&gt; commands again from a &lt;code&gt;cmd&lt;/code&gt; window and the system should complain that they are not
recognized.&lt;/p&gt;

&lt;h4 id=&#34;verification-1:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Verification&lt;/h4&gt;

&lt;p&gt;From a new &lt;code&gt;cmd&lt;/code&gt; window, the &lt;code&gt;dnx&lt;/code&gt; and &lt;code&gt;dnu&lt;/code&gt; commands should result in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;λ dnx
&#39;dnx&#39; is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;λ dnu
&#39;dnu&#39; is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environment-variables:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Environment Variables&lt;/h3&gt;

&lt;p&gt;Unfortunately, the &lt;code&gt;PATH&lt;/code&gt; environment variable is not cleaned up and this needs to be done manually.&lt;/p&gt;

&lt;p&gt;Press the &lt;kbd&gt;Windows&lt;/kbd&gt; key, then begin typing &amp;ldquo;environment&amp;rdquo;, then select either of the two top options returned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/win-search.png&#34; alt=&#34;Windows Search&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You are then presented the &amp;ldquo;system properties&amp;rdquo; dialog, select &lt;strong&gt;Environment Variables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/sys-props.png&#34; alt=&#34;System Properties&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We will need to ensure that both &lt;code&gt;PATH&lt;/code&gt; variables are cleaned up, including your &lt;code&gt;%USERPROFILE%&lt;/code&gt; and the &lt;code&gt;System&lt;/code&gt; variables. Let&amp;rsquo;s &lt;kbd&gt;Edit&lt;/kbd&gt; both of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/env-vars.png&#34; alt=&#34;Environment Variables&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From the &lt;strong&gt;Edit Variables&lt;/strong&gt; dialog, remove any and all of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\[ your global identifier ]\.dnx\bin;
C:\Users\[ your global identifier ]\.dnx\runtimes\dnx-clr-win-x86.1.0.0-rc1-update1\bin;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2016/05/edit-vars.png&#34; alt=&#34;Edit User Variables&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;net-core-cli:0349d6d87cad08484fba4056f258e4f0&#34;&gt;.NET Core CLI&lt;/h3&gt;

&lt;p&gt;Simply follow &lt;a href=&#34;https://www.microsoft.com/net/core#windows&#34;&gt;these instuctions&lt;/a&gt;. Once you&amp;rsquo;re able to &amp;ldquo;Run the app&amp;rdquo; from the new &lt;strong&gt;CLI&lt;/strong&gt; you&amp;rsquo;re good to go.&lt;/p&gt;

&lt;h4 id=&#34;review:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Review&lt;/h4&gt;

&lt;p&gt;You should the following checklist fully satisfied at this point.&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;fa fa-check-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;strong&gt;DNX&lt;/strong&gt;, &lt;strong&gt;DNU&lt;/strong&gt; and &lt;strong&gt;DNVM&lt;/strong&gt; completely removed / uninstalled&lt;br&gt;
&lt;i class=&#34;fa fa-check-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;strong&gt;Visual Studio 2015 Update 2&lt;/strong&gt; installed&lt;br&gt;
&lt;i class=&#34;fa fa-check-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;strong&gt;.NET Core CLI&lt;/strong&gt; installed&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;edit-by-hand-i-class-fa-fa-pencil-square-o-aria-hidden-true-i:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Edit by Hand &lt;i class=&#34;fa fa-pencil-square-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/h2&gt;

&lt;p&gt;There were changes to &lt;strong&gt;APIs&lt;/strong&gt; which required changes to implementation aspects of the source code. Additionally, &lt;code&gt;namespace&lt;/code&gt;
changes such as (but not limited to) &lt;code&gt;Microsoft.AspNet.*&lt;/code&gt; to &lt;code&gt;Microsoft.AspNetCore.*&lt;/code&gt;. But the bulk of the work was really in the hand-editing
of &lt;code&gt;.sln&lt;/code&gt;, &lt;code&gt;global.json&lt;/code&gt;, &lt;code&gt;.xproj&lt;/code&gt;, &lt;code&gt;project.json&lt;/code&gt;, etc. files. Let&amp;rsquo;s look at what changed.&lt;/p&gt;

&lt;h3 id=&#34;the-sln-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;.sln&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Change the &lt;strong&gt;VisualStudioVersion&lt;/strong&gt; from &lt;code&gt;14.0.24720.0&lt;/code&gt; to &lt;code&gt;14.0.25123.0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VisualStudioVersion = 14.0.25123.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-global-json-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;global.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Change the &lt;strong&gt;version&lt;/strong&gt; from &lt;code&gt;1.0.0-rc1-update1&lt;/code&gt; to &lt;code&gt;1.0.0-preview1-002702&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;projects&amp;quot;: [ &amp;quot;src&amp;quot;, &amp;quot;test&amp;quot; ],
  &amp;quot;sdk&amp;quot;: {
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0-preview1-002702&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-xproj-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;.xproj&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.xproj&lt;/code&gt; files are a little more involved, there are a few items that are required to be changed. In &lt;strong&gt;RC1&lt;/strong&gt; we had proprerties that
were specific to &lt;strong&gt;DNX&lt;/strong&gt;, now we replace these with &lt;strong&gt;DOTNET&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;rc1:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DNX\Microsoft.DNX.Props&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DotNet\Microsoft.DotNet.Props&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, we need to change the targets. This one requires that you know the type of project you&amp;rsquo;re editing, for example &lt;em&gt;&amp;ldquo;class library&amp;rdquo;&lt;/em&gt; vs. &lt;em&gt;&amp;ldquo;web site&amp;rdquo;&lt;/em&gt;. In &lt;strong&gt;RC1&lt;/strong&gt;
there was only one target, but with &lt;strong&gt;RC2&lt;/strong&gt; they are differeniated.&lt;/p&gt;

&lt;h4 id=&#34;rc1-1:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DNX\Microsoft.DNX.targets&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-class-library:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2 (class library)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DotNet\Microsoft.DotNet.targets&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-web:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2 (web)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&amp;quot;$(VSToolsPath)\DotNet.Web\Microsoft.DotNet.Web.targets&amp;quot; 
        Condition=&amp;quot;&#39;$(VSToolsPath)&#39; != &#39;&#39;&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-project-json-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;project.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;There has been a large reworking of the &lt;code&gt;project.json&lt;/code&gt; file - detailed &lt;a href=&#34;https://github.com/aspnet/Announcements/issues/175&#34;&gt;here&lt;/a&gt;. I will not be covering all
of the changes here, but I do intend calling attention to some of the observations I have made and changes that were most pertinent. Here is the link for the official
&lt;a href=&#34;http://json.schemastore.org/project-1.0.0-rc2&#34;&gt;&lt;code&gt;project.json schema&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will look at various sections of the &lt;code&gt;project.json&lt;/code&gt; file changes. Let&amp;rsquo;s start with replacing &lt;code&gt;compilationOptionsbuildOptions&lt;/code&gt; with &lt;code&gt;buildOptions&lt;/code&gt;, and notice that
we are adding much more options than before.&lt;/p&gt;

&lt;h4 id=&#34;rc1-2:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;compilationOptions&amp;quot;: {
  &amp;quot;emitEntryPoint&amp;quot;: true,
  &amp;quot;warningsAsErrors&amp;quot;: true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-1:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;buildOptions&amp;quot;: {		
  &amp;quot;emitEntryPoint&amp;quot;: true,
  &amp;quot;warningsAsErrors&amp;quot;: true,
  &amp;quot;preserveCompilationContext&amp;quot;: true,
  &amp;quot;embed&amp;quot;: &amp;quot;Views/**&amp;quot;, // Instead of &amp;quot;.:resource&amp;quot;: &amp;quot;Views/**&amp;quot;,
  &amp;quot;compile&amp;quot;: {
    &amp;quot;exclude&amp;quot;: [ &amp;quot;wwwroot&amp;quot;, &amp;quot;node_modules&amp;quot; ] // Now here, instead of &amp;quot;.:exclude&amp;quot;
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, we have &lt;code&gt;publishOptions&lt;/code&gt; that we can utilize - consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;publishOptions&amp;quot;: {
  &amp;quot;include&amp;quot;: [
    &amp;quot;wwwroot&amp;quot;,
    &amp;quot;appsettings.json&amp;quot;,
    &amp;quot;web.config&amp;quot;
  ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we have to be a little more specific with how we want the server to handle garbage collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;runtimeOptions&amp;quot;: {
  &amp;quot;gcServer&amp;quot;: true, // Yes, please perform garbage collection
  &amp;quot;gcConcurrent&amp;quot;: true // Yes, please do so concurrently...
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-web-config-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;web.config&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Now, &lt;strong&gt;IIS&lt;/strong&gt; is a little smarter and is starting to recognize &lt;strong&gt;ASP.NET Core&lt;/strong&gt; a little more.&lt;/p&gt;

&lt;h4 id=&#34;rc1-3:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;handlers&amp;gt;
      &amp;lt;add name=&amp;quot;httpPlatformHandler&amp;quot; path=&amp;quot;*&amp;quot; verb=&amp;quot;*&amp;quot; modules=&amp;quot;httpPlatformHandler&amp;quot; 
           resourceType=&amp;quot;Unspecified&amp;quot;/&amp;gt;
    &amp;lt;/handlers&amp;gt;
    &amp;lt;httpPlatform processPath=&amp;quot;%DNX_PATH%&amp;quot; arguments=&amp;quot;%DNX_ARGS%&amp;quot; stdoutLogEnabled=&amp;quot;false&amp;quot; /&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-2:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;handlers&amp;gt;
      &amp;lt;add name=&amp;quot;aspNetCore&amp;quot; path=&amp;quot;*&amp;quot; verb=&amp;quot;*&amp;quot; modules=&amp;quot;AspNetCoreModule&amp;quot; 
           resourceType=&amp;quot;Unspecified&amp;quot; /&amp;gt;
    &amp;lt;/handlers&amp;gt;
    &amp;lt;aspNetCore processPath=&amp;quot;%LAUNCHER_PATH%&amp;quot; arguments=&amp;quot;%LAUNCHER_ARGS%&amp;quot; 
                forwardWindowsAuthToken=&amp;quot;false&amp;quot; stdoutLogEnabled=&amp;quot;false&amp;quot; /&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-hosting-json-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;hosting.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;With the release of &lt;strong&gt;RC2&lt;/strong&gt;, the &lt;code&gt;project.json&lt;/code&gt; schema removed the &lt;code&gt;webroot&lt;/code&gt; property. Now in order to specify the websites&amp;rsquo; static content directory we need to
create a &lt;code&gt;hosting.json&lt;/code&gt; file. This file should look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;webroot&amp;quot;: &amp;quot;wwwroot&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-appsettings-json-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;appsettings.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;This was a minor change, but if you forgot to change this - then you&amp;rsquo;ll end up with a runtime exception. The &lt;code&gt;Logging:LogLevel:Default&lt;/code&gt; should now be
&lt;code&gt;Debug&lt;/code&gt; as &lt;code&gt;Verbose&lt;/code&gt; was removed altogether.&lt;/p&gt;

&lt;h4 id=&#34;rc1-4:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Logging&amp;quot;: {
      &amp;quot;IncludeScopes&amp;quot;: false,
      &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Verbose&amp;quot;, // &amp;lt; -- Change &amp;quot;Verbose&amp;quot;
        &amp;quot;System&amp;quot;: &amp;quot;Information&amp;quot;,
        &amp;quot;Microsoft&amp;quot;: &amp;quot;Information&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-3:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;Logging&amp;quot;: {
      &amp;quot;IncludeScopes&amp;quot;: false,
      &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Debug&amp;quot;, // &amp;lt; --- To &amp;quot;Debug&amp;quot;
        &amp;quot;System&amp;quot;: &amp;quot;Information&amp;quot;,
        &amp;quot;Microsoft&amp;quot;: &amp;quot;Information&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-launchsettings-json-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;launchSettings.json&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;environmentVariables&lt;/code&gt; changed, such that the key name for the environment is no longer referred to as &amp;ldquo;Hosting:Environment&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;rc1-5:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;environmentVariables&amp;quot;: {
  &amp;quot;Hosting:Environment&amp;quot;: &amp;quot;Development&amp;quot; // &amp;lt; -- Change &amp;quot;Hosting:Environment&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-4:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;environmentVariables&amp;quot;: {
  &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot; // &amp;lt; -- To &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-cs-files:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;*.cs&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;Some of these were very simple to fix. After updating your &lt;code&gt;project.json&lt;/code&gt; with the latest &lt;strong&gt;RC2&lt;/strong&gt; versions - some changes are as simple as a &lt;code&gt;namespace&lt;/code&gt; change (but others are more involed).&lt;/p&gt;

&lt;h4 id=&#34;rc1-6:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNet.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-5:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNetCore.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-changes:0349d6d87cad08484fba4056f258e4f0&#34;&gt;API changes&lt;/h3&gt;

&lt;p&gt;There was an attempt to unify some of the APIs as it pertains to consistency. As such, I had to make the following changes to my projects.
The &lt;code&gt;IApplicationBuilder.Use*&lt;/code&gt; pattern now takes a new &lt;code&gt;*Options&lt;/code&gt; instance rather than an &lt;code&gt;Action&amp;lt;*Options&amp;gt;&lt;/code&gt;, providing more control to the consumer.&lt;/p&gt;

&lt;h4 id=&#34;rc1-7:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.UseCookieAuthentication(options =&amp;gt;
{
    options.AuthenticationScheme = &amp;quot;AspNetCookie&amp;quot;;
    options.AutomaticAuthenticate = true;
    options.AutomaticChallenge = true;
    options.LoginPath = &amp;quot;/account/login&amp;quot;;
    options.LogoutPath = &amp;quot;/account/logout&amp;quot;;
    options.AccessDeniedPath = &amp;quot;/account/forbidden&amp;quot;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rc2-6:0349d6d87cad08484fba4056f258e4f0&#34;&gt;RC2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationScheme = AuthenticationScheme.JciCookie,
    AutomaticAuthenticate = true,
    AutomaticChallenge = true,
    LoginPath = &amp;quot;/account/login&amp;quot;,
    LogoutPath = &amp;quot;/account/logout&amp;quot;,
    AccessDeniedPath = &amp;quot;/account/forbidden&amp;quot;,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The service locator pattern (or should I say &amp;ldquo;anti-pattern&amp;rdquo;) is slowing being removed from the framework. As such, if you were relying on the &lt;code&gt;CallContextServiceLocator.Locator.ServiceProvider&lt;/code&gt;
you can no longer do so with the &lt;strong&gt;RC2&lt;/strong&gt; release.&lt;/p&gt;

&lt;p&gt;Wherever you were using the &lt;code&gt;IApplication&lt;/code&gt; interface, you should be able to instead use the &lt;code&gt;IWebHost&lt;/code&gt; interface.&lt;/p&gt;

&lt;h3 id=&#34;controllers-as-services:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Controllers as Services&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;RC1&lt;/strong&gt;, there was a nice little feature that allowed for any &lt;code&gt;Type&lt;/code&gt; to exist in a list of plausible controller/services - meaning that you could basically register external controllers as
valid API and View entry points into your hosting application. You simply needed to add the types via the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IMvcBuilder.AddControllersAsServices(params Type[] types);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method signature changed with &lt;strong&gt;RC2&lt;/strong&gt; and it no longer accepts any arguments. In order to retain this functionality, you must first add the desired external assemblies as an &lt;code&gt;AssemblyPart&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var assembly in GetExternalAssemblies())
{
    builder.PartManager.ApplicationParts.Add(new AssemblyPart(assembly));    
}

builder.AddControllersAsServices();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-startup-ctor:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The Startup &lt;code&gt;.ctor&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;One little change, you&amp;rsquo;re now required to explicitly set the base path and you can do so with the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Startup(IHostingEnvironment env)
{
    var builder =
        new ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath) // Explicity set base from the content root path
            .AddJsonFile(&amp;quot;appsettings.json&amp;quot;, true)
            .AddJsonFile($&amp;quot;appsettings.{env.EnvironmentName}.json&amp;quot;, true)
            .AddEnvironmentVariables();
    // Omitted for brevity...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-program-cs-file:0349d6d87cad08484fba4056f258e4f0&#34;&gt;The &lt;code&gt;Program.cs&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;Yes, we are now a console application&amp;hellip;so we&amp;rsquo;ll need this for our entry point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Program
{
    public static void Main(string[] arguments)
    {
        using (var host = 
            new WebHostBuilder()
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .UseIISIntegration()
                .UseStartup&amp;lt;Startup&amp;gt;()
                .Build();)
        {
            host.Run();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;breaking-changes:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;For a complete listing of all the announcements, please visit the official
&lt;a href=&#34;https://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-rc2&#34;&gt;&lt;strong&gt;ASP.NET &lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Repo&lt;/strong&gt;&lt;/a&gt; announcements issue.&lt;/p&gt;

&lt;h2 id=&#34;further-reading:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;The previous steps were really to get your environment in an &lt;strong&gt;RC2&lt;/strong&gt; ready state, but there is so much more you can learn that has changed.
I encourage bookmarking and reading the following articles as time permits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dotnet.github.io/docs/core-concepts/dnx-migration.html&#34;&gt;&lt;strong&gt;Migrating from DNX to .NET Core CLI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.asp.net/en/latest/migration/rc1-to-rc2.html&#34;&gt;&lt;strong&gt;Migrating from ASP.NET 5 RC1 to ASP.NET Core&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md&#34;&gt;&lt;strong&gt;The .NET Platform Standard&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dotnet.github.io/docs/core-concepts/libraries/libraries-with-cli.html&#34;&gt;&lt;strong&gt;Writing Libraries with Cross Platform Tools&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:0349d6d87cad08484fba4056f258e4f0&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There, that really wasn&amp;rsquo;t too bad - was it? I&amp;rsquo;m certain that I didn&amp;rsquo;t cover everything and that I probably missed something. I hope that this was helpful, please feel free to share this!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>