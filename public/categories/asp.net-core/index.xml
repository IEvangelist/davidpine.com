<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET Core on IEvangelist</title>
    <link>https://davidpine.net/categories/asp.net-core/</link>
    <description>Recent content in ASP.NET Core on IEvangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://davidpine.net/categories/asp.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C# All The Things</title>
      <link>https://davidpine.net/blog/csharp-all-the-things/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/csharp-all-the-things/</guid>
      <description>I&amp;rsquo;m proud to share that this post is part of the C# Advent Calendar and it&amp;rsquo;s my second year contributing to it! I encourage you to check out all the others here.
 
Developers Are Lazy! In the world of web development it is hard to escape certain tools that we are forced to rely on. As developers we&amp;rsquo;re innately lazy and it is safe to say that perhaps we don&amp;rsquo;t really care enough to look into other tooling options.</description>
    </item>
    
    <item>
      <title>ASP.NET Core &#43; Angular Photo Booth App</title>
      <link>https://davidpine.net/blog/photo-booth/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/photo-booth/</guid>
      <description>Inspiration I recently returned from Charleston, South Carolina &amp;ndash; where I spoke at SyntaxCon. The event was very professionally organized and gave me inspiration for Cream City Code. In the main hall they had a HALO by Simple Booth. It serves as a photo booth with a conference specific backdrop &amp;ndash; which is perfect for sharing the conference experience. I looked into purchasing one but was encouraged to simply write my own&amp;hellip; so I did and this blog will detail that process.</description>
    </item>
    
    <item>
      <title>ASP.NET Core Unit Testing For Security Attributes</title>
      <link>https://davidpine.net/blog/asp-net-core-security-unit-testing/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/asp-net-core-security-unit-testing/</guid>
      <description>Intro As a developer, I can say that developers are lazy - at least I know and acknowledge that I am. If I&amp;rsquo;m tasked with something even the slightest bit repetitious I&amp;rsquo;ll script it out, or find a way to automate it. Likewise, if I fall into a habit of forgetting something important - I&amp;rsquo;ll figure out a way to not forget. Especially when it comes to securing an application.</description>
    </item>
    
    <item>
      <title>ASP.NET Core Configuration Tips</title>
      <link>https://davidpine.net/blog/asp-net-core-configuration/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/asp-net-core-configuration/</guid>
      <description>Being a software developer, it&amp;rsquo;s in our nature to configure various aspects of the applications that we write. With ASP.NET Core configuring our applications is really straight forward. Luckily, there is a lot of really well written documentation surrounding this topic.
  &amp;nbsp; ASP.NET Core - Configuration  &amp;nbsp; ASP.NET Core - Options  However, there is still room for improvement. I&amp;rsquo;ve prepared a few tips that can enhance developer productivity by taking advantage of various C# features.</description>
    </item>
    
    <item>
      <title>Overriding ASP.NET Core Framework-Provided Services</title>
      <link>https://davidpine.net/blog/overriding-default-di/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/overriding-default-di/</guid>
      <description>Overview In .NET it&amp;rsquo;s really easy to create your own interfaces and implementations. Likewise, it&amp;rsquo;s seemingly effortless to register them for dependency injection. But it is not always obvious how to override existing implementations. Let&amp;rsquo;s discuss various aspects of &amp;ldquo;dependency injection&amp;rdquo; and how you can override the &amp;ldquo;framework-provided services&amp;rdquo;.
As an example, let&amp;rsquo;s take a recent story on our product backlog for building a security audit of login attempts. The story involved the capture of attempted usernames along with their corresponding IP addresses.</description>
    </item>
    
    <item>
      <title>What happened to my Thread.CurrentPrincipal</title>
      <link>https://davidpine.net/blog/principal-architecture-changes/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/principal-architecture-changes/</guid>
      <description>Overview Like the title claims, if you&amp;rsquo;re using ASP.NET Core and expecting the Thread.CurrentPrincipal or ClaimsPrincipal.Current to be populated you&amp;rsquo;d be wrong. This is not the IPrincipal you&amp;rsquo;re looking for. In this post we&amp;rsquo;ll discuss what happened and what you need to do now. Additionally we&amp;rsquo;ll cover all the peripheral benefits as a result of this change.
History If you have ever done any .NET Framework development, you&amp;rsquo;ve probably seen the Thread class.</description>
    </item>
    
    <item>
      <title>ASP.NET Core Response Optimization</title>
      <link>https://davidpine.net/blog/asp-net-core-optimization/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://davidpine.net/blog/asp-net-core-optimization/</guid>
      <description>Intro If you&amp;rsquo;re a web developer, chances are you&amp;rsquo;re familiar with optimization strategies such as static file caching and response compression. I recently implemented these two concepts in tandem on an ASP.NET Core application that I have been developing&amp;hellip; I&amp;rsquo;m going to share what I have learned.
If you haven&amp;rsquo;t had a chance to use ASP.NET Core yet, you&amp;rsquo;re missing out! As my friend Scott Addie likes to say:</description>
    </item>
    
    <item>
      <title>The power of the global.json</title>
      <link>https://davidpine.net/blog/the-global-json/</link>
      <pubDate>Mon, 18 Jul 2016 22:40:31 -0500</pubDate>
      
      <guid>https://davidpine.net/blog/the-global-json/</guid>
      <description>Introduction As I&amp;rsquo;m sure you&amp;rsquo;re all aware by now, Monday June 27th was a special day for those of you who were anticipating the release of .NET Core and ASP.NET Core. While the &amp;ldquo;core&amp;rdquo; frameworks and runtimes are RTM, the tooling is actually still in preview. In fact, we&amp;rsquo;re currently on Tools Preview 2. I wanted to focus this post entirely on one specific enhancement to Visual Studio solutions, enter the global.</description>
    </item>
    
    <item>
      <title>ASP.NET Core RC2 (Migration Guide)</title>
      <link>https://davidpine.net/blog/migrating-to-rc2/</link>
      <pubDate>Fri, 20 May 2016 22:40:31 -0500</pubDate>
      
      <guid>https://davidpine.net/blog/migrating-to-rc2/</guid>
      <description>Introduction On Monday, May 16th 2016 there was an amazing announcement from the .NET Blog team!
 Announcing .NET Core RC2 and .NET Core SDK Preview 1
 This post will serve as a guide that walks you through the steps as I experienced them from migrating existing ASP.NET Core RC1 applications to ASP.NET Core RC2. It is worth mentioning that I&amp;rsquo;m am targeting the .NET 4.6 framework. So, I do not cover the .</description>
    </item>
    
  </channel>
</rss>