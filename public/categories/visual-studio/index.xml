<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on IEvangelist</title>
    <link>http://davidpine.net/categories/visual-studio/</link>
    <description>Recent content in Visual Studio on IEvangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Dec 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://davidpine.net/categories/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C# Special Edition</title>
      <link>http://davidpine.net/blog/csharp-special-edition/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/csharp-special-edition/</guid>
      <description>

&lt;p&gt;Welcome to the 17th day of the &lt;a href=&#34;https://crosscuttingconcerns.com/The-First-C-Advent-Calendar&#34; target=&#34;_blank&#34;&gt;C# Advent Calendar&lt;/a&gt;. I&amp;rsquo;d like to take a moment to thank my fellow bloggers who are sharing their passion of C# with everyone following the C# Advent Calendar. Please, share this and their posts - help us all make C# even more widely adopted than it is today.&lt;/p&gt;

&lt;h1 id=&#34;in-the-beginning:83517bab67fab26f20ee96795daa710a&#34;&gt;In the Beginning&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m honored to blog about my favorite programming language, C#. There is an often forgotten truth about the history of C#, one truth that I like talking about. While C# is a really &amp;ldquo;cool&amp;rdquo; language with awesome features it was actually named &amp;ldquo;Cool&amp;rdquo; in the beginning!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; In January 1999, &lt;em&gt;Anders Hejlsberg&lt;/em&gt; formed a team to build a new language at the time called Cool, which stood for &amp;ldquo;C-like Object Oriented Language&amp;rdquo;. Microsoft had considered keeping the name &amp;ldquo;Cool&amp;rdquo; as the final name of the language, but chose not to do so for trademark reasons.
&lt;cite&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&#34; target=&#34;_blank&#34;&gt;Wiki - C#&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Likewise, the name C# somewhat implies an increment of C++. Imagine, the &lt;code&gt;++&lt;/code&gt; being stacked on-top of each other &amp;ndash; you&amp;rsquo;d have something resembling the &lt;code&gt;#&lt;/code&gt; symbol, clever no?! Unfortunately, my career didn&amp;rsquo;t start with such a cool language. I learned &lt;em&gt;Java&lt;/em&gt; in college and started my career with &lt;em&gt;Visual Basic&lt;/em&gt;. I am now grateful to develop in C# professionally and for fun!&lt;/p&gt;

&lt;h3 id=&#34;it-is-going-to-be-around-for-a-while:83517bab67fab26f20ee96795daa710a&#34;&gt;It is going to be around for a while&lt;/h3&gt;

&lt;p&gt;From all the languages in the &lt;code&gt;.NET&lt;/code&gt; stack, C# is the most prolific.&lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;Visual Basic&lt;/strong&gt; lovers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vb&#34;&gt;Throw New System.Exception(&amp;quot;Tomatoes!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;strong&gt;F#&lt;/strong&gt; enthusiasts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;raise (new Exception(&amp;quot;their fists in anger!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The language continues to evolve and innovate. According to the annual &lt;strong&gt;&lt;i class=&#34;fa fa-stack-overflow&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Stack Overflow&lt;/strong&gt; developer survey, &lt;a href=&#34;https://insights.stackoverflow.com/survey/2017#technology-programming-languages&#34; target=&#34;_blank&#34;&gt;C# is the 4th most popular programming language in the world&lt;/a&gt;. And since we&amp;rsquo;re talking about &lt;strong&gt;&lt;i class=&#34;fa fa-stack-overflow&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Stack Overflow&lt;/strong&gt;, it is noteworthy to mention that 

    
        
    

    &lt;a href=&#34;https://stackoverflow.com/users/22656/jon-skeet&#34; target=&#39;_blank&#39;&gt;Jon Skeet&lt;/a&gt;

 is nearing 1 million reputation points &amp;ndash; and he&amp;rsquo;s projecting this will occur mid January. Roughly 55% of all his contributions are for C#, yet he is a Java developer. This never ceases to amaze me!&lt;/p&gt;

&lt;h1 id=&#34;getting-started:83517bab67fab26f20ee96795daa710a&#34;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;I believe that Microsoft has done an amazing job at not only updating their documentation sites, but unifying them and enhancing the user experience tenfold. The sites seem to flow more naturally while delivering relevant content, and as a developer that is what I want from a resource.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; The &lt;a href=&#34;www.javascript.com&#34; target=&#34;_blank&#34;&gt;JavaScript.com&lt;/a&gt; website has one of the best getting started experiences on the web today.
&lt;cite&gt;Maria Naggaga &amp;ndash; Keynote &amp;ldquo;It Starts With A Search&amp;rdquo;, MKE DOT NET 2017&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is more natural for JavaScript to have an online tutorial than C#, but Microsoft made this happen regardless. They have an awesome series of &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/index&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;quick starts&amp;rdquo;&lt;/a&gt; that serve as tutorials. They introduced an in-browser REPL (Read-Eval-Print Loop) for C#, and it is amazing. Here is a listing of a few of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/hello-world&#34; target=&#34;_blank&#34;&gt;Hello C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/numbers-in-csharp&#34; target=&#34;_blank&#34;&gt;Numbers in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/branches-and-loops&#34; target=&#34;_blank&#34;&gt;Branches and loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/list-collection&#34; target=&#34;_blank&#34;&gt;Collections in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/introduction-to-classes&#34; target=&#34;_blank&#34;&gt;Introduction to classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you&amp;rsquo;re developing you can always rely on the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/&#34; target=&#34;_blank&#34;&gt;C# Guide&lt;/a&gt; as well. Finally, the documentation site boasts &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/samples-and-tutorials/&#34; target=&#34;_blank&#34;&gt;Samples and Tutorials&lt;/a&gt; for a more in depth look.&lt;/p&gt;

&lt;h1 id=&#34;speaking-fluently:83517bab67fab26f20ee96795daa710a&#34;&gt;Speaking Fluently&lt;/h1&gt;

&lt;p&gt;C# is a beautiful language with an elegant syntax which is simple, powerful and expressive. Backed by an superb developer experience from Visual Studio, you can quickly immerse yourself into any project. What would a C# post be without some code? Not much of a post at all. Since this is a special edition, let&amp;rsquo;s have a look at something I found interesting and insightful from C# 7. I wrote a post about &lt;a href=&#34;blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;exploring C# 7&lt;/a&gt; if you&amp;rsquo;d like a refresher.&lt;/p&gt;

&lt;p&gt;C# 7.0 featured &lt;code&gt;out&lt;/code&gt; variables, which enable inline declaration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class StringExtensions
{
    // The declaration is inlined with the out keyword
    // We can use &#39;var&#39;, as the type int is known
    // The &#39;result&#39; variable is scope &amp;quot;leaks&amp;quot; to scope of the method body
    public static int ToInt32(string input)
        =&amp;gt; int.TryParse(input, out var result)) ? result : result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now write super expressive, inlined &lt;code&gt;.TryParse&lt;/code&gt; logic. I wanted to call attention to an issue that I ran into where I made an assumption. The lesson of the story is to never make an assumption, right?! &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/916&#34; target=&#34;_blank&#34;&gt;Here is the issue as it exists on &lt;strong&gt;&lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; GitHub&lt;/strong&gt; today.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
        =&amp;gt; (queue?.TryPeek(out T result) ?? false) ? result : default;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in the following compiler error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Error CS0165 Use of unassigned local variable &amp;lsquo;result&amp;rsquo; IEvangelist.Csharp.Seven&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see this does not currently work in C#, but I assumed it would. Let&amp;rsquo;s break it down and figure out why. First, let&amp;rsquo;s remove the single line expression and make it non-ternary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
    {
        if (queue?.TryPeek(out T result) ?? false)
        {
            return result;
        }

        return default;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first expression within the &lt;code&gt;if&lt;/code&gt; block tests if the &lt;code&gt;queue&lt;/code&gt; parameter in context is &lt;code&gt;null&lt;/code&gt;. If it is &lt;code&gt;null&lt;/code&gt;, it will coalesce to &lt;code&gt;false&lt;/code&gt;. If it is not &lt;code&gt;null&lt;/code&gt;, then if will evaluate the returning result from the &lt;code&gt;.TryPeek&lt;/code&gt; invocation. When the if block is evaluated to be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; - after evaluation we know that the &lt;code&gt;result&lt;/code&gt; variable has been definitely assigned. Here is the spec on &lt;strong&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/spec/variables.md#definite-assignment&#34; target=&#34;_blank&#34;&gt;definite assignment&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; At a given location in the executable code of a function member, a variable is said to be definitely assigned if the compiler can prove, by a particular static flow analysis (&lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/spec/variables.md#precise-rules-for-determining-definite-assignment&#34; target=&#34;_blank&#34;&gt;Precise rules for determining definite assignment&lt;/a&gt;), that the variable has been automatically initialized or has been the target of at least one assignment.
&lt;cite&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/spec/variables.md#definite-assignment&#34; target=&#34;_blank&#34;&gt;C# Language - &lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; GitHub&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
    {
        if (queue == null)
        {
            return default;
        }

        // The &#39;result&#39; variable leaks to this outer scope.
        // But with the previous eager evaluation and corresponding early exit
        // the &#39;result&#39; is never accessed.
        // As such, it is not &amp;quot;definitely assigned&amp;quot;.
        if (queue.TryPeek(out T result))
        {
            return result;
        }

        return default;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to the non-inlined usage of &lt;code&gt;out&lt;/code&gt; variable declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
    {
        // The `result` variable may never be accessed.
        if (queue != null)
        {
            T result;
            if (queue.TryPeek(out result))
            {
                return result;
            }
        }

        return default;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are more verbose equivalents in terms of functionality, some with eager evaluation paired with an early exit. Both of these versions compile and would work as you&amp;rsquo;d expect them to. There is talk about getting better support for flow analysis, beyond definite assignment &amp;ndash; I for one would love that. TypeScript has been doing a great job at this, thanks to Anders and company!&lt;/p&gt;

&lt;p&gt;The issue still has a sense of illusion. Yes, as &lt;a href=&#34;https://twitter.com/gafter&#34; target=&#34;_blank&#34;&gt;Neal Gafter&lt;/a&gt; stated I would like definite assignment (which is part of flow analysis) to infer that the variable is only referenced where it was definitely assigned in this case. I&amp;rsquo;m happy that it&amp;rsquo;s been labeled as a &lt;em&gt;Feature Request&lt;/em&gt; and &lt;em&gt;Discussion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Does that seem reasonable? If not, why? If so, please &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/916&#34; target=&#34;_blank&#34;&gt;visit the issue&lt;/a&gt; and &lt;i class=&#34;fa fa-thumbs-up&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;! I&amp;rsquo;m thrilled that C# is open source and the community is able to contribute in ways such as this. I hope that after reading this you might be inspired to get involved.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Why procrastinate today, when you can procrastinate tomorrow?
&lt;cite&gt;&lt;a href=&#34;https://twitter.com/reverentgeek&#34; target=&#34;_blank&#34;&gt;David Neal&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;counting-my-blessings:83517bab67fab26f20ee96795daa710a&#34;&gt;Counting my blessings&lt;/h3&gt;

&lt;p&gt;I consider myself to be very fortunate. I work with the owner of &lt;a href=&#34;https://travelswithedwina.com/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Edwina&amp;rdquo;&lt;/a&gt;, who has been patiently teaching and coaching me through the better part of three years of my career. She used to teach algorithms and C# at the Milwaukee School of Engineering (MSOE). I have learned so much from her about C#, language semantics, algebraic reduction, etc&amp;hellip;and I&amp;rsquo;m grateful for that. She has certainly made me a more pragmatic developer. I encourage everyone to find someone who can inspire, motivate or mentor them.&lt;/p&gt;

&lt;h1 id=&#34;final-thoughts:83517bab67fab26f20ee96795daa710a&#34;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Go learn C#! If you already know it, mentor someone who wants to learn it. Happy Holidays and please support my fellow bloggers as they share their passion for C# with you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xUnit Roslyn Analyzers</title>
      <link>http://davidpine.net/blog/xunit-powered-by-roslyn/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/xunit-powered-by-roslyn/</guid>
      <description>

&lt;style&gt;p { opacity: 1 !important; }&lt;/style&gt;

&lt;h1 id=&#34;intro:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;At my day job, I wear many hats. I&amp;rsquo;m currently wearing the &amp;ldquo;upgrade our team&amp;rsquo;s tooling&amp;rdquo; hat. &lt;strong&gt;I counted 99&lt;/strong&gt; &lt;code&gt;*.xproj&lt;/code&gt; and &lt;code&gt;project.json&lt;/code&gt; based projects spanning four repositories that need to be updated to the revitalized &lt;code&gt;*.csproj&lt;/code&gt; project format. With this the team can upgrade to the latest version of Visual Studio (finally upgrading to 2017 from 2015) and start taking advantage of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supported tooling, no longer on preview tooling bits&lt;/li&gt;
&lt;li&gt;Allows us to &lt;a href=&#34;blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;explore C# 7&lt;/a&gt; (and &lt;a href=&#34;blog/csharp-seven-dot-one&#34; target=&#34;_blank&#34;&gt;peruse C# 7.1&lt;/a&gt;) with production code&lt;/li&gt;
&lt;li&gt;Leverage the latest SDK and &lt;code&gt;.NET Core&lt;/code&gt; CLI&lt;/li&gt;
&lt;li&gt;Other obvious reasons&lt;/li&gt;
&lt;li&gt;And so on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upgrading tooling is not always glamorous, but there are times that I find myself excited. I thoroughly enjoy learning about the new tooling innovations and efforts around simplifying the development work-flow, especially when it involves C# and Visual Studio.&lt;/p&gt;

&lt;h2 id=&#34;an-omg-wtf-moment:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;An &amp;ldquo;OMG, WTF&amp;rdquo; Moment&lt;/h2&gt;

&lt;p&gt;I mandate that our projects &lt;em&gt;&amp;ldquo;treat warnings as errors&amp;rdquo;&lt;/em&gt;. After migrating the first solution over, 15 of the 30 projects had compilation errors. It&amp;rsquo;s worth mentioning that we maintain a 1-to-1 ratio between class libraries and unit-test projects. Much to my surprise the 15 projects that had compilation errors were only unit-test projects. The reason that they stopped compiling was due to seemingly countless &lt;strong&gt;xUnit&lt;/strong&gt; warnings, generated by various &lt;strong&gt;Roslyn&lt;/strong&gt; analyzers. I was shocked by the number of warnings that were discovered.&lt;/p&gt;

&lt;h2 id=&#34;the-realization:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;The Realization&lt;/h2&gt;

&lt;p&gt;As one might imagine &amp;ndash; there are a lot of unit tests in 15 projects. This was an opportunity for &lt;strong&gt;Roslyn&lt;/strong&gt; and &lt;strong&gt;xUnit&amp;rsquo;s&lt;/strong&gt; analyzers to shine, and shine they did! At first I was frustrated&amp;hellip;thinking something like &amp;ldquo;FML, of course there is an issue&amp;rdquo; but upon further investigation I discovered that these were all perfectly reasonable warnings. In fact, several of them made me question how some tests ever passed at all. I was impressed by the power of this tooling addition. While &lt;strong&gt;Roslyn&lt;/strong&gt; has been around for a while, I have not personally observed a large uptake in its abilities. Needless to say, I was thrilled to see the &lt;strong&gt;xUnit&lt;/strong&gt; team leveraging it so much &amp;ndash; this is inspiring!&lt;/p&gt;

&lt;p&gt;Visual Studio 2017 will display the analyzers that are available within a project under Dependencies &amp;gt; Analyzers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2017/11/analyzers.png&#34; alt=&#34;Analyzers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see they have put a lot of thought and effort into this. There are tons of various rules,&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/&#34; target=&#34;_blank&#34;&gt;here is a comprehensive listing of them all.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-github-com-xunit-xunit-target-blank-i-class-fa-fa-github-square-aria-hidden-true-i-xunit-a:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;&lt;a href=&#34;https://github.com/xunit/xunit&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; xUnit&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m dating my &lt;strong&gt;xUnit&lt;/strong&gt; efforts here a bit, but I&amp;rsquo;ve been a fan of &lt;strong&gt;xUnit&lt;/strong&gt; for a long time now! Back in the days of &amp;ldquo;DNX&amp;rdquo;, or as Scott Addie might ask &lt;a href=&#34;https://twitter.com/Scott_Addie/status/928021703619379201&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;DMX?&amp;rdquo;&lt;/a&gt;. In a time when I was still on &lt;a href=&#34;https://ievangelistblog.wordpress.com/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-wordpress&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Wordpress&lt;/a&gt;, before I was enlightened my Steve Hicks who says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; If you aren&amp;rsquo;t putting out as many posts as BuzzFeed, you can probably just build your blog statically
&lt;cite&gt;&lt;a href=&#34;https://twitter.com/pepopowitz&#34; target=&#34;_blank&#34;&gt;Steve Hicks&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ievangelistblog.wordpress.com/2016/02/12/asp-net-core-1-0-unit-testing/&#34; target=&#34;_blank&#34;&gt;Here is a post&lt;/a&gt; from February 2016 where I flexed some of the &lt;strong&gt;xUnit&lt;/strong&gt; capabilities. Again, I&amp;rsquo;ve been a fan of &lt;strong&gt;xUnit&lt;/strong&gt; for a long time now. It is incredibly&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-github-com-dotnet-roslyn-target-blank-i-class-fa-fa-github-square-aria-hidden-true-i-roslyn-a:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Roslyn&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re unfamiliar with &lt;strong&gt;Roslyn&lt;/strong&gt;, it is the &lt;code&gt;.NET&lt;/code&gt; Compiler Platform.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Roslyn provides open-source C# and Visual Basic compilers with rich code analysis APIs. It enables building code analysis tools with the same APIs that are used by Visual Studio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visual Studio relies on &lt;strong&gt;Roslyn&lt;/strong&gt; for lots of things. All of the aforementioned &lt;strong&gt;xUnit&lt;/strong&gt; rules are defined as &lt;strong&gt;Roslyn&lt;/strong&gt; analyzers. These analyzers are executed within Visual Studio, providing a great developer experience. They help you write better code.&lt;/p&gt;

&lt;h2 id=&#34;visual-studio-warnings:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Visual Studio &amp;ndash; Warnings&lt;/h2&gt;

&lt;p&gt;This section will serve as a brief listing of some of the warnings that I encountered. When writing a unit-test that uses &lt;code&gt;Theory&lt;/code&gt; paired with &lt;code&gt;InlineData&lt;/code&gt;, if there are duplicates &amp;ndash; this is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit1025&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 1025&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/inline-dup.png&#34; alt=&#34;Inline Duplicate&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you mistakenly define a unit-test method parameter that is not used, it&amp;rsquo;s flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit1026&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 1026&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/remove-parameter.png&#34; alt=&#34;Remove Parameter&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your unit-test is attempting to check whether a collection &amp;ldquo;does not contain&amp;rdquo; something, and does so with an &lt;code&gt;Assert.False(collection.Any(...));&lt;/code&gt; &amp;ndash; it is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2012&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 2012&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/use-doesnotcontain.png&#34; alt=&#34;Use Does Not Contain&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one might be my favorite &amp;ndash; if you incorrectly &lt;code&gt;Assert.NotNull&lt;/code&gt; on a value-type (that can never be &lt;code&gt;null&lt;/code&gt;) &amp;ndash; it is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2002&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 2002&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/remove-call.png&#34; alt=&#34;Remove Call&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you call &lt;code&gt;Assert.Equal&lt;/code&gt; and the expected argument is &lt;code&gt;null&lt;/code&gt; &amp;ndash; it is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2003&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 2003&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/use-null.png&#34; alt=&#34;Use Null&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also ran into two variations of the &lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2013&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;xUnit:2013&lt;/strong&gt; warning&lt;/a&gt; which states the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Do not use equality check to check for collection size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In one scenario I had some unit test code similar to &lt;code&gt;Assert.Equal(0, values.Count);&lt;/code&gt;, the analyzer instead suggested &lt;code&gt;Assert.Empty(values);&lt;/code&gt;. This was my intent anyways, so of course I was happy to accept the recommended change.&lt;/p&gt;

&lt;p&gt;Likewise I had an &lt;code&gt;Assert.Equal(1, values.Count);&lt;/code&gt; and the analyzer suggested &lt;code&gt;Assert.Single(values);&lt;/code&gt;. I was ensuring that the collection had only a single value, so once again &lt;strong&gt;xUnit&lt;/strong&gt; was correct. Again, my appreciation for this tooling enhancement cannot be overstated.&lt;/p&gt;

&lt;h1 id=&#34;thank-you:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Thank you&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I am so pleased with the &lt;a href=&#34;https://twitter.com/xunit?ref_src=twsrc%5Etfw&#34;&gt;@xunit&lt;/a&gt; team&amp;#39;s &lt;a href=&#34;https://twitter.com/roslyn?ref_src=twsrc%5Etfw&#34;&gt;@roslyn&lt;/a&gt; analyzers, &lt;a href=&#34;https://t.co/DAVuVsAGmQ&#34;&gt;https://t.co/DAVuVsAGmQ&lt;/a&gt;. These are amazing, literally changing the unit testing game. I literally love everything about what xUnit has done for C# unit testing. &lt;a href=&#34;https://t.co/ROrNQAf6NW&#34;&gt;pic.twitter.com/ROrNQAf6NW&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Pine (MVP) (@davidpine7) &lt;a href=&#34;https://twitter.com/davidpine7/status/928805436761010176?ref_src=twsrc%5Etfw&#34;&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-reading:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re curious about &lt;strong&gt;xUnit&lt;/strong&gt; or &lt;strong&gt;Roslyn&lt;/strong&gt;, please checkout the resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xunit/xunit&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; xUnit &amp;ndash; GitHub.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; xUnit Analyzer Rules &amp;ndash; GitHub.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Perusing C# 7.1</title>
      <link>http://davidpine.net/blog/csharp-seven-dot-one/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/csharp-seven-dot-one/</guid>
      <description>

&lt;p&gt;Earlier this year in March &amp;ndash; Visual Studio 2017 was released. With this the world was given C# 7, checkout my post on &lt;a href=&#34;http://davidpine.net/blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Exploring C# 7&amp;rdquo; here&lt;/a&gt;. In this post we will peruse C# 7.1, the first incremental release while C# 8 is being fleshed out.&lt;/p&gt;

&lt;h1 id=&#34;async-main-a-target-blank-href-https-github-com-dotnet-csharplang-issues-97-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;Async Main &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/97&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Since the release of C# 5, developers have either embraced the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords or fumbled along the way feebly attempting to comprehend them. Fear not, you&amp;rsquo;re not alone. Many others have been just as confused, but that&amp;rsquo;s not to say that the language didn&amp;rsquo;t make major strides towards simplifying your development efforts. In fact, I love asynchronous programming and C# makes me very happy with its implementation!&lt;/p&gt;

&lt;p&gt;Many developer advocates set forth on a journey of biblical proportions &amp;ndash; progressing through mountains of nay-sayers, focusing on craftsmanship and technical evangelism. Among these advocates &lt;strong&gt;Stephen Toub&lt;/strong&gt; and &lt;strong&gt;Stephen Cleary&lt;/strong&gt; rose toward the top. Blogging and helping us along the way. With their help emerged rules and guidelines, a comprehensive set of best practices for using these language features. One &lt;a href=&#34;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&#34; target=&#34;_blank&#34;&gt;best practice&lt;/a&gt; is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Instead of &lt;code&gt;Task.Result&lt;/code&gt; or &lt;code&gt;.Task.Wait()&lt;/code&gt;, use &lt;code&gt;await&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prior to C# 7.1 developers who wrote console applications were forced to deviate from this guideline. We were forced to use &lt;code&gt;.Result&lt;/code&gt; or &lt;code&gt;.Wait()&lt;/code&gt;. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main()
{
    var httpClient = new HttpClient();
    var result = httpClient.GetAsync(&amp;quot;some/url&amp;quot;).Result;

    // Another common alternative was using the get awaiter / result.
    result = httpClient.GetAsync(&amp;quot;some/url&amp;quot;).GetWaiter().GetResult();

    // Consume the result...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With C# 7.1, we can leverage &lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/proposals/async-main.md&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Async Main&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static async Task Main()
{
    var httpClient = new HttpClient();
    var result = await httpClient.GetAsync(&amp;quot;some/url&amp;quot;);

    // Consume the result...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature extends the previous four possible entry points to their &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;Task&amp;lt;int&amp;gt;&lt;/code&gt; based equivalents. Now the following entry points are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static Task Main() { }                      // static void Main() { }
static Task&amp;lt;int&amp;gt; Main() { }                 // static int Main() { }
static Task Main(string[] args) { }         // static void Main(string[] args) { }
static Task&amp;lt;int&amp;gt; Main(string[] args) { }    // static int Main(string[] args) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this task-based approach the new entry points simply provide that &amp;ldquo;feels good&amp;rdquo; approach to development.&lt;/p&gt;

&lt;h1 id=&#34;default-expression-a-target-blank-href-https-github-com-dotnet-csharplang-issues-102-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;&lt;code&gt;default&lt;/code&gt; Expression &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/102&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; keyword has been around forever. It was used to tell the compiler give me the &amp;ldquo;default&amp;rdquo; value for the given type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var number = default(int);      // 0
var date = default(DateTime);   // DateTime.MinValue
var obj = default(object);      // null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was also used for generics, for example when the type of &lt;code&gt;T&lt;/code&gt; is used we could return &lt;code&gt;default(T)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
{
    if (queue?.TryPeek(out var result) ?? false)
    {
        return result;
    }

    return default(T);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, the &lt;code&gt;default&lt;/code&gt; keyword was used in the &lt;code&gt;switch&lt;/code&gt; statement as well &amp;ndash; and signified the &lt;code&gt;default&lt;/code&gt; case label. If all other cases were not executed, the &lt;code&gt;default&lt;/code&gt; case would be.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;switch (dayOfWeek) 
{
    case DayOfWeek.Monday:
        return &amp;quot;Ugh... off to work again&amp;quot;;
    case DayOfWeek.Friday:
        return &amp;quot;Excitement sets in...&amp;quot;;
    
    default:
        return string.Empty;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, with C# 7.1 the compiler will use type inference to simplify the &lt;code&gt;default&lt;/code&gt; expression (sometimes referred to as &lt;code&gt;default&lt;/code&gt; literals). So we could declare an &lt;code&gt;int&lt;/code&gt; and assign it to &lt;code&gt;default&lt;/code&gt; without passing the type &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int number = default;   // 0
Guid guid = default;    // 00000000-0000-0000-0000-000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only can the type be inferred from the declaration but also the literal expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var number = isLucky ? 7 : default; // when &#39;isLucky&#39; is false number is 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The great news is that this feature is for the entire type-system, not just &lt;code&gt;int&#39;s&lt;/code&gt; &lt;i class=&#34;fa fa-thumbs-o-up&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;. You can now use the &lt;code&gt;default&lt;/code&gt; keyword in all sorts of places. You can use it to check against a value, or to pass it as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int Sum(params int[] numbers)
{
    if (numbers is default || numbers.Length == default)
    {
        return default; // Returns 0
    }
}

// Pass in default. This is null for int[].
var sum = Sum(default);
if (sum == default)
{
    // Take an action when sum is 0.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tuple-projection-initializers-a-target-blank-href-https-github-com-dotnet-csharplang-issues-415-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;Tuple Projection Initializers &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/415&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;I detailed the introduction of &lt;code&gt;tuples&lt;/code&gt; in my &lt;a href=&#34;http://davidpine.net/blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Exploring C# 7&amp;rdquo;&lt;/a&gt; post. Tuples are an amazing addition to the C# language and are extremely powerful. With its initial implementation however, there was something that was lacking. Tuple literals lacked the ability to infer names, now with C# 7.1 &amp;ndash; this is no longer a limitation.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;tuple&lt;/code&gt; projection initializers our C# &lt;code&gt;tuple&lt;/code&gt; literals are simplified and effectively DRY, as the redundancies of duplicating the field names are inferred.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var firstName = &amp;quot;David&amp;quot;;
var lastName = &amp;quot;Pine&amp;quot;;
var dateOfBirth = new DateTime(1984, 7, 7);

// C# 7.0, required &amp;quot;explicit names&amp;quot;
var person = (firstName: firstName, lastName: lastName, dateOfBirth: dateOfBirth);
var fn = person.firstName;      // &amp;quot;David&amp;quot;
var ln = person.lastName;       // &amp;quot;Pine&amp;quot;
var dob = person.dateOfBirth;   // 7/7/1984

// C# 7.1, allows &amp;quot;inferred names&amp;quot;
person = (firstName, lastName, dateOfBirth);
fn = person.firstName;          // &amp;quot;David&amp;quot;
ln = person.lastName;           // &amp;quot;Pine&amp;quot;
dob = person.dateOfBirth;       // 7/7/1984
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;pattern-matching-with-generics-a-target-blank-href-https-github-com-dotnet-csharplang-issues-154-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;Pattern-matching with Generics &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/154&#34;&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;With C# 7.0, pattern-matching was introduced &amp;ndash; I love talking about it and showing off what it can do! In my opinion it solves a lot of issues with type assertions and makes complex decision trees more legible and comprehensive. However, when it was introduced it didn&amp;rsquo;t correctly support generics. With C# 7.1, that has changed.&lt;/p&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Animal { }

public class Dog : Animal
{
    public Breed Breed { get; }
}

public void Interact&amp;lt;TAnimal&amp;gt;(TAnimal animal)
    where TAnimal : Animal
{
    if (animal is Dog dog)
    {
        // Play fetch with dog
    }

    switch (animal)
    {
        case Dog d when (d.Breed == Breed.LabradorRetriever):
            // Feed dog, the let &#39;em outside
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was not actually possible, in fact it wouldn&amp;rsquo;t even compile. Ignoring the scoping issue, as the &lt;code&gt;dog&lt;/code&gt; variable is declared twice within the same scope &amp;ndash; we&amp;rsquo;d end up with the following compilation error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; An expression of type TAnimal cannot be handled by a pattern of Dog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could use the &lt;code&gt;as&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var dog = animal as Dog;
if (dog != null) 
{
    // Play with man&#39;s best friend...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that isn&amp;rsquo;t really pattern-matching. The limitation that exists is due to explicit type conversions and open types; however, the design specification is changing as follows in the bold area:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Certain combinations of static type of the left-hand-side and the given type are considered incompatible and result in compile-time error. A value of static type &lt;code&gt;E&lt;/code&gt; is said to be pattern compatible with the type &lt;code&gt;T&lt;/code&gt; if there exists an identity conversion, an implicit reference conversion, a boxing conversion, an explicit reference conversion, or an unboxing conversion from &lt;code&gt;E&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt;, &lt;strong&gt;or if either &lt;code&gt;E&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt; is an open type.&lt;/strong&gt; It is a compile-time error if an expression of type &lt;code&gt;E&lt;/code&gt; is not pattern compatible with the type in a type pattern that it is matched with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;references:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn, The .NET Compiler Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang&#34;&gt;C# Language Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Exploring C# 7</title>
      <link>http://davidpine.net/blog/exploring-csharp-seven/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/exploring-csharp-seven/</guid>
      <description>

&lt;h1 id=&#34;intro:0efe24a7225e878a472913ac049c49a3&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Since we have all been actively celebrating the 20&lt;sup&gt;th&lt;/sup&gt; anniversary of &lt;strong&gt;Visual Studio&lt;/strong&gt;, it felt appropriate to post about &lt;strong&gt;C# 7&lt;/strong&gt;!
In this post we will explore the features that make &lt;strong&gt;C# 7&lt;/strong&gt; so promising. I&amp;rsquo;ve put together a demonstration &lt;strong&gt;C# 7&lt;/strong&gt; project, that is available
&lt;a href=&#34;https://github.com/IEvangelist/IEvangelist.CSharp&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post contains examples and details on five of the nine new &lt;strong&gt;C# 7&lt;/strong&gt; features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pattern matching&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out&lt;/code&gt; variables&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;Local functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw&lt;/code&gt; expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the remaining features, that I &lt;strong&gt;do not&lt;/strong&gt; cover in this post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; locals and returns&lt;/li&gt;
&lt;li&gt;More expression-bodied members&lt;/li&gt;
&lt;li&gt;Generalized &lt;code&gt;async&lt;/code&gt; return types&lt;/li&gt;
&lt;li&gt;Numeric literal syntax improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pattern-matching:0efe24a7225e878a472913ac049c49a3&#34;&gt;Pattern Matching&lt;/h2&gt;

&lt;p&gt;With &lt;strong&gt;C# 7&lt;/strong&gt; we welcomed the concept of &amp;ldquo;patterns&amp;rdquo;. This concept allows for the extraction of information when a variable is tested for a certain &amp;ldquo;shape&amp;rdquo; and matches a
specified pattern. We&amp;rsquo;re able to leverage the &amp;ldquo;shape&amp;rdquo; from which we matched on as a declared variable in scope, consuming it as we deem necessary. This is referred to as
&amp;ldquo;dynamic&amp;rdquo; (or &amp;ldquo;method&amp;rdquo;) dispatch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; In computer science, dynamic dispatch is the process of selecting which implementation of a polymorphic operation (method or function) to call at run time.
It is commonly employed in, and considered a prime characteristic of, object-oriented programming (OOP) languages and systems.
&lt;cite&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_dispatch&#34; target=&#34;_blank&#34;&gt;Wiki - Dynamic Dispatch&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dynamic dispatch is nothing new to &lt;strong&gt;C#&lt;/strong&gt;, and has been around forever. &lt;strong&gt;C# 7&lt;/strong&gt; exposes this functionality via constant and type patterns.&lt;/p&gt;

&lt;h3 id=&#34;constant-patterns:0efe24a7225e878a472913ac049c49a3&#34;&gt;Constant Patterns&lt;/h3&gt;

&lt;p&gt;Constant pattern &lt;code&gt;null&lt;/code&gt;, similar to &lt;code&gt;(obj == null)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; The &amp;ldquo;is expression&amp;rdquo; has been expanded&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void IsExpression(object obj)
{
    if (obj is null) // Constant pattern &amp;quot;obj is null&amp;quot;
    {
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;type-patterns:0efe24a7225e878a472913ac049c49a3&#34;&gt;Type Patterns&lt;/h3&gt;

&lt;p&gt;Look closely at this syntax. This is where we start mixing metaphors. Prior to &lt;strong&gt;C# 7&lt;/strong&gt; we could use the &amp;ldquo;is&amp;rdquo; expression to do simple type assertions
&lt;code&gt;obj is [type]&lt;/code&gt;. Additionally, we all know how to declare a variable &lt;code&gt;int i&lt;/code&gt;. This new syntax merges these concepts together and is more compound and
expressive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void IsExpression(object obj)
{
    // (obj is int i)
    // &amp;quot;obj is int&amp;quot;     // type assertion &amp;quot;typically evaluates type compatibility at run time&amp;quot;
    //        &amp;quot;int i&amp;quot;   // declaration

    if (obj is int i) // Type pattern &amp;quot;obj is int i&amp;quot;
    {
        // We can then use the &amp;quot;i&amp;quot; (integer) variable 
    }

    // Note, the variable &amp;quot;i&amp;quot; is also available in this scope.
    // This is in fact by design, more on that out the &amp;quot;out variable&amp;quot; section 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; The &amp;ldquo;switch statement&amp;rdquo; has been generalized&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;when&lt;/code&gt; keyword has also been extended, now it not only applies to the &lt;code&gt;catch&lt;/code&gt; statement but also the &lt;code&gt;case&lt;/code&gt; labels within a &lt;code&gt;switch&lt;/code&gt; statement.
Consider the following classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Shape
{
    protected internal double Height { get; }

    protected internal double Length { get; }

    protected Shape(double height, double length)
    {
        Height = height;
        Length = length;
    }
}

class Circle : Shape
{
    internal double Radius =&amp;gt; Height / 2;

    internal double Diameter =&amp;gt; Radius * 2;

    internal double Circumference =&amp;gt; 2 * Math.PI * Radius;

    internal Circle(double height, double length) 
        : base(height, length) { }
}

class Rectangle : Shape
{
    internal bool IsSquare =&amp;gt; Height == Length;

    internal Rectangle(double height, double length) 
        : base(height, length) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now imagine that we have a collection of these &lt;code&gt;Shape&lt;/code&gt; objects, and we want to print out their various details - we could use &amp;ldquo;pattern matching&amp;rdquo; as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void OutputShapes(IEnumerable&amp;lt;Shape&amp;gt; shapes)
{
    foreach (var shape in shapes)
    {
        // Previously, this was not permitted. Case labels had to be concrete
        // such as enums, numerics, bools, strings, etc.
        switch (shape)
        {
            case Circle c:
                WriteLine($&amp;quot;circle with circumference {c.Circumference}&amp;quot;);
                break;
            case Rectangle s when (s.IsSquare):
                WriteLine($&amp;quot;{s.Length} x {s.Height} square&amp;quot;);
                break;
            case Rectangle r:
                WriteLine($&amp;quot;{r.Length} x {r.Height} rectangle&amp;quot;);
                break;
            default:
                WriteLine(&amp;quot;This is not a shape that we&#39;re familiar with...&amp;quot;);
                break;
            case null:
                throw new ArgumentNullException(nameof(shape));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we are able to more easily reason about the specific &lt;code&gt;shape&lt;/code&gt; in context. For example, with each iteration of our collection we &lt;code&gt;switch&lt;/code&gt;
on the &lt;code&gt;shape&lt;/code&gt;. If the &lt;code&gt;shape&lt;/code&gt; is an instance of the &lt;code&gt;Circle&lt;/code&gt; subclass, we&amp;rsquo;ll execute the &lt;code&gt;case&lt;/code&gt; label &amp;ldquo;Circle&amp;rdquo; and we get the instance declared as
its type in the variable &lt;code&gt;c&lt;/code&gt;. Likewise, if the &lt;code&gt;shape&lt;/code&gt; is a &lt;code&gt;Rectangle&lt;/code&gt; and that rectangle &lt;code&gt;s&lt;/code&gt; just so happens to also be a square &lt;code&gt;when (s.IsSquare)&lt;/code&gt;
evaluates to &lt;code&gt;true&lt;/code&gt; - we will then execute the square &lt;code&gt;case&lt;/code&gt; label. If the &lt;code&gt;shape&lt;/code&gt; is an instance of a &lt;code&gt;Rectangle&lt;/code&gt; but not a square, we execute the
&amp;ldquo;Rectangle&amp;rdquo; &lt;code&gt;case&lt;/code&gt; label. Notice we still have &lt;code&gt;default&lt;/code&gt; fall-thru. Finally, we can also have a &amp;ldquo;null&amp;rdquo; &lt;code&gt;case&lt;/code&gt; label.&lt;/p&gt;

&lt;h2 id=&#34;out-variables:0efe24a7225e878a472913ac049c49a3&#34;&gt;&lt;code&gt;out&lt;/code&gt; variables&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.NET&lt;/code&gt; developers are more than familiar with the &lt;code&gt;Try*&lt;/code&gt; pattern, but as a refresher this is what it looks like. Imagine we are trying to parse
a &lt;code&gt;System.String&lt;/code&gt; input value as a &lt;code&gt;System.Int32&lt;/code&gt;. Imagine that the consumer doesn&amp;rsquo;t really care if it is parsed, they&amp;rsquo;re fine with a &lt;code&gt;default(int)&lt;/code&gt;
if it fails.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int ToInt32(string input)
{
    int result;
    if (int.TryParse(input, out result))
    {
        return result;
    }

    return default(int);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s quickly recap this. First, we declare a variable namely &lt;code&gt;result&lt;/code&gt;. We then invoke the &lt;code&gt;int.TryParse&lt;/code&gt; which returns a &lt;code&gt;bool&lt;/code&gt; whether or not the
parse was successful. If &lt;code&gt;true&lt;/code&gt; then the declare &lt;code&gt;result&lt;/code&gt; variable is not equal to the parsed &lt;code&gt;int&lt;/code&gt; value. If the &lt;code&gt;input&lt;/code&gt; was &lt;code&gt;&amp;quot;12&amp;quot;&lt;/code&gt;, then &lt;code&gt;result&lt;/code&gt; would be &lt;code&gt;12&lt;/code&gt;. If the &lt;code&gt;input&lt;/code&gt;
was &lt;code&gt;&amp;quot;Pickles&amp;quot;&lt;/code&gt;, then the return from the invocation to the &lt;code&gt;ToInt32&lt;/code&gt; would be &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;int.TryParse&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now with &lt;strong&gt;C# 7&lt;/strong&gt; we can declare our &lt;code&gt;out&lt;/code&gt; variable inline as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int ToInt32(string input)
{
    // Note: the declaration is inline with the out keyword
    if (int.TryParse(input, out int result))
    {
        return result;
    }

    return default(int);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The scope of the &lt;code&gt;result&lt;/code&gt; variable is identical to the previous example, as it actually &amp;ldquo;leaks&amp;rdquo; out to the &lt;code&gt;if&lt;/code&gt; statement. We can re-write this even
more expressively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int ToInt32(string input) =&amp;gt; int.TryParse(input, out var result) ? result : result;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things you might notice. First, this is now a single line as we can express this with the lambda operator. We leverage the ternary operator as
well. Additionally, we can use the &lt;code&gt;var&lt;/code&gt; keyword for our declaration. And since the &lt;code&gt;result&lt;/code&gt; variable is in scope we can use it as both return cases.
If unable to be parsed, it is in fact a &lt;code&gt;default(int)&lt;/code&gt; anyways.&lt;/p&gt;

&lt;h2 id=&#34;tuples:0efe24a7225e878a472913ac049c49a3&#34;&gt;Tuples&lt;/h2&gt;

&lt;p&gt;Most developers are familiar with &lt;code&gt;System.Tuple&amp;lt;T[,T1...]&amp;gt;&lt;/code&gt;. This &lt;code&gt;class&lt;/code&gt; has served us well all the while it has been around.
One of the advantages is that it exposes &lt;code&gt;readonly&lt;/code&gt; fields - from the values that it is instantiated with. This
was also great for equality comparisons and even using the tuple as a dictionary key.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;C# 7&lt;/strong&gt; we have a new syntax for expressing tuples. Enter the &lt;code&gt;ValueTuple&lt;/code&gt;, and as the name implies - this is a &lt;code&gt;struct&lt;/code&gt; instead of a &lt;code&gt;class&lt;/code&gt;. There
are obvious performance gains from using a light-weight value-type over the allocation of a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void LegacyTuple()
{
    var letters = new Tuple&amp;lt;char, char&amp;gt;(&#39;a&#39;, &#39;b&#39;);
    
    // Values were accessible via these Item* fields.
    var a = letters.Item1;
    var b = letters.Item2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wasn&amp;rsquo;t overly exciting from an API perspective, as the field names do not really imply anything about their intention.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void ValueTuple()
{
    var letters = (&#39;a&#39;, &#39;b&#39;);
    var a = letters.Item1;
    var b = letters.Item2;

    // Note: ToTuple extension method
    var systemTuple = letters.ToTuple();
    var c = systemTuple.Item1;
    var d = systemTuple.Item2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might notice that the syntactic sugar is pouring over this new feature. This is referred to as a &amp;ldquo;tuple literal&amp;rdquo;. We dropped the entire &lt;code&gt;new&lt;/code&gt; keyword
usage, as well as specifying the types. They are all inferred and in fact known, IntelliSense proves this immediately. But we still have the issue of
these tuples not being very API friendly. Let&amp;rsquo;s explore how we can give them custom names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void MoreValueTuples()
{
    var lessonDetails = 
        (Subject: &amp;quot;C# Language Semantics&amp;quot;, Category: Categories.Programming, Level: 300);

    // Note: IntelliSense now hides Item1, Item2 and Item3
    // Instead we are provided with the following:

    var subject = lessonDetails.Subject;    // string
    var category = lessonDetails.Category;  // Categories [enum]
    var level = lessonDetails.Level;        // int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deconstruction:0efe24a7225e878a472913ac049c49a3&#34;&gt;Deconstruction&lt;/h3&gt;

&lt;p&gt;Now that we see how we can instantiate a &lt;code&gt;ValueTuple&lt;/code&gt;, let&amp;rsquo;s take a look at how we can declare one for usage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void DeconstructionExamples()
{
    var lessonDetails = 
        (Subject: &amp;quot;C# Language Semantics&amp;quot;, Category: Categories.Programming, Level: 300);
    
    // We can deconstruct in three various ways
    // First, the fully qualified type
    (string subject, Categories category, int level) = lessonDetails;
    
    // Next using the var keyword per named declaration
    (var subject, var category, var level) = lessonDetails;

    // Finally, omitting any type declaration and using var wholeheartedly
    var (subject, category, level) = lessonDetails;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are often questions about how deconstruction is implemented, and whether or not it is ordinal based. For the &lt;code&gt;ValueTuple&lt;/code&gt; it is in fact
ordinal based. However, note that deconstruction is not actually limited to tuples. With &lt;strong&gt;C# 7&lt;/strong&gt; any &lt;code&gt;object&lt;/code&gt; that defines a &lt;code&gt;public void Deconstruct&lt;/code&gt;
method can be deconstructed. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Person
{
    private readonly (string First, string Middle, string Last) _name;

    private readonly DateTime DateOfBirth _dateOfBirth;

    public Person((string f, string m, string l) name, DateTime dob)
    {
        _name = name;
        _dateOfBirth = dob;
    }

    public void Deconstruct(out double age, 
                            out string firstName,
                            out string middleName, 
                            out string lastName)
    {
        age = (DateTime.Now - _dateOfBirth).TotalYears;
        firstName = _name.First;
        middleName = _name.Middle;
        lastName = _name.Last;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the &lt;code&gt;Person&lt;/code&gt; is defined with this &lt;code&gt;Deconstruct&lt;/code&gt; method, we can deconstruct it following the same ordinal based semantics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void DeconstructNonTuple()
{
    var person = new Person((&amp;quot;David&amp;quot;, &amp;quot;Michael&amp;quot;, &amp;quot;Pine&amp;quot;), new DateTime(1984, 7, 7));

    (int age, string first, string middle, string last) = person;

    // Note: to partially deconstruct you can ignore a specific ordinal by using the _
    // This does not actually naming the ordinal variable, but truly ignoring it.

    var (_, _, _, _) = person;          // Ignore all, not very useful
    var (_, firstName, _, _) = person;  // Cherry-pick first name
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;comparing-anonymous-object-vs-valuetuple:0efe24a7225e878a472913ac049c49a3&#34;&gt;Comparing Anonymous &lt;code&gt;object&lt;/code&gt; vs. &lt;code&gt;ValueTuple&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;At first glance tuples look almost like anonymous objects. They are in fact very different. An anonymous object is actually a reference type whereas
a &lt;code&gt;ValueTuple&lt;/code&gt; is a &lt;code&gt;struct&lt;/code&gt; - value type. Also, you can only return an anonymous object from a method as an &lt;code&gt;object&lt;/code&gt; which isn&amp;rsquo;t very API friendly.
Within a fluent &lt;code&gt;LINQ&lt;/code&gt; chained method anonymous objects are great and will still be normal for projection.&lt;/p&gt;

&lt;h2 id=&#34;local-functions:0efe24a7225e878a472913ac049c49a3&#34;&gt;Local Functions&lt;/h2&gt;

&lt;p&gt;At first glance, local functions seem a bit odd. I&amp;rsquo;ve heard people say, &amp;ldquo;this method is starting to look like a class&amp;rdquo;. At first,
I was one of these people too. Once you get used to the idea and see the benefits it really does make sense. Here is a quick
comparison of the two, note the benefits of local functions as they compare to lambdas.&lt;/p&gt;

&lt;style&gt;
    .red { color: red; }
    .green { color: green; }
&lt;/style&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Lambda(s)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Local Function(s)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Generics&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Local functions allow for the use of generics&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Iterators&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;yield&lt;/code&gt; keyword is valid within local functions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Recursion&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Local functions support recursion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Allocatey&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Delegates require an &lt;code&gt;object&lt;/code&gt; allocation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Potential Variable Lifting&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Implicitly captured closure is non-existent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is vital to understand that local functions are &lt;strong&gt;not&lt;/strong&gt; a replacement for &lt;code&gt;Action&amp;lt;T[,T1...]&amp;gt;&lt;/code&gt; or &lt;code&gt;Func&amp;lt;T[,T1...]&amp;gt;&lt;/code&gt;. These delegate declarations are still
needed as parameters to enable lambda expression arguments. If you see the &lt;strong&gt;#notasugly&lt;/strong&gt; hashtag, this was coined by Mads Torgersen.&lt;/p&gt;

&lt;h3 id=&#34;more-efficient:0efe24a7225e878a472913ac049c49a3&#34;&gt;More efficient&lt;/h3&gt;

&lt;p&gt;When using local functions, there is no &lt;code&gt;object&lt;/code&gt; created - unlike delegates that require an object for it to be used. Likewise, local functions
help to alleviate another issue with lambdas in that they do not need to implicitly capture a variable longer than it is potentially needed.
In &lt;strong&gt;C#&lt;/strong&gt; lambdas capture values by reference, meaning that garbage collection may not be able to correctly clean up code that is &amp;ldquo;allocatey&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;declaration:0efe24a7225e878a472913ac049c49a3&#34;&gt;Declaration&lt;/h4&gt;

&lt;p&gt;With local functions, the declaration of the local function can actually occur after the &lt;code&gt;return&lt;/code&gt; statement - as long as it is within the method body
in which it is consumed. If you&amp;rsquo;re familiar with some of the implementations of the &lt;code&gt;LINQ&lt;/code&gt; extension methods on &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, you would know a lot
of the methods are defined with argument validation followed by the instantiation of &amp;ldquo;Iterator&amp;rdquo; classes, where these classes do the actual work.&lt;/p&gt;

&lt;p&gt;Because of deferred execution, iterators do not actually execute validation logic until they are iterated - for example invoking &lt;code&gt;.ToList()&lt;/code&gt;, &lt;code&gt;.ToArray()&lt;/code&gt;,
or simply using them in a &lt;code&gt;foreach&lt;/code&gt; statement. Ideally, we would like our iterators to &amp;ldquo;fail-fast&amp;rdquo; in the event of being given invalid arguments. Let&amp;rsquo;s
imagine that the &lt;code&gt;.Select&lt;/code&gt; extension method was implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IEnumerable&amp;lt;TResult&amp;gt; Select&amp;lt;T, TResult&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, 
                                                           Func&amp;lt;T, TResult&amp;gt; selector)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (selector == null) throw new ArgumentNullException(nameof(selector));

    foreach (var item in source)
    {
        yield return selector(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this method is written as an iterator, the validation is skipped until it&amp;rsquo;s iterated. With &lt;strong&gt;C# 7&lt;/strong&gt; we can use local function to get both
&amp;ldquo;fail-fast&amp;rdquo; validation and the iterator together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IEnumerable&amp;lt;TResult&amp;gt; Select&amp;lt;T, TResult&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, 
                                                           Func&amp;lt;T, TResult&amp;gt; selector)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (selector == null) throw new ArgumentNullException(nameof(selector));

    return iterator();

    IEnumerable&amp;lt;TResult&amp;gt; iterator()
    {
        foreach (var item in source)
        {
            yield return selector(item);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;throw-expressions:0efe24a7225e878a472913ac049c49a3&#34;&gt;&lt;code&gt;throw&lt;/code&gt; expressions&lt;/h1&gt;

&lt;p&gt;Leveraging some pre-existing &lt;strong&gt;C#&lt;/strong&gt; functionality - &lt;code&gt;null&lt;/code&gt; coalescing, we can now &lt;code&gt;throw&lt;/code&gt; when a value is evaluated as &lt;code&gt;null&lt;/code&gt;. A common validation
mechanism is to &lt;code&gt;throw&lt;/code&gt; if an argument is &lt;code&gt;null&lt;/code&gt;. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class LegacyService : IService
{
    private readonly IContextProvider _provider;

    public LegacyService(IContextProvider provider)
    {
        if (provider == null)
        {
            throw new ArgumentNullException(nameof(provider));
        }

        _provider = provider;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;strong&gt;C# 7&lt;/strong&gt; we can simplify this with the &lt;code&gt;throw&lt;/code&gt; expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class ModernService : IService
{
    private readonly IContextProvider _provider;

    public ModernService(IContextProvider provider)
    {
        _provider = provider ?? throw new ArgumentNullException(nameof(provider));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the given &lt;code&gt;provider&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt; we&amp;rsquo;ll coalesce over to the &lt;code&gt;throw&lt;/code&gt; expression.&lt;/p&gt;

&lt;h1 id=&#34;from-c-6-to-c-7-then-and-now:0efe24a7225e878a472913ac049c49a3&#34;&gt;From C# 6 to C# 7, then and now!&lt;/h1&gt;

&lt;p&gt;I have a presentation that I have been fortunate enough to give at some regional conferences. One of these occasions was recorded, and I felt it
made sense to share it here - Enjoy!!&lt;/p&gt;

&lt;p&gt;&lt;style&gt;
    .iframe_container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 - this is responsive by adjusting the hight according to the width! */
        padding-top: 25px;
        height: 0;
    }
    .iframe_container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
&lt;/style&gt;
&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/kFpXRooGo0c&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/csharp/csharp-7&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C# 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>