<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on IEvangelist</title>
    <link>http://davidpine.net/categories/dependency-injection/</link>
    <description>Recent content in Dependency Injection on IEvangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://davidpine.net/categories/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overriding ASP.NET Core Framework-Provided Services</title>
      <link>http://davidpine.net/blog/overriding-default-di/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/overriding-default-di/</guid>
      <description>Overview In .NET it&amp;rsquo;s really easy to create your own interfaces and implementations. Likewise, it&amp;rsquo;s seemingly effortless to register them for dependency injection. But it is not always obvious how to override existing implementations. Let&amp;rsquo;s discuss various aspects of &amp;ldquo;dependency injection&amp;rdquo; and how you can override the &amp;ldquo;framework-provided services&amp;rdquo;.
As an example, let&amp;rsquo;s take a recent story on our product backlog for building a security audit of login attempts. The story involved the capture of attempted usernames along with their corresponding IP addresses.</description>
    </item>
    
  </channel>
</rss>