<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IEvangelist</title>
    <link>http://davidpine.net/</link>
    <description>Recent content on IEvangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Apr 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://davidpine.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Journey of a Lifetime</title>
      <link>http://davidpine.net/blog/journey-of-a-lifetime/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/journey-of-a-lifetime/</guid>
      <description>

&lt;style&gt;
    .iframe_container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 - this is responsive by adjusting the hight according to the width! */
        padding-top: 25px;
        height: 0;
    }
    .iframe_container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
&lt;/style&gt;

&lt;h1 id=&#34;intro:838041a67cf795f61b4ef717b1e62653&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I am returning home from a long trip in Serbia for &lt;a href=&#34;https://itkonekt.com/en/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;IT Konekt&lt;/strong&gt;&lt;/a&gt;. This was literally a trip of a lifetime and I could not be more grateful for such an amazing opportunity. Serbia has such an incredible culture and powerful history. I have been overwhelmed by the care and attention to detail from the organizers of &lt;strong&gt;IT Konekt&lt;/strong&gt;. This was my first time ever leaving the United States of America and I didn&amp;rsquo;t know what to expect. I was really nervous but equally excited. This was more of a journey of epic proportions than it was a conference trip.&lt;/p&gt;

&lt;p&gt;I want to publicly thank &lt;a href=&#34;https://twitter.com/LadyNaggaga&#34; target=&#34;_blank&#34;&gt;Maria Naggaga &lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; of Microsoft for referring &lt;a href=&#34;https://twitter.com/Milica_Radovic_&#34; target=&#34;_blank&#34;&gt;Milica Radovic &lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/milicanastasic&#34; target=&#34;_blank&#34;&gt;Milica Nastasic &lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; to me. They were looking for someone from the U.S. to speak about C# and Maria suggested me. This is the such an honor and I couldn&amp;rsquo;t have been more excited to represent the U.S. and C# for my first international speaking engagement.&lt;/p&gt;

&lt;h2 id=&#34;belgrade:838041a67cf795f61b4ef717b1e62653&#34;&gt;Belgrade&lt;/h2&gt;

&lt;h3 id=&#34;april-13-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 13, 2018&lt;/h3&gt;

&lt;p&gt;Our journey began in Belgrade – the capitol city of Serbia. I arrived on the same flight into Belgrade as &lt;a href=&#34;https://twitter.com/jcleblanc&#34; target=&#34;_blank&#34;&gt;Jonathan LeBlanc &lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; of Box. In true movie fashion, our driver was waiting for us holding our names at the arrival gate of the airport. This was a warm welcome and made me feel special. After a 35 minute Car:Go (European Uber) drive we arrived at our hotel and while I didn&amp;rsquo;t get much sleep on the plane, I had energy from both the adrenaline and excitement. Just as soon as I was settling into my room, it was time to part for the first of seemingly countless speaker dinners. We were hungry and ready to immerse ourselves in the Serbian culture. We had a traditional Serbian dinner after a celebratory shot (or three) of &lt;a href=&#34;https://en.wikipedia.org/wiki/Rakia&#34; target=&#34;_blank&#34;&gt;rakija &lt;i class=&#34;fa fa-wikipedia-w&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; - &amp;ldquo;serbian fruit brandy&amp;rdquo;. Now, if you&amp;rsquo;re like me you probably didn&amp;rsquo;t know what rakija was&amp;hellip; &lt;em&gt;warning&lt;/em&gt; it is very strong! They fed us like kings and queens, we were treated like royalty!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2018/04/breaking-bread.jpg&#34; alt=&#34;Breaking Bread&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/csswizardry&#34; target=&#34;_blank&#34;&gt;Harry Roberts &lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; sat to my right - he was a blast. Him and I shared a lot of common thoughts about the developer community. I really enjoyed his company. I asked him if he was on &lt;em&gt;Twitter&lt;/em&gt; so that I could follow him - &lt;i class=&#34;fa fa-smile-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; yeah 58k+ followers. The food was great. The people of Serbia know how to do meat, I might get myself banned from the United States for saying this but it is true, &amp;ldquo;Serbia has the best bacon in the world!&amp;rdquo; After a long night, I returned to my hotel where I immediately fell asleep.&lt;/p&gt;

&lt;h3 id=&#34;april-14-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 14, 2018&lt;/h3&gt;

&lt;p&gt;I woke up at 8 AM, I then decided I would rest my eyes a little longer (suffering from jetlag) I opened them again around 11 AM. My talk was at 4, so I had plenty of time. It was conference day, I was prepared and looking forward to giving my talk. I believe that presenting on C# was an excellent choice – it is a universal language. The attendees really enjoyed it and were thoroughly engaged. The only time people had their phones out were for taking pictures of me or the slides. I was asked to take pictures with several attendees both before and after my talk. This was the first time this has ever happened to me and it made my day!&lt;/p&gt;

&lt;p&gt;In addition to a great conference, Jonathan LeBlanc and I took a casual stroll through Belgrade. We ended up walking over 14 miles and visited the Belgrade fortress. Along the way we were asked to help someone lift an A/C unit up a shaky ladder onto a roof within a closed market.&lt;/p&gt;




    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2018/04/market.jpg&#39;
                            alt=&#34;Market&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2018/04/helping-others.jpg&#39;
                            alt=&#34;Helping Others&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2018/04/back-market.jpg&#39;
                            alt=&#34;Back Market&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;



&lt;p&gt;No one was injured in the photographing of this event&amp;hellip;our walk continued with no more interruptions. We arrived at the Belgrade fortress and it was very interesting. We were able to walk all over it, in the moat, in tunnels and even on the walls. Once we made our way to the back of the fortress we found a hill with a view. Here is a great shot from the fortress walls overlooking where the rivers meet - it truly was a remarkable view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2018/04/belgrade.jpg&#34; alt=&#34;Beograd&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While touring the fortress we stumbled upon a torture museum, Jonathan and I decided &amp;ldquo;why not&amp;rdquo;. After the first few exhibits we kept asking each other &amp;ldquo;what the hell were we thinking!&amp;rdquo; I was tempted to share some of the pictures from the torture museum but nope, I&amp;rsquo;ll spare you the pain. Once we were finished witnessing the horrors, we were spent&amp;hellip;we walked back to the hotel.&lt;/p&gt;

&lt;h3 id=&#34;april-15-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 15, 2018&lt;/h3&gt;

&lt;p&gt;Sunday was traveling day and we were driving to Niš. The core group of speakers got to know each other extremely well during the trip, and I consider them all personal friends now. We spent hours in a jumbo van traveling the country of Serbia over the course of a week - quite the adventure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2018/04/the-van.jpg&#34; alt=&#34;The Van&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;niš:838041a67cf795f61b4ef717b1e62653&#34;&gt;Niš&lt;/h2&gt;

&lt;h3 id=&#34;april-16-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 16, 2018&lt;/h3&gt;

&lt;h4 id=&#34;the-humble-giant-jovan-milic:838041a67cf795f61b4ef717b1e62653&#34;&gt;The Humble Giant (Jovan Milic)&lt;/h4&gt;

&lt;p&gt;When we arrived in Niš, we were greeted by several hosts. One of them was &lt;a href=&#34;https://en.wikipedia.org/wiki/Jovan_Milic&#34; target=&#34;_blank&#34;&gt;Jovan Milic &lt;i class=&#34;fa fa-wikipedia-w&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; and I&amp;rsquo;m referring to him from now on as the &amp;ldquo;humble giant&amp;rdquo;. He is 21 years old and has already been nominated for the &lt;a href=&#34;https://www.nobelprize.org/nobel_prizes/peace/&#34; target=&#34;_blank&#34;&gt;Nobel Peace Prize&lt;/a&gt; four times! He was first nominated at the age of 15, making him the second youngest person in history to have been nominated. If you&amp;rsquo;re ever looking for inspiration read his story, it will hopefully put things a little more into perspective. For me, I can relate very much to his story and appreciate all the things that he&amp;rsquo;s done to earn his place in the world now. The next time you want to complain about the things you take for granted, remember his story and &lt;a href=&#34;http://www.findraoul.tk/&#34; target=&#34;_blank&#34;&gt;support his cause&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2018/04/jovan.jpg&#34; alt=&#34;Jovan Milic&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are several life lessons that I live by - this is one of them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Expect nothing, but be grateful for everything.
&lt;cite&gt;David Pine&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jovan and the other hosts treated us like celebrities. We had a walking tour of the Niš fortress and city center. After arming ourselves with some umbrellas we were ready to take on the light rain. My umbrella just so happened to be pink. I&amp;rsquo;m not sure the color of my umbrella is relevant for this story, but I felt inclined to share it. After strolling around the fortress and then making our way back towards the city center - we needed some caffeine. We enjoyed turkish coffee and dark beer, because why not both?! I recall this evening very well, this is the night that Håkon told us about the time he built a balsawood raft with a group of volunteers. The raft weighed over 20 tons, and the intended purpose was to set course from South America (Peru) and sail to Easter Island. Why, you might ask - as both Jon&amp;rsquo;s and I did&amp;hellip;we were intrigued, why on earth would anyone want to do this? Simply to prove a point that it could be done. It would prove that Easter Island could have been inhabited by the people of South America. This voyage took place in 2015-2016 and was the spot light of world-wide news, for more details checkout the &lt;a href=&#34;http://kontiki2.com/&#34; target=&#34;_blank&#34;&gt;official website&lt;/a&gt; and &lt;a href=&#34;http://www.wiumlie.no/img/2015/kontiki2.html&#34; target=&#34;_blank&#34;&gt;the story from Håkon himself here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Again we enjoyed a traditional Serbian dinner. There was more rakija and as luck would have it, traditional Serbian music was played/performed live&amp;hellip;with the livlihood from the rakija there was dancing and singing, and all around celebration. Such a joyous time!&lt;/p&gt;




    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2018/04/singing.jpg&#39;
                            alt=&#34;Singing&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2018/04/sitting.jpg&#39;
                            alt=&#34;Sitting&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2018/04/dancing.jpg&#39;
                            alt=&#34;Dancing&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;



&lt;h3 id=&#34;april-17-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 17, 2018&lt;/h3&gt;

&lt;p&gt;Conference Day! The stage was set. The crowds were drawing near, anticipation was building. News crews, wait&amp;hellip;news crews? Yes, we were actually interviewed and made it on the Serbian national news - several times. This was yet another first for me. The media was interested about our take on the IT community in Serbia. They were curious about how the developers of Serbia rank up against the rest of the world. That is a hard question to answer, but one thing was consistent with all of our responses - we believe that any developer can change the world! When you take talent, an idea and hunger to build something incredible there is no limit to what you can achieve.&lt;/p&gt;

&lt;div class=&#34;box alt&#34;&gt;
   &lt;div class=&#34;row uniform&#34;&gt;
      &lt;div class=&#34;6u&#34;&gt;
         &lt;span class=&#34;image fit&#34;&gt;
            &lt;img src=&#34;http://davidpine.net/img/2018/04/media-1.jpg&#34; alt=&#34;Jon G.&#34;&gt;
         &lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&#34;6u&#34;&gt;
         &lt;span class=&#34;image fit&#34;&gt;
            &lt;img src=&#34;http://davidpine.net/img/2018/04/media-2.jpg&#34; alt=&#34;Me&#34;&gt;
         &lt;/span&gt;
      &lt;/div&gt;
   &lt;/div&gt;
    &lt;div class=&#34;row uniform&#34;&gt;
      &lt;div class=&#34;6u&#34;&gt;
         &lt;span class=&#34;image fit&#34;&gt;
            &lt;img src=&#34;http://davidpine.net/img/2018/04/media-3.jpg&#34; alt=&#34;Jonathan&#34;&gt;
         &lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&#34;6u&#34;&gt;
         &lt;span class=&#34;image fit&#34;&gt;
            &lt;img src=&#34;http://davidpine.net/img/2018/04/media-4.jpg&#34; alt=&#34;Håkon&#34;&gt;
         &lt;/span&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The conference talks were all really well received. The developer community seemed eager to ask questions after sessions. As a speaker, this is what makes it all worth while - the gratifying moment when you know that you&amp;rsquo;ve been able to help someone and that you&amp;rsquo;ve delivered value. After the conference we spent more time walking around Niš, this is when I learned that Håkon brought a drone. We took turns flying it and taking pictures of the scenery.&lt;/p&gt;

&lt;h2 id=&#34;novi-sad:838041a67cf795f61b4ef717b1e62653&#34;&gt;Novi Sad&lt;/h2&gt;

&lt;h3 id=&#34;april-18-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 18, 2018&lt;/h3&gt;

&lt;p&gt;Wednesday was another traveling day. Our jumbo van trip was scheduled to take roughly four hours. But before we left, we were asked to be part of a ceremony with the President of municipalities, the mayor of Niš. The press was there to capture the moment. It was incredible sharing ideas for shared working spaces and encouraging hackathons. Our hosts served as translators, communicating our ambitions and guidance. The mayor was so pleased that he presented Håkon with a special honor - a medallion of Constantine the Great.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; IT experts are visiting the municipalities of Crvena Krst.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/5jCy7oHbDaE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Shortly after the ceremony we drove to Novi Sad. We arrived without a hitch, settling into our hotels. Followed by a city tour, which proved to be a spectacular site. Dinner was at the &lt;a href=&#34;http://www.terasa.rs/&#34; target=&#34;_blank&#34;&gt;Terasa&lt;/a&gt;. This sits right on the Danube river and at the foot of the Novi Sad fortress. Håkon was able to capture some amazing footage with his drone&amp;hellip;the view was beautifully stunning.&lt;/p&gt;

&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/rC4pvMA8Qsk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;sremski-karlovci-danube-river:838041a67cf795f61b4ef717b1e62653&#34;&gt;Sremski Karlovci &amp;amp; Danube River&lt;/h2&gt;

&lt;h3 id=&#34;april-19-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 19, 2018&lt;/h3&gt;

&lt;p&gt;The 19th was a really relaxing day, we had a walking tour, lunch on the Danube river, followed by a wine tasting at the &lt;a href=&#34;http://www.muzejzivanovic.com/&#34; target=&#34;_blank&#34;&gt;Museum of Beekeeping and Wine Cellar Zivanovic&lt;/a&gt;. Again, Håkon let his drone capture some of the essence and scenery. This video starts well beyond the town center, working its way back towards where we had lunch on the river. Yes, that establishment in the distance is where Håkon is navigating his drone recording this clip. I am seriously trying to convince my wife to let me purchase one of these drones. If you want to buy it for yourself &lt;a href=&#34;https://www.amazon.com/Mavic-Platinum-Quadcopter-Camera-Batteries/dp/B07871KXMP&#34; target=&#34;_blank&#34;&gt;here is the link&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/h6qwzQ65Fh8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This footage is amazing, video quality up to 4k if you&amp;rsquo;re into that sort of thing&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;april-20-2018:838041a67cf795f61b4ef717b1e62653&#34;&gt;April 20, 2018&lt;/h3&gt;

&lt;p&gt;The final conference day! I was up first and immediately following my talk, I needed to catch a cab back to Belgrade to catch my flight back home. I was sent home with a parting gift from the founders. I love the thoughtfulness, and it is so true that it&amp;rsquo;s better than a notebook and a pen.&lt;/p&gt;

&lt;div class=&#34;box alt&#34;&gt;
   &lt;div class=&#34;row uniform&#34;&gt;
      &lt;div class=&#34;5u&#34;&gt;
         &lt;span class=&#34;image fit&#34;&gt;
            &lt;img src=&#34;http://davidpine.net/img/2018/04/gift.jpg&#34; alt=&#34;Gift&#34;&gt;
         &lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&#34;7u&#34;&gt;
         &lt;span class=&#34;image fit&#34;&gt;
            &lt;img src=&#34;http://davidpine.net/img/2018/04/gift-2.jpg&#34; alt=&#34;Note&#34;&gt;
         &lt;/span&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I was excited to be returning home. I know that I was missed by Lyric, Londyn, Lennyx (my three sons) and Jen (wife). I&amp;rsquo;m thankful to have had a safe trip and shared so many awesome experiences. For those interested in the conference itself, I&amp;rsquo;ll be posting videos and more photos as they are released. For my talk, see below.&lt;/p&gt;

&lt;h3 id=&#34;what-s-new-in-c-the-talk:838041a67cf795f61b4ef717b1e62653&#34;&gt;What&amp;rsquo;s new in C# (The Talk)&lt;/h3&gt;

&lt;p&gt;I have been using &lt;strong&gt;GitPitch&lt;/strong&gt; for a while now, and I love it. Kudos to David Russel (the creator). For more details on &lt;strong&gt;GitPitch&lt;/strong&gt; checkout the official website by following the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gitpitch.com&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2018/04/gitpitch.png&#34; style=&#34;width: 400px&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the link for my talk, &lt;a href=&#34;https://gitpitch.com/ievangelist/csharp#/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;What&amp;rsquo;s new in C#&amp;rdquo;&lt;/a&gt;. This was the talk that I presented at all three &lt;strong&gt;IT Konekt&lt;/strong&gt; conferences.&lt;/p&gt;

&lt;h2 id=&#34;closing-thoughts:838041a67cf795f61b4ef717b1e62653&#34;&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;I was blessed to have made so many new friends on this journey. These people are inspiring, you should follow them as they are true leaders!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Jon Galloway&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/jongalloway/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jongalloway&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/jongalloway&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://weblogs.asp.net/jongalloway&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Executive Director &lt;a href=&#34;http://dotnetfoundation.org/&#34; target=&#34;_blank&#34;&gt;.NET Foundation&lt;/a&gt;, ASP.NET MVC 3/4/5 Author&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jonathan LeBlanc&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/jcleblanc/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jcleblanc&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/jcleblanc&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;http://www.jcleblanc.com/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Director of Developer Advocacy &lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;, Emmy Award Winner, O&amp;rsquo;Reilly Author&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Håkon Wium Lie&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/howcome/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/wiumlie&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;http://www.wiumlie.no/en&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Creator of CSS, former CTO of Opera, Kontiki Adventurer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Milica Radovic&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/milicaradovic/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Milica_Radovic_&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Founder, IT Konekt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/milicanastasic&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Milica Nastasic&lt;/strong&gt; &lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Co-Founder, IT Konekt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jovan Milic&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/jovan-milic-68713973&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-linkedin-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/JMiliic&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-twitter&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;4x Nobel Peace Prize Nominee, Founder of Find Raoul&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>http://davidpine.net/media/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/media/</guid>
      <description>

&lt;h1 id=&#34;podcasts-video-appearances:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;Podcasts - Video Appearances&lt;/h1&gt;

&lt;h3 id=&#34;askthat-episode-35:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;AskTHAT | Episode 35&lt;/h3&gt;

&lt;p&gt;&lt;style&gt;
    .iframe_container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 - this is responsive by adjusting the hight according to the width! */
        padding-top: 25px;
        height: 0;
    }
    .iframe_container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
&lt;/style&gt;
&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/MjS_lVg0G8E&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&#34;developer-on-fire-episode-305:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;Developer On Fire - Episode 305&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; David Pine talks with Dave Rael about building a brand for software developers, being a source of positivity, and the importance of mentors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://developeronfire.com/podcast/episode-305-david-pine-positive-brand&#34; target=&#34;_blank&#34;&gt;
    Checkout it out &lt;i class=&#34;fa fa-external-link-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;.
&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&#34;channel-9-magic-mirror:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;Channel 9 - Magic Mirror&lt;/h3&gt;

&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/VW7b0WU_UDM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr/&gt;

&lt;h1 id=&#34;publications-articles:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;Publications - Articles&lt;/h1&gt;

&lt;h3 id=&#34;c-favorite-features-through-the-years:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;C#: Favorite Features through the Years&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; Each newer version of C# is packed full of powerful and impactful features. In this tutorial I walk through the various versions of C# and share my favorite features from each release. Anytime I get the chance to write about C#, I&amp;rsquo;m eager to do so. This time was no &lt;code&gt;System.Exception&lt;/code&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetcurry.com/csharp/1411/csharp-favorite-features&#34; target=&#34;_blank&#34;&gt;
    Checkout it out &lt;i class=&#34;fa fa-external-link-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;.
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;asp-net-core-web-api-attributes:ca6d2bfce4e7a3ae1e9dcbc2ba76d8b3&#34;&gt;ASP.NET Core Web API Attributes&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; With &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; there are several various attributes that instruct the framework where to expect data. These attributes are very powerful, allowing for aliasing and strong-typing; however, knowing which correspond to model binding and are best suited for each HTTP verb is vital. In this article we&amp;rsquo;ll explore all of this and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dotnetcurry.com/aspnet/1390/aspnet-core-web-api-attributes&#34; target=&#34;_blank&#34;&gt;
    Checkout it out &lt;i class=&#34;fa fa-external-link-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;.
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core Unit Testing For Security Attributes</title>
      <link>http://davidpine.net/blog/asp-net-core-security-unit-testing/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/asp-net-core-security-unit-testing/</guid>
      <description>

&lt;h1 id=&#34;intro:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;As a developer, I can say that developers are lazy - at least I know and acknowledge that I am. If I&amp;rsquo;m tasked with something even the slightest bit repetitious I&amp;rsquo;ll script it out, or find a way to automate it. Likewise, if I fall into a habit of forgetting something important - I&amp;rsquo;ll figure out a way to &lt;em&gt;not forget&lt;/em&gt;. Especially when it comes to securing an application.&lt;/p&gt;

&lt;h2 id=&#34;security-soapbox:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Security Soapbox&lt;/h2&gt;

&lt;p&gt;We should take application security very seriously! With &lt;strong&gt;ASP.NET Core&lt;/strong&gt; there&amp;rsquo;s a lot of &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/&#34; target=&#34;_blank&#34;&gt;existing documentation&lt;/a&gt; for securing your application. This covers identity, authentication, authorization, data protection, HTTPS, safe storage, Azure key vault, anti-request forgery, open redirect attack, cross-site scripting, etc&amp;hellip; the list goes on and on. All these things are important and as a developer you&amp;rsquo;re ultimately accountable for writing secure code.&lt;/p&gt;

&lt;h2 id=&#34;the-dilemma:62ff3a2cc4e15c531086d495140b895f&#34;&gt;The Dilemma&lt;/h2&gt;

&lt;p&gt;A while back I spent a fair amount of time writing some &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; endpoints and I kept forgetting to provide the &lt;code&gt;AuthorizeAttribute&lt;/code&gt; on various controller classes or even controller actions.&lt;/p&gt;

&lt;p&gt;There is an easy way to solve this. Within &lt;code&gt;ConfigureServices&lt;/code&gt; we could apply an &lt;code&gt;AuthorizeFilter&lt;/code&gt; with a policy that requires an authenticated user. This serves as a nice security blanket, that ensures all endpoints are only accessible from an authenticated user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServicesCollection services)
{
    services.AddMvc(
        options =&amp;gt;
        {
            // Only allow authenticated users.
            var defaultPolicy =
                new AuthorizationPolicyBuilder()
                    .RequireAuthenticatedUser()
                    .Build();

            options.Filters.Add(new AuthorizeFilter(defaultPolicy));    
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, based on your needs - you may choose to not apply this filter. If you choose to not apply this filter you&amp;rsquo;re left with three options.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply an &lt;code&gt;AuthorizeAttribute&lt;/code&gt; at the controller class level (cascades onto all the actions)&lt;/li&gt;
&lt;li&gt;Apply an &lt;code&gt;AuthorizeAttribute&lt;/code&gt; on each individual action method &lt;i class=&#34;fa fa-meh-o&#34;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Not protect your API at all &lt;i class=&#34;fa fa-frown-o&#34;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;automation-to-the-rescue:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Automation To The Rescue&lt;/h2&gt;

&lt;p&gt;Some of our &lt;strong&gt;ASP.NET Core Web APIs&lt;/strong&gt; were protected by the filter, some by controller class level &lt;code&gt;AuthorizeAttribute&lt;/code&gt; decoration and others by the individual action&amp;hellip; and some not at all. This is a problem! It is common practice to run unit tests prior to pushing code into a feature branch for a pull request. If I forget to do that, my build system has some pull request pre-checks in place - one of which is to run the unit tests. As such, I know that unit tests will be executed. With this, I decided to write a unit test that leveraged a bit of reflection. Since it is a unit test, I&amp;rsquo;m not terribly concerned with performance - so reflection is fine&amp;hellip;&lt;/p&gt;

&lt;p&gt;Here was the thought process to write a unit test that could ensure that I&amp;rsquo;m not forgetful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load all assemblies into the current &lt;code&gt;AppDomain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Of all the loaded assemblies, get all the controller types

&lt;ul&gt;
&lt;li&gt;Of those controller types, get the ones that are missing the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Of the unauthorized controller types, get the &lt;code&gt;HttpMethodAttribute&lt;/code&gt; methods&lt;/li&gt;
&lt;li&gt;If missing both the &lt;code&gt;AuthorizeAttribute&lt;/code&gt; and &lt;code&gt;AllowAnonymousAttribute&lt;/code&gt; - &lt;strong&gt;fail&lt;/strong&gt; &lt;i class=&#34;fa fa-frown-o&#34;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;codify:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Codify&lt;/h3&gt;

&lt;p&gt;So, our step one is to load all assemblies into the current &lt;code&gt;AppDomain&lt;/code&gt;. This makes some assumptions. It assumes that our test project will have a reference to the &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; project, so that its &lt;code&gt;.dll&lt;/code&gt; will be available to us for loading (in our &lt;code&gt;bin&lt;/code&gt; directory). We will also assume the root namespace we&amp;rsquo;re looking for, we should know this anyway as we follow naming conventions and we&amp;rsquo;re the owner of the corresponding project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ActionTests
{
    const string RootNamespace = nameof(IEvangelist);
    static readonly string[] ExecutableExtensions = { &amp;quot;.exe&amp;quot;, &amp;quot;.dll&amp;quot; };

    public ActionTests()
        =&amp;gt; Directory.EnumerateFiles(
                Path.GetDirectoryName(
                        Assembly.GetExecutingAssembly().Location) ?? string.Empty,
                        $&amp;quot;{RootNamespace}.*&amp;quot;)
                     .Where(IsExeOrDll)
                     .Select(Assembly.LoadFrom)
                     .Select(assembly =&amp;gt; 
                        TryCatchIgnore(
                            () =&amp;gt; AppDomain.CurrentDomain.Load(assembly.GetName())))
                     .ToList();

    static bool IsExeOrDll(string path)
        =&amp;gt; ExecutableExtensions.Any(
            extension =&amp;gt; 
                extension.Equals(
                    Path.GetExtension(path), 
                    StringComparison.OrdinalIgnoreCase));

    static T TryCatchIgnore&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; func) {
        try { return func(); }
        catch { return default; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step two, is really the entry point of our core functionality for the test itself. We&amp;rsquo;ll need a &lt;code&gt;Fact&lt;/code&gt; test method. Yes, &lt;a href=&#34;http://davidpine.net/blog/xunit-powered-by-roslyn&#34; target=&#34;_blank&#34;&gt;I&amp;rsquo;m a HUGE fan of &lt;strong&gt;xUnit&lt;/strong&gt;&lt;/a&gt; - they have done some amazing things! In this test method we will start by getting all the types that are a subclass of &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Fact]
public void AllActionsOrParentControllerHaveAuthorizationAttributeTest()
{
    var allControllers = GetAllControllerTypes();

    // we&#39;ll continue here ...
}

static List&amp;lt;Type&amp;gt; GetAllControllerTypes()
    =&amp;gt; AppDomain.CurrentDomain
                .GetAssemblies()
                .Where(a =&amp;gt; a.FullName.StartsWith(RootNamespace))
                .SelectMany(a =&amp;gt; a.GetTypes()
                                  .Where(t =&amp;gt; t.FullName.Contains(Controller)
                                           || t.BaseType == ControllerType
                                           || t.DeclaringType == ControllerType))
                .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have all the controller types from all the assemblies loaded into our &lt;code&gt;AppDomain&lt;/code&gt;, we need to filter them. We need to find the types that are missing the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;, we&amp;rsquo;ll call these &lt;code&gt;unauthorizedControllers&lt;/code&gt; for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Fact]
public void AllActionsOrParentControllerHaveAuthorizationAttributeTest()
{
    var allControllers = GetAllControllerTypes();
    var unauthorizedControllers = 
        GetControllerTypesThatAreMissing&amp;lt;AuthorizeAttribute&amp;gt;(allControllers);

    // We&#39;ll continue from here...
}

static List&amp;lt;Type&amp;gt; GetControllerTypesThatAreMissing&amp;lt;TAttribute&amp;gt;(
    IEnumerable&amp;lt;Type&amp;gt; types)
    where TAttribute : Attribute
    =&amp;gt; types.Where(t =&amp;gt; t.GetCustomAttribute&amp;lt;TAttribute&amp;gt;() == null)
            .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method iterates through the given &lt;code&gt;IEnumerable&amp;lt;Type&amp;gt;&lt;/code&gt; and returns a &lt;code&gt;List&amp;lt;Type&amp;gt;&lt;/code&gt; that are not attributed with the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;. The reason that we&amp;rsquo;re filtering out controller types that are attributed, is that we&amp;rsquo;ll consider them to be protected from the standpoint of our unit-testing capabilities. Now, we need to find all the methods on these types that match the following criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are a &lt;code&gt;public&lt;/code&gt; instance method&lt;/li&gt;
&lt;li&gt;Have any &lt;code&gt;HttpMethodAttribute&lt;/code&gt; subclass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These methods are the controller&amp;rsquo;s actions. From these actions, we need to find the unauthorized actions. This is done by filtering out actions that explicitly declare themselves with the &lt;code&gt;AllowAnonymousAttribute&lt;/code&gt; and are also missing the &lt;code&gt;AuthorizeAttribute&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var controller in unauthorizedControllers)
{
    var actions =
        controller.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                    .Where(m =&amp;gt; m.GetCustomAttributes&amp;lt;HttpMethodAttribute&amp;gt;().Any())
                    .ToList();

    var unauthorizedActions = 
        actions.Where(
            action =&amp;gt; 
                action.GetCustomAttribute&amp;lt;AuthorizeAttribute&amp;gt;() == null &amp;amp;&amp;amp;
                action.GetCustomAttribute&amp;lt;AllowAnonymousAttribute&amp;gt;() == null)
               .ToList();
    
    // If unauthorizedActions.Any() is true, sound the alarms!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add a few additional sanity checks along the way - with the caveat that this is not your typical &amp;ldquo;unit test&amp;rdquo;. For example we could add the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assert that we do in fact load assemblies&lt;/li&gt;
&lt;li&gt;Assert that count of all the controllers is greater than the unauthorized controllers&lt;/li&gt;
&lt;li&gt;Assert that we find our &amp;ldquo;white-listed&amp;rdquo; controller&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;putting-it-all-together:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Putting It All Together&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Routing;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Xunit;

namespace IEvangelist.Tests
{
    public class ActionTests
    {
        const string RootNamespace = nameof(_Evangelist);
        const string Controller = nameof(Controller);
        const string WhiteListed = nameof(UnauthorizedActionInController.GetZero);

        static readonly Type ControllerType = typeof(Controller);
        static readonly string[] ExecutableExtensions = { &amp;quot;.exe&amp;quot;, &amp;quot;.dll&amp;quot; };

        public ActionTests()
            =&amp;gt; LoadAllAssemblies();

        void LoadAllAssemblies()
        {
            var assemblies =
                Directory.EnumerateFiles(
                    Path.GetDirectoryName(
                            Assembly.GetExecutingAssembly().Location) ?? string.Empty,
                            $&amp;quot;{RootNamespace}.*&amp;quot;)
                        .Where(IsExeOrDll)
                        .Select(Assembly.LoadFrom)
                        .Select(assembly =&amp;gt; 
                            TryCatchIgnore(
                                () =&amp;gt; AppDomain.CurrentDomain.Load(assembly.GetName())))
                        .ToList();

            Assert.False(assemblies.IsNullOrEmpty());        
        }

        [Fact]
        public void AllActionsOrParentControllerHaveAuthorizationAttributeTest()
        {
            var allControllers = GetAllControllerTypes();
            var unauthorizedControllers = 
                GetControllerTypesThatAreMissing&amp;lt;AuthorizeAttribute&amp;gt;(allControllers);
            
            Assert.True(allControllers.Count &amp;gt; unauthorizedControllers.Count);
            
            foreach (var controller in unauthorizedControllers)
            {
                var actions =
                    controller.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                              .Where(m =&amp;gt; m.GetCustomAttributes&amp;lt;HttpMethodAttribute&amp;gt;().Any())
                              .ToList();

                var unauthorizedActions = 
                    actions.Where(
                        action =&amp;gt; 
                            action.GetCustomAttribute&amp;lt;AuthorizeAttribute&amp;gt;() == null &amp;amp;&amp;amp;
                            action.GetCustomAttribute&amp;lt;AllowAnonymousAttribute&amp;gt;() == null)
                           .ToList();

                if (unauthorizedActions.IsNullOrEmpty() ||
                   (unauthorizedActions.Count == 1 &amp;amp;&amp;amp; 
                    unauthorizedActions[0].Name == WhiteListed))
                {
                    continue;
                }

                unauthorizedActions.ForEach(
                    action =&amp;gt; Console.WriteLine($&amp;quot;{action} is unauthorized!&amp;quot;));

                Assert.True(false, $&amp;quot;Unauthorized action(s) found!&amp;quot;);
            }
        }

        static List&amp;lt;Type&amp;gt; GetAllControllerTypes()
            =&amp;gt; AppDomain.CurrentDomain
                        .GetAssemblies()
                        .Where(a =&amp;gt; a.FullName.StartsWith(RootNamespace))
                        .SelectMany(a =&amp;gt; a.GetTypes()
                                          .Where(t =&amp;gt; t.FullName.Contains(Controller) ||
                                                      t.BaseType == ControllerType ||
                                                      t.DeclaringType == ControllerType))
                        .ToList();

        static List&amp;lt;Type&amp;gt; GetControllerTypesThatAreMissing&amp;lt;TAttribute&amp;gt;(
            IEnumerable&amp;lt;Type&amp;gt; types)
            where TAttribute : Attribute
            =&amp;gt; types.Where(t =&amp;gt; t.GetCustomAttribute&amp;lt;TAttribute&amp;gt;() == null)
                    .ToList();

        static bool IsExeOrDll(string path)
            =&amp;gt; ExecutableExtensions.Any(
                extension =&amp;gt; 
                    extension.Equals(
                        Path.GetExtension(path), 
                        StringComparison.OrdinalIgnoreCase));

        static T TryCatchIgnore&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; func) {
            try { return func(); }
            catch { return default; }
        }
    }

    public class UnauthorizedTestController 
        : Controller
    {
    }

    public class UnauthorizedActionInController 
        : Controller
    {
        [HttpGet]
        public int GetZero() =&amp;gt; 0;

        [Authorize, HttpPost]
        public IActionResult Post([FromBody] int number) =&amp;gt; Ok();

        [OverrideAge, HttpDelete]
        public IActionResult Delete() =&amp;gt; Ok();
    }
    
    public class OverrideAge : Authorize {  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:62ff3a2cc4e15c531086d495140b895f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This solution is not perfect, it has a lot of opportunity for improvement. I&amp;rsquo;m open to suggestions&amp;hellip; If you have an idea, drop it in the comments and feel free to share your source. Likewise, if you like this idea - let me know. I was hoping to eventually find a way to turn this into a &lt;strong&gt;C# Roslyn-Powered Analyzer&lt;/strong&gt; but I&amp;rsquo;m not sure that is possible. There is one fact that remains, this has actually proven itself useful - there have been several times where this test failed as a result of someone (myself included) forgot to apply the appropriate security attributes to an &lt;strong&gt;ASP.NET Core Web API&lt;/strong&gt; endpoint we were writing. I hope that this can help you too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core Configuration Tips</title>
      <link>http://davidpine.net/blog/asp-net-core-configuration/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/asp-net-core-configuration/</guid>
      <description>

&lt;p&gt;Being a software developer, it&amp;rsquo;s in our nature to configure various aspects of the applications that we write. With &lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuring our applications is really straight forward. Luckily, there is a lot of really well written documentation surrounding this topic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?tabs=basicconfiguration&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-file-text&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; ASP.NET Core - Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-file-text&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; ASP.NET Core - Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, there is still room for improvement. I&amp;rsquo;ve prepared a few tips that can enhance developer productivity by taking advantage of various C# features.&lt;/p&gt;

&lt;h2 id=&#34;c-class-json:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;C# Class &amp;lt; &amp;ndash; &amp;gt; JSON&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuration via the &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;IOptionsSnapshot&amp;lt;T&amp;gt;&lt;/code&gt; have been around for a long time. Their usage is a first class citizen within &lt;strong&gt;ASP.NET Core&lt;/strong&gt; applications, and work to tie &lt;code&gt;appsettings.json&lt;/code&gt; values to corresponding configuration &lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_old_CLR_object&#34; target=&#34;_blank&#34;&gt;POCO&amp;rsquo;s&lt;/a&gt;. As a refresher on configuration, there is a one-to-one relationship between a JSON object in the &lt;code&gt;appsettings.json&lt;/code&gt; and the C# class that represents it.&lt;/p&gt;

&lt;h3 id=&#34;appsettings-json:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;&lt;code&gt;appsettings.json&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;notificationSettings&amp;quot;: {
        &amp;quot;notificationInterval&amp;quot;: &amp;quot;00:15:00&amp;quot;,
        &amp;quot;isMulticast&amp;quot;: true,
        &amp;quot;sources&amp;quot;: [
            {
                &amp;quot;url&amp;quot;: &amp;quot;http://www.contoso.com/notificationHub&amp;quot;,
                &amp;quot;key&amp;quot;: &amp;quot;f7ea5e2b22bf907344f3a780caa0a166&amp;quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notificationsettings-cs-and-notificationsource-cs:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;&lt;code&gt;NotificationSettings.cs&lt;/code&gt; and &lt;code&gt;NotificationSource.cs&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NotificationSettings
{
    public TimeSpan NotificationInterval { get;set; }
    public TimeSpan TimeoutInterval { get; set; }
    public bool IsImplicit { get; set; }
    public List&amp;lt;NotificationSource&amp;gt; Sources { get; set; }

    public NotificationSetting()
    {
        IsImplicit = true;
        TimeoutInterval = TimeSpan.FromSeconds(30);
    }
}

public class NotificationSource
{
    public Uri Url { get; set; }
    public string Key { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you looked at both the &lt;code&gt;appsettings.json&lt;/code&gt; and the two C# classes, I&amp;rsquo;m hoping that you noticed something. I hope that you noticed that the JSON settings didn&amp;rsquo;t fully provide a value for all the mapped properties in the &lt;code&gt;NotificationSettings&lt;/code&gt; object. We have however, set these values as part of the object&amp;rsquo;s &lt;code&gt;.ctor&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;cite&gt;&lt;strong&gt;ProTip&lt;/strong&gt;&lt;/cite&gt;
Use C# 6 Property Initializers to set default values. If the corresponding property exists in the JSON object mapping, it will be overwritten as to be expected; however, if omitted your default value is used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using property initializers, this is simplified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NotificationSettings
{
    public TimeSpan NotificationInterval { get;set; }
    public TimeSpan TimeoutInterval { get; set; } = TimeSpan.FromSeconds(30);
    public bool IsImplicit { get; set; } = true;
    public List&amp;lt;NotificationSource&amp;gt; Sources { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is a good practice to specify default values for your settings classes. As part of the &lt;code&gt;Startup.cs&lt;/code&gt; class, the &lt;code&gt;ConfigureServices&lt;/code&gt; method is where you will &amp;ldquo;Configure&amp;rdquo; your mappings of the JSON section that is associated to the C# object representing it. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(
    IServiceCollection services)
{
    // Configure the &amp;quot;NotificationSettings&amp;quot;
    // mapping it to the corresponding JSON section

    services.Configure&amp;lt;NotificationSettings&amp;gt;(
        Configuration.GetSection(&amp;quot;NotificationSettings&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should look very familiar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;cite&gt;&lt;strong&gt;ProTip&lt;/strong&gt;&lt;/cite&gt;
Use C# 6 &lt;code&gt;nameof&lt;/code&gt; operator to configure your C# class mapping. This alleviates the usage of magic strings and enforces a consistent naming convention.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The change is tiny, however; this is another great usage of the &lt;code&gt;nameof&lt;/code&gt; operator. This assumes that the the section in the JSON file matches the name of the class object representing it. Additionally, it serves as a reason to keep the names matching.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(
    IServiceCollection services)
{
    services.Configure&amp;lt;NotificationSettings&amp;gt;(
        Configuration.GetSection(nameof(NotificationSettings));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:edf2d12af56b1a72bd8b2330f7d37998&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have provided a few simple tips for &lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuration leveraging a few C# 6 features. They are nothing earth-shattering, but they are practical and very useful. I often see developers &lt;em&gt;not&lt;/em&gt; taking advantage of simple features like these when they are available. These two features alone in an &lt;strong&gt;ASP.NET Core&lt;/strong&gt; configuration could simplify refactoring and stream-line readability &amp;ndash; that&amp;rsquo;s enough reason for me, I hope it is for you too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C# Special Edition</title>
      <link>http://davidpine.net/blog/csharp-special-edition/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/csharp-special-edition/</guid>
      <description>

&lt;p&gt;Welcome to the 17th day of the &lt;a href=&#34;https://crosscuttingconcerns.com/The-First-C-Advent-Calendar&#34; target=&#34;_blank&#34;&gt;C# Advent Calendar&lt;/a&gt;. I&amp;rsquo;d like to take a moment to thank my fellow bloggers who are sharing their passion of C# with everyone following the C# Advent Calendar. Please, share this and their posts - help us all make C# even more widely adopted than it is today.&lt;/p&gt;

&lt;h1 id=&#34;in-the-beginning:83517bab67fab26f20ee96795daa710a&#34;&gt;In the Beginning&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m honored to blog about my favorite programming language, C#. There is an often forgotten truth about the history of C#, one truth that I like talking about. While C# is a really &amp;ldquo;cool&amp;rdquo; language with awesome features it was actually named &amp;ldquo;Cool&amp;rdquo; in the beginning!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; In January 1999, &lt;em&gt;Anders Hejlsberg&lt;/em&gt; formed a team to build a new language at the time called Cool, which stood for &amp;ldquo;C-like Object Oriented Language&amp;rdquo;. Microsoft had considered keeping the name &amp;ldquo;Cool&amp;rdquo; as the final name of the language, but chose not to do so for trademark reasons.
&lt;cite&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&#34; target=&#34;_blank&#34;&gt;Wiki - C#&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Likewise, the name C# somewhat implies an increment of C++. Imagine, the &lt;code&gt;++&lt;/code&gt; being stacked on-top of each other &amp;ndash; you&amp;rsquo;d have something resembling the &lt;code&gt;#&lt;/code&gt; symbol, clever no?! Unfortunately, my career didn&amp;rsquo;t start with such a cool language. I learned &lt;em&gt;Java&lt;/em&gt; in college and started my career with &lt;em&gt;Visual Basic&lt;/em&gt;. I am now grateful to develop in C# professionally and for fun!&lt;/p&gt;

&lt;h3 id=&#34;it-is-going-to-be-around-for-a-while:83517bab67fab26f20ee96795daa710a&#34;&gt;It is going to be around for a while&lt;/h3&gt;

&lt;p&gt;From all the languages in the &lt;code&gt;.NET&lt;/code&gt; stack, C# is the most prolific.&lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;Visual Basic&lt;/strong&gt; lovers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vb&#34;&gt;Throw New System.Exception(&amp;quot;Tomatoes!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;strong&gt;F#&lt;/strong&gt; enthusiasts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;raise (new Exception(&amp;quot;their fists in anger!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The language continues to evolve and innovate. According to the annual &lt;strong&gt;&lt;i class=&#34;fa fa-stack-overflow&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Stack Overflow&lt;/strong&gt; developer survey, &lt;a href=&#34;https://insights.stackoverflow.com/survey/2017#technology-programming-languages&#34; target=&#34;_blank&#34;&gt;C# is the 4th most popular programming language in the world&lt;/a&gt;. And since we&amp;rsquo;re talking about &lt;strong&gt;&lt;i class=&#34;fa fa-stack-overflow&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Stack Overflow&lt;/strong&gt;, it is noteworthy to mention that 

    
        
    

    &lt;a href=&#34;https://stackoverflow.com/users/22656/jon-skeet&#34; target=&#39;_blank&#39;&gt;Jon Skeet&lt;/a&gt;

 is nearing 1 million reputation points &amp;ndash; and he&amp;rsquo;s projecting this will occur mid January. Roughly 55% of all his contributions are for C#, yet he is a Java developer. This never ceases to amaze me!&lt;/p&gt;

&lt;h1 id=&#34;getting-started:83517bab67fab26f20ee96795daa710a&#34;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;I believe that Microsoft has done an amazing job at not only updating their documentation sites, but unifying them and enhancing the user experience tenfold. The sites seem to flow more naturally while delivering relevant content, and as a developer that is what I want from a resource.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; The &lt;a href=&#34;www.javascript.com&#34; target=&#34;_blank&#34;&gt;JavaScript.com&lt;/a&gt; website has one of the best getting started experiences on the web today.
&lt;cite&gt;Maria Naggaga &amp;ndash; Keynote &amp;ldquo;It Starts With A Search&amp;rdquo;, MKE DOT NET 2017&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is more natural for JavaScript to have an online tutorial than C#, but Microsoft made this happen regardless. They have an awesome series of &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/index&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;quick starts&amp;rdquo;&lt;/a&gt; that serve as tutorials. They introduced an in-browser REPL (Read-Eval-Print Loop) for C#, and it is amazing. Here is a listing of a few of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/hello-world&#34; target=&#34;_blank&#34;&gt;Hello C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/numbers-in-csharp&#34; target=&#34;_blank&#34;&gt;Numbers in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/branches-and-loops&#34; target=&#34;_blank&#34;&gt;Branches and loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/list-collection&#34; target=&#34;_blank&#34;&gt;Collections in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/introduction-to-classes&#34; target=&#34;_blank&#34;&gt;Introduction to classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you&amp;rsquo;re developing you can always rely on the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/&#34; target=&#34;_blank&#34;&gt;C# Guide&lt;/a&gt; as well. Finally, the documentation site boasts &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/samples-and-tutorials/&#34; target=&#34;_blank&#34;&gt;Samples and Tutorials&lt;/a&gt; for a more in depth look.&lt;/p&gt;

&lt;h1 id=&#34;speaking-fluently:83517bab67fab26f20ee96795daa710a&#34;&gt;Speaking Fluently&lt;/h1&gt;

&lt;p&gt;C# is a beautiful language with an elegant syntax which is simple, powerful and expressive. Backed by an superb developer experience from Visual Studio, you can quickly immerse yourself into any project. What would a C# post be without some code? Not much of a post at all. Since this is a special edition, let&amp;rsquo;s have a look at something I found interesting and insightful from C# 7. I wrote a post about &lt;a href=&#34;blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;exploring C# 7&lt;/a&gt; if you&amp;rsquo;d like a refresher.&lt;/p&gt;

&lt;p&gt;C# 7.0 featured &lt;code&gt;out&lt;/code&gt; variables, which enable inline declaration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class StringExtensions
{
    // The declaration is inlined with the out keyword
    // We can use &#39;var&#39;, as the type int is known
    // The &#39;result&#39; variable is scope &amp;quot;leaks&amp;quot; to scope of the method body
    public static int ToInt32(string input)
        =&amp;gt; int.TryParse(input, out var result)) ? result : result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now write super expressive, inlined &lt;code&gt;.TryParse&lt;/code&gt; logic. I wanted to call attention to an issue that I ran into where I made an assumption. The lesson of the story is to never make an assumption, right?! &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/916&#34; target=&#34;_blank&#34;&gt;Here is the issue as it exists on &lt;strong&gt;&lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; GitHub&lt;/strong&gt; today.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
        =&amp;gt; (queue?.TryPeek(out T result) ?? false) ? result : default;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in the following compiler error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Error CS0165 Use of unassigned local variable &amp;lsquo;result&amp;rsquo; IEvangelist.Csharp.Seven&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see this does not currently work in C#, but I assumed it would. Let&amp;rsquo;s break it down and figure out why. First, let&amp;rsquo;s remove the single line expression and make it non-ternary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
    {
        if (queue?.TryPeek(out T result) ?? false)
        {
            return result;
        }

        return default;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first expression within the &lt;code&gt;if&lt;/code&gt; block tests if the &lt;code&gt;queue&lt;/code&gt; parameter in context is &lt;code&gt;null&lt;/code&gt;. If it is &lt;code&gt;null&lt;/code&gt;, it will coalesce to &lt;code&gt;false&lt;/code&gt;. If it is not &lt;code&gt;null&lt;/code&gt;, then if will evaluate the returning result from the &lt;code&gt;.TryPeek&lt;/code&gt; invocation. When the if block is evaluated to be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; - after evaluation we know that the &lt;code&gt;result&lt;/code&gt; variable has been definitely assigned. Here is the spec on &lt;strong&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/spec/variables.md#definite-assignment&#34; target=&#34;_blank&#34;&gt;definite assignment&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; At a given location in the executable code of a function member, a variable is said to be definitely assigned if the compiler can prove, by a particular static flow analysis (&lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/spec/variables.md#precise-rules-for-determining-definite-assignment&#34; target=&#34;_blank&#34;&gt;Precise rules for determining definite assignment&lt;/a&gt;), that the variable has been automatically initialized or has been the target of at least one assignment.
&lt;cite&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/spec/variables.md#definite-assignment&#34; target=&#34;_blank&#34;&gt;C# Language - &lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; GitHub&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
    {
        if (queue == null)
        {
            return default;
        }

        // The &#39;result&#39; variable leaks to this outer scope.
        // But with the previous eager evaluation and corresponding early exit
        // the &#39;result&#39; is never accessed.
        // As such, it is not &amp;quot;definitely assigned&amp;quot;.
        if (queue.TryPeek(out T result))
        {
            return result;
        }

        return default;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to the non-inlined usage of &lt;code&gt;out&lt;/code&gt; variable declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ConcurrentExtensions
{
    public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
    {
        // The `result` variable may never be accessed.
        if (queue != null)
        {
            T result;
            if (queue.TryPeek(out result))
            {
                return result;
            }
        }

        return default;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are more verbose equivalents in terms of functionality, some with eager evaluation paired with an early exit. Both of these versions compile and would work as you&amp;rsquo;d expect them to. There is talk about getting better support for flow analysis, beyond definite assignment &amp;ndash; I for one would love that. TypeScript has been doing a great job at this, thanks to Anders and company!&lt;/p&gt;

&lt;p&gt;The issue still has a sense of illusion. Yes, as &lt;a href=&#34;https://twitter.com/gafter&#34; target=&#34;_blank&#34;&gt;Neal Gafter&lt;/a&gt; stated I would like definite assignment (which is part of flow analysis) to infer that the variable is only referenced where it was definitely assigned in this case. I&amp;rsquo;m happy that it&amp;rsquo;s been labeled as a &lt;em&gt;Feature Request&lt;/em&gt; and &lt;em&gt;Discussion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Does that seem reasonable? If not, why? If so, please &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/916&#34; target=&#34;_blank&#34;&gt;visit the issue&lt;/a&gt; and &lt;i class=&#34;fa fa-thumbs-up&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;! I&amp;rsquo;m thrilled that C# is open source and the community is able to contribute in ways such as this. I hope that after reading this you might be inspired to get involved.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Why procrastinate today, when you can procrastinate tomorrow?
&lt;cite&gt;&lt;a href=&#34;https://twitter.com/reverentgeek&#34; target=&#34;_blank&#34;&gt;David Neal&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;counting-my-blessings:83517bab67fab26f20ee96795daa710a&#34;&gt;Counting my blessings&lt;/h3&gt;

&lt;p&gt;I consider myself to be very fortunate. I work with the owner of &lt;a href=&#34;https://travelswithedwina.com/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Edwina&amp;rdquo;&lt;/a&gt;, who has been patiently teaching and coaching me through the better part of three years of my career. She used to teach algorithms and C# at the Milwaukee School of Engineering (MSOE). I have learned so much from her about C#, language semantics, algebraic reduction, etc&amp;hellip;and I&amp;rsquo;m grateful for that. She has certainly made me a more pragmatic developer. I encourage everyone to find someone who can inspire, motivate or mentor them.&lt;/p&gt;

&lt;h1 id=&#34;final-thoughts:83517bab67fab26f20ee96795daa710a&#34;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Go learn C#! If you already know it, mentor someone who wants to learn it. Happy Holidays and please support my fellow bloggers as they share their passion for C# with you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xUnit Roslyn Analyzers</title>
      <link>http://davidpine.net/blog/xunit-powered-by-roslyn/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/xunit-powered-by-roslyn/</guid>
      <description>

&lt;style&gt;p { opacity: 1 !important; }&lt;/style&gt;

&lt;h1 id=&#34;intro:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;At my day job, I wear many hats. I&amp;rsquo;m currently wearing the &amp;ldquo;upgrade our team&amp;rsquo;s tooling&amp;rdquo; hat. &lt;strong&gt;I counted 99&lt;/strong&gt; &lt;code&gt;*.xproj&lt;/code&gt; and &lt;code&gt;project.json&lt;/code&gt; based projects spanning four repositories that need to be updated to the revitalized &lt;code&gt;*.csproj&lt;/code&gt; project format. With this the team can upgrade to the latest version of Visual Studio (finally upgrading to 2017 from 2015) and start taking advantage of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supported tooling, no longer on preview tooling bits&lt;/li&gt;
&lt;li&gt;Allows us to &lt;a href=&#34;blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;explore C# 7&lt;/a&gt; (and &lt;a href=&#34;blog/csharp-seven-dot-one&#34; target=&#34;_blank&#34;&gt;peruse C# 7.1&lt;/a&gt;) with production code&lt;/li&gt;
&lt;li&gt;Leverage the latest SDK and &lt;code&gt;.NET Core&lt;/code&gt; CLI&lt;/li&gt;
&lt;li&gt;Other obvious reasons&lt;/li&gt;
&lt;li&gt;And so on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upgrading tooling is not always glamorous, but there are times that I find myself excited. I thoroughly enjoy learning about the new tooling innovations and efforts around simplifying the development work-flow, especially when it involves C# and Visual Studio.&lt;/p&gt;

&lt;h2 id=&#34;an-omg-wtf-moment:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;An &amp;ldquo;OMG, WTF&amp;rdquo; Moment&lt;/h2&gt;

&lt;p&gt;I mandate that our projects &lt;em&gt;&amp;ldquo;treat warnings as errors&amp;rdquo;&lt;/em&gt;. After migrating the first solution over, 15 of the 30 projects had compilation errors. It&amp;rsquo;s worth mentioning that we maintain a 1-to-1 ratio between class libraries and unit-test projects. Much to my surprise the 15 projects that had compilation errors were only unit-test projects. The reason that they stopped compiling was due to seemingly countless &lt;strong&gt;xUnit&lt;/strong&gt; warnings, generated by various &lt;strong&gt;Roslyn&lt;/strong&gt; analyzers. I was shocked by the number of warnings that were discovered.&lt;/p&gt;

&lt;h2 id=&#34;the-realization:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;The Realization&lt;/h2&gt;

&lt;p&gt;As one might imagine &amp;ndash; there are a lot of unit tests in 15 projects. This was an opportunity for &lt;strong&gt;Roslyn&lt;/strong&gt; and &lt;strong&gt;xUnit&amp;rsquo;s&lt;/strong&gt; analyzers to shine, and shine they did! At first I was frustrated&amp;hellip;thinking something like &amp;ldquo;FML, of course there is an issue&amp;rdquo; but upon further investigation I discovered that these were all perfectly reasonable warnings. In fact, several of them made me question how some tests ever passed at all. I was impressed by the power of this tooling addition. While &lt;strong&gt;Roslyn&lt;/strong&gt; has been around for a while, I have not personally observed a large uptake in its abilities. Needless to say, I was thrilled to see the &lt;strong&gt;xUnit&lt;/strong&gt; team leveraging it so much &amp;ndash; this is inspiring!&lt;/p&gt;

&lt;p&gt;Visual Studio 2017 will display the analyzers that are available within a project under Dependencies &amp;gt; Analyzers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2017/11/analyzers.png&#34; alt=&#34;Analyzers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see they have put a lot of thought and effort into this. There are tons of various rules,&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/&#34; target=&#34;_blank&#34;&gt;here is a comprehensive listing of them all.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-github-com-xunit-xunit-target-blank-i-class-fa-fa-github-square-aria-hidden-true-i-xunit-a:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;&lt;a href=&#34;https://github.com/xunit/xunit&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; xUnit&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m dating my &lt;strong&gt;xUnit&lt;/strong&gt; efforts here a bit, but I&amp;rsquo;ve been a fan of &lt;strong&gt;xUnit&lt;/strong&gt; for a long time now! Back in the days of &amp;ldquo;DNX&amp;rdquo;, or as Scott Addie might ask &lt;a href=&#34;https://twitter.com/Scott_Addie/status/928021703619379201&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;DMX?&amp;rdquo;&lt;/a&gt;. In a time when I was still on &lt;a href=&#34;https://ievangelistblog.wordpress.com/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-wordpress&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Wordpress&lt;/a&gt;, before I was enlightened my Steve Hicks who says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; If you aren&amp;rsquo;t putting out as many posts as BuzzFeed, you can probably just build your blog statically
&lt;cite&gt;&lt;a href=&#34;https://twitter.com/pepopowitz&#34; target=&#34;_blank&#34;&gt;Steve Hicks&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ievangelistblog.wordpress.com/2016/02/12/asp-net-core-1-0-unit-testing/&#34; target=&#34;_blank&#34;&gt;Here is a post&lt;/a&gt; from February 2016 where I flexed some of the &lt;strong&gt;xUnit&lt;/strong&gt; capabilities. Again, I&amp;rsquo;ve been a fan of &lt;strong&gt;xUnit&lt;/strong&gt; for a long time now. It is incredibly&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-github-com-dotnet-roslyn-target-blank-i-class-fa-fa-github-square-aria-hidden-true-i-roslyn-a:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Roslyn&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re unfamiliar with &lt;strong&gt;Roslyn&lt;/strong&gt;, it is the &lt;code&gt;.NET&lt;/code&gt; Compiler Platform.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Roslyn provides open-source C# and Visual Basic compilers with rich code analysis APIs. It enables building code analysis tools with the same APIs that are used by Visual Studio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visual Studio relies on &lt;strong&gt;Roslyn&lt;/strong&gt; for lots of things. All of the aforementioned &lt;strong&gt;xUnit&lt;/strong&gt; rules are defined as &lt;strong&gt;Roslyn&lt;/strong&gt; analyzers. These analyzers are executed within Visual Studio, providing a great developer experience. They help you write better code.&lt;/p&gt;

&lt;h2 id=&#34;visual-studio-warnings:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Visual Studio &amp;ndash; Warnings&lt;/h2&gt;

&lt;p&gt;This section will serve as a brief listing of some of the warnings that I encountered. When writing a unit-test that uses &lt;code&gt;Theory&lt;/code&gt; paired with &lt;code&gt;InlineData&lt;/code&gt;, if there are duplicates &amp;ndash; this is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit1025&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 1025&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/inline-dup.png&#34; alt=&#34;Inline Duplicate&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you mistakenly define a unit-test method parameter that is not used, it&amp;rsquo;s flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit1026&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 1026&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/remove-parameter.png&#34; alt=&#34;Remove Parameter&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your unit-test is attempting to check whether a collection &amp;ldquo;does not contain&amp;rdquo; something, and does so with an &lt;code&gt;Assert.False(collection.Any(...));&lt;/code&gt; &amp;ndash; it is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2012&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 2012&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/use-doesnotcontain.png&#34; alt=&#34;Use Does Not Contain&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one might be my favorite &amp;ndash; if you incorrectly &lt;code&gt;Assert.NotNull&lt;/code&gt; on a value-type (that can never be &lt;code&gt;null&lt;/code&gt;) &amp;ndash; it is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2002&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 2002&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/remove-call.png&#34; alt=&#34;Remove Call&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you call &lt;code&gt;Assert.Equal&lt;/code&gt; and the expected argument is &lt;code&gt;null&lt;/code&gt; &amp;ndash; it is flagged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2003&#34; target=&#34;_blank&#34; title=&#34;xUnit Warning 2003&#34;&gt;
&lt;img src=&#34;http://davidpine.net/img/2017/11/use-null.png&#34; alt=&#34;Use Null&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also ran into two variations of the &lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/xUnit2013&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;xUnit:2013&lt;/strong&gt; warning&lt;/a&gt; which states the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Do not use equality check to check for collection size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In one scenario I had some unit test code similar to &lt;code&gt;Assert.Equal(0, values.Count);&lt;/code&gt;, the analyzer instead suggested &lt;code&gt;Assert.Empty(values);&lt;/code&gt;. This was my intent anyways, so of course I was happy to accept the recommended change.&lt;/p&gt;

&lt;p&gt;Likewise I had an &lt;code&gt;Assert.Equal(1, values.Count);&lt;/code&gt; and the analyzer suggested &lt;code&gt;Assert.Single(values);&lt;/code&gt;. I was ensuring that the collection had only a single value, so once again &lt;strong&gt;xUnit&lt;/strong&gt; was correct. Again, my appreciation for this tooling enhancement cannot be overstated.&lt;/p&gt;

&lt;h1 id=&#34;thank-you:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Thank you&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I am so pleased with the &lt;a href=&#34;https://twitter.com/xunit?ref_src=twsrc%5Etfw&#34;&gt;@xunit&lt;/a&gt; team&amp;#39;s &lt;a href=&#34;https://twitter.com/roslyn?ref_src=twsrc%5Etfw&#34;&gt;@roslyn&lt;/a&gt; analyzers, &lt;a href=&#34;https://t.co/DAVuVsAGmQ&#34;&gt;https://t.co/DAVuVsAGmQ&lt;/a&gt;. These are amazing, literally changing the unit testing game. I literally love everything about what xUnit has done for C# unit testing. &lt;a href=&#34;https://t.co/ROrNQAf6NW&#34;&gt;pic.twitter.com/ROrNQAf6NW&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Pine (MVP) (@davidpine7) &lt;a href=&#34;https://twitter.com/davidpine7/status/928805436761010176?ref_src=twsrc%5Etfw&#34;&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-reading:53d9ca9c856383cc5b4e97dad7c4954d&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re curious about &lt;strong&gt;xUnit&lt;/strong&gt; or &lt;strong&gt;Roslyn&lt;/strong&gt;, please checkout the resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xunit/xunit&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; xUnit &amp;ndash; GitHub.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &amp;nbsp; xUnit Analyzer Rules &amp;ndash; GitHub.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Demystifying .NET Standard</title>
      <link>http://davidpine.net/blog/dot-net-standard-demystified/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/dot-net-standard-demystified/</guid>
      <description>

&lt;h1 id=&#34;intro:25e21f0afa689597cb12cf94537509e8&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Monday, August 14&lt;sup&gt;th&lt;/sup&gt; was an amazing day to be a &lt;code&gt;.NET&lt;/code&gt; developer! As the world celebrates another triumphant series of announcements from Microsoft, there is still confusion amongst the masses.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; What is this &lt;code&gt;.NET Standard&lt;/code&gt; thing?
&lt;p/&gt; What does it mean to target &lt;code&gt;.NET Standard&lt;/code&gt; versus &lt;code&gt;.NET Core&lt;/code&gt;, or even the &lt;code&gt;.NET Framework&lt;/code&gt;?
&lt;p/&gt; As a developer, what &lt;code&gt;.NET&lt;/code&gt; should I target and why?
&lt;p/&gt; Are Portable Class Libraries (PCLs) dead?
&lt;cite&gt;Developer Community&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All of these questions have already been answered, you just have to know where to look. In this post I will provide some invaluable resources and educate those of you who are still confused.&lt;/p&gt;

&lt;h2 id=&#34;announcements:25e21f0afa689597cb12cf94537509e8&#34;&gt;Announcements&lt;/h2&gt;

&lt;p&gt;Here are all the recent announcements, feel free to spend some time checking them out &amp;ndash; be sure to come back.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/&#34; target=&#34;_blank&#34;&gt;The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/&#34; target=&#34;_blank&#34;&gt;.NET Core 2.0 is available today August 14, as a final release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/&#34; target=&#34;_blank&#34;&gt;The .NET Standard 2.0 specification is now complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudio/2017/08/14/visual-studio-2017-version-15-3-released/&#34; target=&#34;_blank&#34;&gt;Visual Studio 17 version 15.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start by answering all these common questions.&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-docs-microsoft-com-en-us-dotnet-standard-net-standard-target-blank-net-standard-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Standard&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If the name &lt;a href=&#34;https://github.com/terrajobst&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Immo Landwerth&lt;/em&gt;&lt;/a&gt; doesn&amp;rsquo;t ring a bell, perhaps &lt;a href=&#34;https://twitter.com/terrajobst&#34; target=&#34;_blank&#34;&gt;@terrajobst&lt;/a&gt; will? Regardless of whether you&amp;rsquo;ve heard of him before &amp;ndash; you&amp;rsquo;d be wise to remember him now. He is a program manager for Microsoft and has a huge part in the &lt;code&gt;.NET&lt;/code&gt; ecosystem as a whole. Immo has a &lt;code&gt;.NET Standard&lt;/code&gt; video series on &lt;i class=&#34;fa fa-lg fa-youtube&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; and if you do not have time to read this post, by all means &lt;a href=&#34;https://www.youtube.com/playlist?list=PLRAdsfhKI4OWx321A_pr-7HhRNk7wOLLY&#34; target=&#34;_blank&#34;&gt;watch his videos&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;code&gt;.NET Standard&lt;/code&gt; is a specification. It represents a set of APIs that all &lt;code&gt;.NET&lt;/code&gt; platforms have to implement.
&lt;cite&gt;&lt;a href=&#34;https://youtu.be/YI4MurjfMn8?list=PLRAdsfhKI4OWx321A_pr-7HhRNk7wOLLY&amp;t=191&#34; target=&#34;_blank&#34;&gt;Immo Landwerth&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often, the &lt;code&gt;.NET Standard&lt;/code&gt; is mistaken for a runtime. Consider the name &lt;code&gt;.NET Standard&lt;/code&gt; at face value, it has the word &amp;ldquo;standard&amp;rdquo; in it&amp;hellip;because it is not a framework or a core runtime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;code&gt;.NET Standard&lt;/code&gt; isn&amp;rsquo;t a runtime, it&amp;rsquo;s a version interface - a list of methods you can use under many different &amp;ldquo;&lt;code&gt;.NETs&lt;/code&gt;&amp;rdquo;.
&lt;cite&gt;&lt;a href=&#34;https://www.hanselman.com/blog/ExploringRefitAnAutomaticTypesafeRESTLibraryForNETStandard.aspx&#34; target=&#34;_blank&#34;&gt;Scott Hanselman&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As true with all standards (or specifications), implementations can either be compliant or non-compliant. At this point in time there are four &lt;code&gt;.NET&lt;/code&gt; implementations that are &lt;code&gt;.NET Standard 2&lt;/code&gt; compliant. They are as follows, &lt;code&gt;.NET Core&lt;/code&gt;, &lt;code&gt;.NET Framework&lt;/code&gt;, &lt;code&gt;Mono&lt;/code&gt; and &lt;code&gt;Xamarin&lt;/code&gt;. Below is a more comprehensive listing of all the &lt;code&gt;.NET&lt;/code&gt; platforms and their corresponding standard that they implement.&lt;/p&gt;

&lt;h3 id=&#34;the-net-standard-version-table-a-href-https-github-com-dotnet-standard-blob-master-docs-versions-md-net-standard-versions-target-blank-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;The .NET Standard Version Table &lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions.md#net-standard-versions&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;.NET Standard&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.0.md&#34;&gt;1.0&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.1.md&#34;&gt;1.1&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.2.md&#34;&gt;1.2&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.3.md&#34;&gt;1.3&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.4.md&#34;&gt;1.4&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.5.md&#34;&gt;1.5&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md&#34;&gt;1.6&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md&#34;&gt;2.0&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Mono&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Xamarin.iOS&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Xamarin.Mac&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Xamarin.Android&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Universal Windows Platform&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vNext&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vNext&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;vNext&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows Phone&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows Phone Silverlight&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example, we can see the &lt;code&gt;.NET Framework 4.5&lt;/code&gt; is an implementation of &lt;code&gt;.NET Standard 1.1&lt;/code&gt;. This means that if you&amp;rsquo;re to author a &lt;code&gt;.NET Standard&lt;/code&gt; class library and you target &lt;code&gt;1.1&lt;/code&gt; of the standard, it can run on &lt;code&gt;.NET Core 1.0&lt;/code&gt;, &lt;code&gt;.NET Framework 4.5&lt;/code&gt;, &lt;code&gt;Mono 4.6&lt;/code&gt;, etc&amp;hellip; you get the point now I&amp;rsquo;m sure.&lt;/p&gt;

&lt;h4 id=&#34;the-trade-off:25e21f0afa689597cb12cf94537509e8&#34;&gt;The Trade-off&lt;/h4&gt;

&lt;p&gt;There is a bit of a trade-off though that you should consider. With every version of the &lt;code&gt;.NET Standard&lt;/code&gt; there is an inverse relationship to the number of implementations. The higher the version of the &lt;code&gt;.NET Standard&lt;/code&gt;, the more APIs you have access to. However, there are fewer implementations that exist for higher versions of the &lt;code&gt;.NET Standard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is typically advised that you target the lowest version of the standard that you can get away with. This allows your code to run in more places, as there are more implementations of lower versioned standards. Portable Class Libraries (or PCLs) have been replaced by the &lt;code&gt;.NET Standard&lt;/code&gt;. If you&amp;rsquo;re like me, you probably want the latest and greatest &amp;ndash; the fullest set of APIs&amp;hellip;and that is ok. As long as you control the environment in which it&amp;rsquo;s consumed, great!&lt;/p&gt;

&lt;h3 id=&#34;net-api-explorer:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;code&gt;.NET&lt;/code&gt; API Explorer&lt;/h3&gt;

&lt;p&gt;Microsoft has been hard at work, and their documentation teams have been putting together some incredibly useful ways to consume documentation. As a developer, I typically rely on &lt;strong&gt;StackOverflow&lt;/strong&gt; as a source of truth &amp;ndash; however, I have been finding myself spending more time on the official documentation sites. A big &lt;i class=&#34;fa fa-lg fa-thumbs-o-up&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; to the team for making the &lt;code&gt;.NET&lt;/code&gt; docs so much better than before. They even have a &lt;code&gt;.NET&lt;/code&gt; API Explorer. This is immensely powerful &amp;ndash; in a matter of seconds I can quickly explore APIs and determine if something is lacking.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/?view=netstandard-2.0&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2017/08/dot-net-standard-api-explorer.png&#34; alt=&#34;.NET Standard API Explorer&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-docs-microsoft-com-en-us-dotnet-core-target-blank-net-core-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Core&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; &lt;code&gt;.NET Core&lt;/code&gt; is a general purpose development platform maintained by Microsoft and the &lt;code&gt;.NET&lt;/code&gt; community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The obvious advantages are that &lt;code&gt;.NET Core&lt;/code&gt; is cross-platform and open source. Unlike &lt;code&gt;.NET Framework&lt;/code&gt; that is neither of those two things.&lt;/p&gt;

&lt;h2 id=&#34;a-href-https-docs-microsoft-com-en-us-dotnet-framework-target-blank-net-framework-i-class-fa-fa-external-link-aria-hidden-true-i-a:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Framework&lt;/code&gt; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you have been a &lt;code&gt;.NET&lt;/code&gt; developer for more than a few years, then you should already be familiar with the &lt;code&gt;.NET Framework&lt;/code&gt;. This is what you have been developing on and targeting forever. However, with the introduction of &lt;code&gt;.NET Standard&lt;/code&gt; and &lt;code&gt;.NET Core&lt;/code&gt;, that is likely to change. You no longer have to limit your OS or platform to Windows.&lt;/p&gt;

&lt;h2 id=&#34;net-foundation:25e21f0afa689597cb12cf94537509e8&#34;&gt;&lt;code&gt;.NET Foundation&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;With all the &lt;code&gt;.NET&lt;/code&gt; terms flying around the web, it felt appropriate to throw another one at you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; The &lt;code&gt;.NET Foundation&lt;/code&gt; is an independent organization to foster open development and collaboration around the &lt;code&gt;.NET&lt;/code&gt; ecosystem. It serves as a forum for community and commercial developers alike to broaden and strengthen the future of the &lt;code&gt;.NET&lt;/code&gt; ecosystem by promoting openness and community participation to encourage innovation.
&lt;cite&gt;www.dotnetfoundation.org&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be sure to visit their site and get involved!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotnetfoundation.org/&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;http://davidpine.net/img/2017/08/dot-net-fondation.png&#34; alt=&#34;.NET Foundation&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:25e21f0afa689597cb12cf94537509e8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.NET&lt;/code&gt; ecosystem is rapidly evolving! With open source and cross-platform being two key priorities, you&amp;rsquo;re in good hands. When developing for &lt;code&gt;.NET&lt;/code&gt; be familiar with what version of the &lt;code&gt;.NET Standard&lt;/code&gt; suits your needs &amp;ndash; and target accordingly.&lt;/p&gt;

&lt;h3 id=&#34;resources:25e21f0afa689597cb12cf94537509e8&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Standard - Microsoft Docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Core - Microsoft Docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.NET Framework - Microsoft Docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Perusing C# 7.1</title>
      <link>http://davidpine.net/blog/csharp-seven-dot-one/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/csharp-seven-dot-one/</guid>
      <description>

&lt;p&gt;Earlier this year in March &amp;ndash; Visual Studio 2017 was released. With this the world was given C# 7, checkout my post on &lt;a href=&#34;http://davidpine.net/blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Exploring C# 7&amp;rdquo; here&lt;/a&gt;. In this post we will peruse C# 7.1, the first incremental release while C# 8 is being fleshed out.&lt;/p&gt;

&lt;h1 id=&#34;async-main-a-target-blank-href-https-github-com-dotnet-csharplang-issues-97-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;Async Main &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/97&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Since the release of C# 5, developers have either embraced the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords or fumbled along the way feebly attempting to comprehend them. Fear not, you&amp;rsquo;re not alone. Many others have been just as confused, but that&amp;rsquo;s not to say that the language didn&amp;rsquo;t make major strides towards simplifying your development efforts. In fact, I love asynchronous programming and C# makes me very happy with its implementation!&lt;/p&gt;

&lt;p&gt;Many developer advocates set forth on a journey of biblical proportions &amp;ndash; progressing through mountains of nay-sayers, focusing on craftsmanship and technical evangelism. Among these advocates &lt;strong&gt;Stephen Toub&lt;/strong&gt; and &lt;strong&gt;Stephen Cleary&lt;/strong&gt; rose toward the top. Blogging and helping us along the way. With their help emerged rules and guidelines, a comprehensive set of best practices for using these language features. One &lt;a href=&#34;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&#34; target=&#34;_blank&#34;&gt;best practice&lt;/a&gt; is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Instead of &lt;code&gt;Task.Result&lt;/code&gt; or &lt;code&gt;.Task.Wait()&lt;/code&gt;, use &lt;code&gt;await&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prior to C# 7.1 developers who wrote console applications were forced to deviate from this guideline. We were forced to use &lt;code&gt;.Result&lt;/code&gt; or &lt;code&gt;.Wait()&lt;/code&gt;. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main()
{
    var httpClient = new HttpClient();
    var result = httpClient.GetAsync(&amp;quot;some/url&amp;quot;).Result;

    // Another common alternative was using the get awaiter / result.
    result = httpClient.GetAsync(&amp;quot;some/url&amp;quot;).GetWaiter().GetResult();

    // Consume the result...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With C# 7.1, we can leverage &lt;a href=&#34;https://github.com/dotnet/csharplang/blob/master/proposals/async-main.md&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Async Main&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static async Task Main()
{
    var httpClient = new HttpClient();
    var result = await httpClient.GetAsync(&amp;quot;some/url&amp;quot;);

    // Consume the result...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature extends the previous four possible entry points to their &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;Task&amp;lt;int&amp;gt;&lt;/code&gt; based equivalents. Now the following entry points are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static Task Main() { }                      // static void Main() { }
static Task&amp;lt;int&amp;gt; Main() { }                 // static int Main() { }
static Task Main(string[] args) { }         // static void Main(string[] args) { }
static Task&amp;lt;int&amp;gt; Main(string[] args) { }    // static int Main(string[] args) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this task-based approach the new entry points simply provide that &amp;ldquo;feels good&amp;rdquo; approach to development.&lt;/p&gt;

&lt;h1 id=&#34;default-expression-a-target-blank-href-https-github-com-dotnet-csharplang-issues-102-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;&lt;code&gt;default&lt;/code&gt; Expression &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/102&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; keyword has been around forever. It was used to tell the compiler give me the &amp;ldquo;default&amp;rdquo; value for the given type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var number = default(int);      // 0
var date = default(DateTime);   // DateTime.MinValue
var obj = default(object);      // null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was also used for generics, for example when the type of &lt;code&gt;T&lt;/code&gt; is used we could return &lt;code&gt;default(T)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static T TryPeekOrDefault&amp;lt;T&amp;gt;(this ConcurrentQueue&amp;lt;T&amp;gt; queue)
{
    if (queue?.TryPeek(out var result) ?? false)
    {
        return result;
    }

    return default(T);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, the &lt;code&gt;default&lt;/code&gt; keyword was used in the &lt;code&gt;switch&lt;/code&gt; statement as well &amp;ndash; and signified the &lt;code&gt;default&lt;/code&gt; case label. If all other cases were not executed, the &lt;code&gt;default&lt;/code&gt; case would be.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;switch (dayOfWeek) 
{
    case DayOfWeek.Monday:
        return &amp;quot;Ugh... off to work again&amp;quot;;
    case DayOfWeek.Friday:
        return &amp;quot;Excitement sets in...&amp;quot;;
    
    default:
        return string.Empty;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, with C# 7.1 the compiler will use type inference to simplify the &lt;code&gt;default&lt;/code&gt; expression (sometimes referred to as &lt;code&gt;default&lt;/code&gt; literals). So we could declare an &lt;code&gt;int&lt;/code&gt; and assign it to &lt;code&gt;default&lt;/code&gt; without passing the type &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int number = default;   // 0
Guid guid = default;    // 00000000-0000-0000-0000-000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only can the type be inferred from the declaration but also the literal expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var number = isLucky ? 7 : default; // when &#39;isLucky&#39; is false number is 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The great news is that this feature is for the entire type-system, not just &lt;code&gt;int&#39;s&lt;/code&gt; &lt;i class=&#34;fa fa-thumbs-o-up&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;. You can now use the &lt;code&gt;default&lt;/code&gt; keyword in all sorts of places. You can use it to check against a value, or to pass it as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int Sum(params int[] numbers)
{
    if (numbers is default || numbers.Length == default)
    {
        return default; // Returns 0
    }
}

// Pass in default. This is null for int[].
var sum = Sum(default);
if (sum == default)
{
    // Take an action when sum is 0.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tuple-projection-initializers-a-target-blank-href-https-github-com-dotnet-csharplang-issues-415-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;Tuple Projection Initializers &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/415&#34;&gt;&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;I detailed the introduction of &lt;code&gt;tuples&lt;/code&gt; in my &lt;a href=&#34;http://davidpine.net/blog/exploring-csharp-seven&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Exploring C# 7&amp;rdquo;&lt;/a&gt; post. Tuples are an amazing addition to the C# language and are extremely powerful. With its initial implementation however, there was something that was lacking. Tuple literals lacked the ability to infer names, now with C# 7.1 &amp;ndash; this is no longer a limitation.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;tuple&lt;/code&gt; projection initializers our C# &lt;code&gt;tuple&lt;/code&gt; literals are simplified and effectively DRY, as the redundancies of duplicating the field names are inferred.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var firstName = &amp;quot;David&amp;quot;;
var lastName = &amp;quot;Pine&amp;quot;;
var dateOfBirth = new DateTime(1984, 7, 7);

// C# 7.0, required &amp;quot;explicit names&amp;quot;
var person = (firstName: firstName, lastName: lastName, dateOfBirth: dateOfBirth);
var fn = person.firstName;      // &amp;quot;David&amp;quot;
var ln = person.lastName;       // &amp;quot;Pine&amp;quot;
var dob = person.dateOfBirth;   // 7/7/1984

// C# 7.1, allows &amp;quot;inferred names&amp;quot;
person = (firstName, lastName, dateOfBirth);
fn = person.firstName;          // &amp;quot;David&amp;quot;
ln = person.lastName;           // &amp;quot;Pine&amp;quot;
dob = person.dateOfBirth;       // 7/7/1984
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;pattern-matching-with-generics-a-target-blank-href-https-github-com-dotnet-csharplang-issues-154-i-class-fa-fa-external-link-i-a:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;Pattern-matching with Generics &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang/issues/154&#34;&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;With C# 7.0, pattern-matching was introduced &amp;ndash; I love talking about it and showing off what it can do! In my opinion it solves a lot of issues with type assertions and makes complex decision trees more legible and comprehensive. However, when it was introduced it didn&amp;rsquo;t correctly support generics. With C# 7.1, that has changed.&lt;/p&gt;

&lt;p&gt;Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Animal { }

public class Dog : Animal
{
    public Breed Breed { get; }
}

public void Interact&amp;lt;TAnimal&amp;gt;(TAnimal animal)
    where TAnimal : Animal
{
    if (animal is Dog dog)
    {
        // Play fetch with dog
    }

    switch (animal)
    {
        case Dog d when (d.Breed == Breed.LabradorRetriever):
            // Feed dog, the let &#39;em outside
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was not actually possible, in fact it wouldn&amp;rsquo;t even compile. Ignoring the scoping issue, as the &lt;code&gt;dog&lt;/code&gt; variable is declared twice within the same scope &amp;ndash; we&amp;rsquo;d end up with the following compilation error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; An expression of type TAnimal cannot be handled by a pattern of Dog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could use the &lt;code&gt;as&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var dog = animal as Dog;
if (dog != null) 
{
    // Play with man&#39;s best friend...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that isn&amp;rsquo;t really pattern-matching. The limitation that exists is due to explicit type conversions and open types; however, the design specification is changing as follows in the bold area:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Certain combinations of static type of the left-hand-side and the given type are considered incompatible and result in compile-time error. A value of static type &lt;code&gt;E&lt;/code&gt; is said to be pattern compatible with the type &lt;code&gt;T&lt;/code&gt; if there exists an identity conversion, an implicit reference conversion, a boxing conversion, an explicit reference conversion, or an unboxing conversion from &lt;code&gt;E&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt;, &lt;strong&gt;or if either &lt;code&gt;E&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt; is an open type.&lt;/strong&gt; It is a compile-time error if an expression of type &lt;code&gt;E&lt;/code&gt; is not pattern compatible with the type in a type pattern that it is matched with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;references:c3d9d0c20d91f17ec5db26344e1a2078&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn, The .NET Compiler Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dotnet/csharplang&#34;&gt;C# Language Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to organize an amazing technical conference</title>
      <link>http://davidpine.net/blog/how-to-organize-an-amazing-tech-conf/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/how-to-organize-an-amazing-tech-conf/</guid>
      <description>

&lt;h1 id=&#34;story-time:63ba67321c591922a170805947a2568e&#34;&gt;Story Time&lt;/h1&gt;

&lt;p&gt;This is my third year organizing &lt;a href=&#34;http://www.mkedotnet.com/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET&lt;/a&gt;, so I&amp;rsquo;ve been accumulating plenty of interesting stories. Last year I was fortunate enough to have convinced Scott Hanselman to be our keynote speaker. Yes, &amp;ldquo;the &lt;a href=&#34;https://twitter.com/shanselman&#34; target=&#34;_blank&#34;&gt;Scott Hanselman&lt;/a&gt;&amp;rdquo; - arguably the worlds most influential person in the tech industry. I was his ride to and from the airport and the conversations we had actually led to several key changes. As a result &lt;a href=&#34;http://www.mkedotnet.com/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET&lt;/a&gt; will be even better than ever before!&lt;/p&gt;

&lt;p&gt;Scott said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Had I looked at the lineup of speakers prior to agreeing, I would have declined&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My mind immediately started racing with thoughts like &amp;ldquo;does he only want to speak with well-known speakers&amp;rdquo; or &amp;ldquo;is this too small of a conference for such a celebrity?&amp;rdquo;. None of these thoughts were the least bit accurate. In fact, the reason was simple &amp;ldquo;we were not inclusive enough&amp;rdquo;. Honestly this was something that I didn&amp;rsquo;t even think about. I was driving Scott to the hotel where he was going to stay. The hotel was also the place where the conference was to be held.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2017/06/hanselman.jpg&#34; alt=&#34;One does not simply drop &amp;quot;Hanselman&amp;quot; off at the hotel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No&amp;hellip;he requested that I give him a guided tour. He wanted to see the room layouts, he wanted to test equipment, ensure lighting, sound, connectivity, etc. We actually ended up reorganizing the entire layout of the keynote room as well as changing the number of projectors. His &amp;ldquo;perfectionist&amp;rdquo; side was shining through and it was really resonating with the team. Clearly he has done this a few more times than we have! &lt;i class=&#34;fa fa-smile-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;One of his initial comments was hysterical:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; This kind of looks and smells like grandmas house&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He was referring to the decor of the hotel (very 60&amp;rsquo;s) and that the halls had a stale scent of mildew (the hotel has a water-park in it). Having just taken a sip of water, I nearly spit it out of my mouth in laughter - finally someone said what we had all been thinking! This resulted in a change of venue for 2017 and years to come. We&amp;rsquo;ll be at &lt;a href=&#34;https://www.paysbig.com/&#34; target=&#34;_blank&#34;&gt;Potawatomi Hotel &amp;amp; Casino&lt;/a&gt; this year. The new joke is obviously that it will now smell like cigarette smoke instead.&lt;/p&gt;

&lt;h2 id=&#34;inclusion:63ba67321c591922a170805947a2568e&#34;&gt;Inclusion&lt;/h2&gt;

&lt;p&gt;The truth was simple. &lt;a href=&#34;http://www.mkedotnet.com/2016/speakers/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET 2016&lt;/a&gt; only had one woman speaker and ironically she was speaking about Diversity. We were ready to lick our wounds and rise above it. I&amp;rsquo;m so proud to be part of this change and happy to communicate that &lt;a href=&#34;http://www.mkedotnet.com/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET&lt;/a&gt; now takes an active approach to ensure a more diverse speaker lineup.&lt;/p&gt;

&lt;p&gt;This year, we started leveraging &lt;a href=&#34;https://www.papercall.io&#34; target=&#34;_blank&#34;&gt;PaperCall.io&lt;/a&gt; as our event management system. It allowed us to make the speaker voting anonymized - but you&amp;rsquo;re probably wondering how that helps with diversity. It actually doesn&amp;rsquo;t and that would be naive to assume so. What we did was invite &lt;a href=&#34;https://twitter.com/AshleyPQPQP&#34; target=&#34;_blank&#34;&gt;Ashley Powell&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/samsaha1/&#34; target=&#34;_blank&#34;&gt;Samrat Saha&lt;/a&gt; (both MKE DOT NET speaker alumni) to join our technical committee. We loved that they were both eager to help and happily joined the team. They both have been a major part of the entire process and helped with the CFP outreach efforts. We believe this led to more submissions from their networks, ultimately leading to a more inclusive speaker lineup.&lt;/p&gt;

&lt;p&gt;Of the 24 sessions and including the keynote, we are proud to have eight women speakers this year! If you&amp;rsquo;re a numbers person - that is an &lt;strong&gt;800% increase&lt;/strong&gt; year-over-year and we plan on doing even better as we evolve. We are actively making our conference as inclusive as possible - and we celebrate the communities participation.&lt;/p&gt;

&lt;h2 id=&#34;evolution:63ba67321c591922a170805947a2568e&#34;&gt;Evolution&lt;/h2&gt;

&lt;p&gt;We are only going to grow and learn and become a better more cohesive unit as time marches forward. We are evolving! The people who make up the team are so passionate about bringing forth their visions for a better Midwest technical community. But that isn&amp;rsquo;t without conflict or disagreement. In fact our team is great at hashing things out. Not every idea is the best! Knowing how to work together and encouraging ideas is key. We foster an environment which breeds creativity but also bases our direction on results. The team shares a vision and we strive to make that vision obvious.&lt;/p&gt;

&lt;h3 id=&#34;community:63ba67321c591922a170805947a2568e&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;Of course none of this would be possible without our strong community. I&amp;rsquo;m proud to play my part and contribute what I can, and I&amp;rsquo;m humbled to be immersed in such a rich pool of technical knowledge and passion. It is inspiring to see the things we&amp;rsquo;re doing and even more so to be involved! Often the hallways of a technical conference are the stomping grounds for some of the best bits of conversation. In my regional speaking engagements this year I&amp;rsquo;m hearing just how amazing we are in the Midwest time and time again. I&amp;rsquo;m grateful for all of these awesome success stories.&lt;/p&gt;

&lt;h3 id=&#34;tools:63ba67321c591922a170805947a2568e&#34;&gt;Tools&lt;/h3&gt;

&lt;p&gt;Being that the entire team cannot always be in the same place at the same time - it is vital to leverage tools that allow everyone on the team to work together. This will serve as a simple listing of some of things that we have used along the way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.papercall.io/mkedotnet2017&#34; target=&#34;_blank&#34;&gt;PaperCall.io - &lt;i class=&#34;fa fa-paper-plane&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for CFP and speaker selection process&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eventbrite.com/e/mke-dot-net-2017-tickets-32702277392&#34; target=&#34;_blank&#34;&gt;Eventbrite - &lt;i class=&#34;fa fa-calendar&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for event ticketing/sales&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.com&#34; target=&#34;_blank&#34;&gt;Google Docs/Sheets/Forms - &lt;i class=&#34;fa fa-google&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for internal documentation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stickies.io/&#34; target=&#34;_blank&#34;&gt;Stickies.io - &lt;i class=&#34;fa fa-sticky-note&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for organizing schedule&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trello.com&#34; target=&#34;_blank&#34;&gt;Trello Boards - &lt;i class=&#34;fa fa-trello&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for organizing ideas&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zoom.us/&#34; target=&#34;_blank&#34;&gt;Zoom.us - &lt;i class=&#34;fa fa-video-camera&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for video conferencing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adobe.com/products/illustrator.html&#34; target=&#34;_blank&#34;&gt;Adobe Illustrator - &lt;i class=&#34;fa fa-pencil-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; designing logos, creating illustrations and icons&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adobe.com/products/photoshop.html&#34; target=&#34;_blank&#34;&gt;Adobe Photoshop - &lt;i class=&#34;fa fa-picture-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; art directing photos, creating images, correcting color&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/mkedotnet&#34; target=&#34;_blank&#34;&gt;Twitter - &lt;i class=&#34;fa fa-twitter-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; for social networking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A word on the website, we use for source control &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub - &lt;i class=&#34;fa fa-github-square&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; and it is actually a static website. It uses &lt;a href=&#34;http://harpjs.com/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;HarpJs&lt;/code&gt;&lt;/a&gt; which sits atop &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;NodeJs&lt;/code&gt;&lt;/a&gt;. Updates are seamless and fast with &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code - &lt;i class=&#34;fa fa-file-code-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;closing-story:63ba67321c591922a170805947a2568e&#34;&gt;Closing Story&lt;/h2&gt;

&lt;p&gt;I spoke at &lt;a href=&#34;https://indycode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Indy.Code()&lt;/a&gt; in Indianapolis back in March, 2017. It was a great experience and the folks over at &lt;a href=&#34;https://www.amegala.com/&#34; target=&#34;_blank&#34;&gt;Amegala&lt;/a&gt; really know how to organize a technical conference! Anyways, prior to one of my talks I was asking the crowd a little about technical conferences in Indianapolis. I was told that &lt;a href=&#34;https://indycode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Indy.Code()&lt;/a&gt; was the first major conference in seven years. When I asked them what they do to fill that void, three of them immediately shouted out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; We travel to Milwaukee, WI in the fall for &lt;a href=&#34;http://www.mkedotnet.com/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET&lt;/a&gt; - it&amp;rsquo;s a technical conference!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What a small world, hey! They were extremely excited to learn my role&amp;hellip;and I too shared in their excitement. For in that moment I knew that all the hard work was paying off.&lt;/p&gt;

&lt;h2 id=&#34;thank-you:63ba67321c591922a170805947a2568e&#34;&gt;Thank you&lt;/h2&gt;

&lt;p&gt;A sincere thank you is in order for everyone who makes this possible. Thank you to &lt;a href=&#34;https://twitter.com/LadyNaggaga&#34; target=&#34;_blank&#34;&gt;Maria Naggaga&lt;/a&gt; for not only being willing to speak at &lt;a href=&#34;http://www.mkedotnet.com/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET&lt;/a&gt;, but responding to my ask within minutes - stating that she would be honored! Thank you to the community, the speakers, those who submit who don&amp;rsquo;t get to speak, those of you who attend. Thank you to &lt;a href=&#34;http://www.centare.com/&#34; target=&#34;_blank&#34;&gt;Centare&lt;/a&gt; for supporting all these efforts year-after-year and the investment back into the community. Thank you to all the sub-committees of &lt;a href=&#34;http://www.mkedotnet.com/&#34; target=&#34;_blank&#34;&gt;MKE DOT NET&lt;/a&gt; that give their brilliance and support taking on tasks like, marketing, driving attendance, seeking sponsorship, creating and maintaining the website, deciding on scheduling, venue, meals, logistics, all the countless planning efforts - thank you. Anyone else that I couldn&amp;rsquo;t think of, thank you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript - JavaScript Reimagined</title>
      <link>http://davidpine.net/blog/typescript-javascript-reimagined/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/typescript-javascript-reimagined/</guid>
      <description>

&lt;h1 id=&#34;first-things-first:983b92988576ed5bc09079031d8a835a&#34;&gt;First things First&lt;/h1&gt;

&lt;p&gt;JavaScript is the world&amp;rsquo;s third most common programming language today. JavaScript was created by &lt;a href=&#34;https://twitter.com/BrendanEich&#34; target=&#34;_blank&#34;&gt;Brendan Eich&lt;/a&gt; in about ten days. It might seem odd that the
previous two sentences not only exist, but go together&amp;hellip;yet it is true! JavaScript runs seemingly everywhere and applications written in this
language are only getting larger.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; JavaScript was perhaps intended for 100, maybe up to 1,000 lines of code and now with regularity people are building 100,000 line apps, if not 1,000,000 line apps.
&lt;cite&gt;&lt;a href=&#34;https://twitter.com/ahejlsberg&#34; target=&#34;_blank&#34;&gt;Anders Hejlsberg&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;the-good-parts:983b92988576ed5bc09079031d8a835a&#34;&gt;&amp;ldquo;The Good Parts&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.crockford.com/&#34; target=&#34;_blank&#34;&gt;Douglas Crockford&lt;/a&gt; authored a book &amp;ldquo;JavaScript: The Good Parts&amp;rdquo;, sadly it was a rather short book. If you&amp;rsquo;re a JavaScript developer, knowing &amp;ldquo;the good parts&amp;rdquo;
is great - but knowing the limitations and shortcomings of a language is even more powerful. Sometimes it feels like JavaScript is a hammer and not every
problem we&amp;rsquo;re trying to solve is a nail. NodeJs is a great example of this in my opinion &amp;ndash; because I&amp;rsquo;m a &lt;code&gt;.NET&lt;/code&gt; developer, but I digress&amp;hellip; If you want a good laugh watch
Gary Bernhardt&amp;rsquo;s &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34; target=&#34;_blank&#34;&gt;WAT video&lt;/a&gt;, go ahead &amp;ndash; I&amp;rsquo;ll wait! In all seriousness, JavaScript
is a great programming language for countless reasons, but it is easy to poke fun at.&lt;/p&gt;

&lt;h3 id=&#34;mental-model:983b92988576ed5bc09079031d8a835a&#34;&gt;Mental Model&lt;/h3&gt;

&lt;p&gt;I met a fellow technical public speaker who is a well respected JavaScript developer. He was arguing his hatred for TypeScript. There are several key takeaways
from the debate that I think will stick with me for a while.&lt;/p&gt;

&lt;h4 id=&#34;learn-it:983b92988576ed5bc09079031d8a835a&#34;&gt;Learn it&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; You should learn the JavaScript programming language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I already know JavaScript (but I really don&amp;rsquo;t know JavaScript) &amp;ndash; I would never consider myself an expert or a guru! However, I write TypeScript nearly
every single day that I develop. Some of the aforementioned names are among the very few who might be considered as such. I recall that when this part
of the conversation was encountered, we came up with an analogy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Not all JavaScript developers are Tour de France champions (or contenders)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was the reoccurring analogy and I agreed with it wholeheartedly. That is why I think that TypeScript is like &amp;ldquo;training wheels&amp;rdquo; for JavaScript developers.
That is not at all a bad thing! Just look at what you can do with &amp;ldquo;training wheels&amp;rdquo;.&lt;/p&gt;




    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;7u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/05/training-wheels.gif&#39;
                            alt=&#34;With style&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;5u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/05/training-wheels-2.gif&#39;
                            alt=&#34;Or Bust&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;



&lt;p&gt;Seriously though, with that fact that &lt;strong&gt;we are not compilers&lt;/strong&gt; and we cannot predict certain behaviors that occur in the &amp;ldquo;wild west&amp;rdquo; of JavaScript &amp;ndash; &lt;strong&gt;we should
rely on tooling to help&lt;/strong&gt;. It is simply a pragmatic approach to developing with a true sense of reliability and consistency. Training wheels provide you with the
confidence and security. Once your TypeScript is compiled to JavaScript, the training wheels are removed and your code is ready to brave the new world!&lt;/p&gt;

&lt;h1 id=&#34;typescript:983b92988576ed5bc09079031d8a835a&#34;&gt;TypeScript&lt;/h1&gt;

&lt;p&gt;I could never compete with the TypeScript site. They have a beautifully composed tutorial, handbook and rich set of documentation. If that is what
you&amp;rsquo;re looking for - by all means 

    
        
    

    &lt;a href=&#34;http://www.typescriptlang.org/docs/tutorial.html&#34; target=&#39;_blank&#39;&gt;go check it out&lt;/a&gt;

. If you&amp;rsquo;d like to hear more
on my thoughts - keep reading.&lt;/p&gt;

&lt;p&gt;All valid JavaScript is also valid TypeScript, as TypeScript is a superset of JavaScript. TypeScript allows you as a developer to program in the
latest version of the ECMAScript standard, while still being about to target all the way back to ES3. Upon compilation, your code is pure JavaScript
and all the type notations are removed. The static type system is only applicable when working with TypeScript related files.&lt;/p&gt;

&lt;h2 id=&#34;extensions-explained:983b92988576ed5bc09079031d8a835a&#34;&gt;Extensions Explained&lt;/h2&gt;

&lt;p&gt;I initially had some confusion about the various file extensions. It was obvious what &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files were, but what were these &lt;code&gt;.map&lt;/code&gt; and &lt;code&gt;.d.ts&lt;/code&gt; files?
Ironically, &lt;code&gt;.map&lt;/code&gt; files have been around since CoffeeScript and are nothing new. They map JavaScript files to their corresponding abstractions, in the case of
TypeScript - they map &lt;code&gt;.ts&lt;/code&gt; to &lt;code&gt;.js&lt;/code&gt; files. The &lt;code&gt;.d.ts&lt;/code&gt; files are known as type definitions. They define the public surface area or API if you will, of a given
library. More detail &lt;a href=&#34;http://stackoverflow.com/a/37063570/2410379&#34; target=&#34;_blank&#34;&gt;here &lt;i class=&#34;fa fa-stack-overflow&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;enough-sales-pitch-show-me-some-code:983b92988576ed5bc09079031d8a835a&#34;&gt;Enough Sales Pitch - Show me some code&lt;/h2&gt;

&lt;p&gt;The 

    
        
    

    &lt;a href=&#34;http://www.typescriptlang.org/play/index.html&#34; target=&#39;_blank&#39;&gt;TypeScript playground&lt;/a&gt;

 is an amazing place, since it has a side-by-side of the input TypeScript and the resulting JavaScript.
This is an excellent place to learn how TypeScript works and what it is capable of. I always find it interesting seeing how certain
things are implemented. Take for example an &lt;code&gt;enum&lt;/code&gt;. In most languages it&amp;rsquo;s easy to take this for granted, the same is true with
TypeScript - but seeing how the resulting JavaScript is really something special.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export enum DayOfWeek {
    Sunday,
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seems like a very clean declaration of an &lt;code&gt;enum&lt;/code&gt;, right?! We know that &lt;code&gt;DayOfWeek.Monday&lt;/code&gt; would have a value of &lt;code&gt;1&lt;/code&gt;, and
&lt;code&gt;DayOfWeek.Friday&lt;/code&gt; would then be &lt;code&gt;5&lt;/code&gt; for example. But let&amp;rsquo;s have a look at the JavaScript output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek[&amp;quot;Sunday&amp;quot;] = 0] = &amp;quot;Sunday&amp;quot;;
    DayOfWeek[DayOfWeek[&amp;quot;Monday&amp;quot;] = 1] = &amp;quot;Monday&amp;quot;;
    DayOfWeek[DayOfWeek[&amp;quot;Tuesday&amp;quot;] = 2] = &amp;quot;Tuesday&amp;quot;;
    DayOfWeek[DayOfWeek[&amp;quot;Wednesday&amp;quot;] = 3] = &amp;quot;Wednesday&amp;quot;;
    DayOfWeek[DayOfWeek[&amp;quot;Thursday&amp;quot;] = 4] = &amp;quot;Thursday&amp;quot;;
    DayOfWeek[DayOfWeek[&amp;quot;Friday&amp;quot;] = 5] = &amp;quot;Friday&amp;quot;;
    DayOfWeek[DayOfWeek[&amp;quot;Saturday&amp;quot;] = 6] = &amp;quot;Saturday&amp;quot;;
})(DayOfWeek || (DayOfWeek = {}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look at this look enough, you&amp;rsquo;ll see that it&amp;rsquo;s a rather simple solution. It is essentially a reverse map, where properties
are assigned to from their indexes. On the &lt;code&gt;DayOfWeek&lt;/code&gt; instance, we declare and assign property &lt;code&gt;Sunday&lt;/code&gt; equal to &lt;code&gt;0&lt;/code&gt;. Likewise,
we declare and assign property &lt;code&gt;0&lt;/code&gt; equal to the value &lt;code&gt;Sunday&lt;/code&gt;, etc&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;type-aliases-generics-and-mapped-types:983b92988576ed5bc09079031d8a835a&#34;&gt;Type Aliases, Generics and  Mapped Types&lt;/h3&gt;

&lt;p&gt;I recently learned about the &lt;code&gt;keyof&lt;/code&gt; operator in TypeScript, and wow is it powerful! Let&amp;rsquo;s consider the following mutable object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export class MutableDataBag&amp;lt;T&amp;gt; {
    public data: T;
    public name: string;

    constructor(private id: number) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a rather simple object. It defines several members that are &lt;code&gt;public&lt;/code&gt; and assignable, namely the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; members.
Imagine that we decide that we actually expose this structure from an API - but we want it to be immutable, i.e.; &lt;code&gt;readonly&lt;/code&gt;. Enter
&amp;ldquo;mapped types&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export type Readonly&amp;lt;T&amp;gt; = {
    readonly [P in keyof T]: T[P];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The type alias of &lt;code&gt;Readonly&lt;/code&gt; takes on an generic of type &lt;code&gt;T&lt;/code&gt;, furthermore it defines that all the members of type &lt;code&gt;T&lt;/code&gt; are accessible
as &lt;code&gt;readonly&lt;/code&gt; members. This leverages the &lt;code&gt;keyof&lt;/code&gt; operator in which &lt;code&gt;P&lt;/code&gt; is accessible so long as it is a member of &lt;code&gt;T&lt;/code&gt; (key of &lt;code&gt;T&lt;/code&gt;).
So, now we can return a &lt;code&gt;Readonly&amp;lt;MutableDataBag&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; from our API and rest assured knowing that TypeScript prevents it&amp;rsquo;s members from
being written to.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:983b92988576ed5bc09079031d8a835a&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is literally just the tip of the iceberg (or even less). TypeScript has truly made JavaScript tolerable.
TypeScript answers so many questions and addresses so many concerns that it&amp;rsquo;s hard to justify not using&amp;hellip;if you&amp;rsquo;re not using
TypeScript, there are other options out there. Pick your poison!!&lt;/p&gt;

&lt;h3 id=&#34;resources:983b92988576ed5bc09079031d8a835a&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;

    
        
    

    &lt;a href=&#34;https://github.com/IEvangelist/IEvangelist.TypeScript&#34; target=&#39;_blank&#39;&gt;IEvangelist - TypeScript&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;

    
        
    

    &lt;a href=&#34;http://www.typescriptlang.org/docs/tutorial.html&#34; target=&#39;_blank&#39;&gt;TypeScript Documentation&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Speaking</title>
      <link>http://davidpine.net/speaking/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/speaking/</guid>
      <description>

&lt;p&gt;I love being able to give back to the community and I enjoy how gratifying it can be. Public speaking on technologies
that I love is just one of those ways I give back. Anytime that I get to express myself and share my passions - I&amp;rsquo;m absolutely thrilled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://davidpine.net/img/2017/04/skyward.jpg&#34; alt=&#34;MPN Demo (Skyward) - 2017&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is where I have been and where I&amp;rsquo;m going to be, I hope to see you there!&lt;/p&gt;

&lt;h2 id=&#34;upcoming:991f6edce4c158f0d781901c75294628&#34;&gt;Upcoming&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Event / Conference&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Talk / Presentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Aug 7, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.thatconference.com/&#34; target=&#34;_blank&#34;&gt;THAT Conference - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.thatconference.com/Sessions/Session/12570&#34; target=&#34;_blank&#34;&gt;WebAssembly: The New Endgame?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;July 19, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/The-Chicago-NET-Users-Group/&#34; target=&#34;_blank&#34;&gt;Chicago .NET User Group - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://gist.github.com/IEvangelist/e20ec4654cf5965af40156f22be6edad&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jun 26, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/milwaukeejs/&#34; target=&#34;_blank&#34;&gt;MilwaukeeJS - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/milwaukeejs/events/247249996/&#34; target=&#34;_blank&#34;&gt;TypeScript: Making JavaScript Tolerable&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jun 7, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://2018.syntaxcon.com/&#34; target=&#34;_blank&#34;&gt;SyntaxCon - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://2018.syntaxcon.com/session/typescript-making-javascript-tolerable/&#34; target=&#34;_blank&#34;&gt;TypeScript: Making JavaScript Tolerable&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;May 23, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.johnsoncontrols.com/&#34; target=&#34;_blank&#34;&gt;International Tech Challenge - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://gist.github.com/IEvangelist/067e02d922df297f14eb0c7b034a400f&#34; target=&#34;_blank&#34;&gt;Upgrade Yourself: Becoming a Microsoft MVP&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;past:991f6edce4c158f0d781901c75294628&#34;&gt;Past&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Event / Conference&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Talk / Presentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr 20, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://itkonekt.com/it-konferencija-novi-sad/&#34; target=&#34;_blank&#34;&gt;ITKonekt, Novi Sad (Serbia) - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://itkonekt.com/2018/02/09/david-pine/&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr 17, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://itkonekt.com/it-konferencija-nis/&#34; target=&#34;_blank&#34;&gt;ITKonekt, Niš (Serbia) - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://itkonekt.com/2018/02/09/david-pine/&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr 15, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://itkonekt.com/it-konferencija-beograd/&#34; target=&#34;_blank&#34;&gt;ITKonekt, Belgrade (Serbia) - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://itkonekt.com/2018/02/09/david-pine/&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Feb 27, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/milwaukeejs/&#34; target=&#34;_blank&#34;&gt;MilwaukeeJS - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/milwaukeejs/events/246445980/&#34; target=&#34;_blank&#34;&gt;Frontend Framework Panel (Angular)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Feb 10, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.fladotnet.com/codecamp/Home.aspx&#34; target=&#34;_blank&#34;&gt;South Florida Code Camp - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.fladotnet.com/codecamp/SpeakerBio.aspx?SpeakerID=874&#34; target=&#34;_blank&#34;&gt;TypeScript: Making JavaScript Tolerable&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Feb 10, 2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.fladotnet.com/codecamp/Home.aspx&#34; target=&#34;_blank&#34;&gt;South Florida Code Camp - 2018&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.fladotnet.com/codecamp/SpeakerBio.aspx?SpeakerID=874&#34; target=&#34;_blank&#34;&gt;Upgrade Yourself: Most Valued Developer&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Nov 14, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/Wisconsin-Net-Users-Group/&#34; target=&#34;_blank&#34;&gt;WI .NET User Group - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/Wisconsin-Net-Users-Group/events/237113732/&#34; target=&#34;_blank&#34;&gt;TypeScript: Making JavaScript Tolerable&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Nov 11, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.milwaukeecodecamp.com/&#34; target=&#34;_blank&#34;&gt;Milwaukee Code Camp - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.milwaukeecodecamp.com/session/details/1118&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C#&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Oct 16-17, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://devupconf.org/&#34; target=&#34;_blank&#34;&gt;Dev Up - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://devupconf.org/Sessions/575&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash; JavaScript Reimagined&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Oct 16-17, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://devupconf.org/&#34; target=&#34;_blank&#34;&gt;Dev Up - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://devupconf.org/Sessions/576&#34; target=&#34;_blank&#34;&gt;From C# 6 to C# 7, then and now!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sept 29, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://prairiecode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Prairie.Code() - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://prairiecode.amegala.com/sessions/480&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash; JavaScript Reimagined&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sept 28, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://prairiecode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Prairie.Code() - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://prairiecode.amegala.com/sessions/394&#34; target=&#34;_blank&#34;&gt;Angular2 with an ASP.NET Core backend, happiness ensues&amp;hellip;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sept 25, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.milwaukeespin.com&#34; target=&#34;_blank&#34;&gt;MilwaukeeSPIN - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.milwaukeespin.com/Events&#34; target=&#34;_blank&#34;&gt;Current Trends in Technology&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sept 21, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;www.dotnetconf.net&#34; target=&#34;_blank&#34;&gt;.NET Conf (local) - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.eventbrite.com/e/net-conf-2017-tickets-37046195167&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C# (7.1 and 8.0)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jul 12, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://detroitcode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Detroit.Code() - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://detroitcode.amegala.com/Sessions/315&#34; target=&#34;_blank&#34;&gt;Building a Magic Mirror w/ .NET&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jul 11, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://detroitcode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Detroit.Code() - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://detroitcode.amegala.com/Sessions/317&#34; target=&#34;_blank&#34;&gt;Angular2 with an ASP.NET Core backend, happiness ensues&amp;hellip;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jun 26, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/js-chi/events/238222639/&#34; target=&#34;_blank&#34;&gt;Chicago JS Meetup - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/js-chi/events/238222639/&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash; JavaScript Reimagined&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jun 26, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.chicagocoderconference.com/&#34; target=&#34;_blank&#34;&gt;Chicago Coders Conference - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.chicagocoderconference.com/sessions/building-a-magic-mirror-with-net/&#34; target=&#34;_blank&#34;&gt;Building a Magic Mirror w/ .NET&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;May  9, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/Wisconsin-Net-Users-Group/&#34; target=&#34;_blank&#34;&gt;WI .NET User Group - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/Wisconsin-Net-Users-Group/events/237113620/&#34; target=&#34;_blank&#34;&gt;From C# 6 to C# 7, then and now!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr 29, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.chicagocodecamp.com/&#34; target=&#34;_blank&#34;&gt;Chicago Code Camp - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.chicagocodecamp.com/sessions/detail/1172&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash; JavaScript Reimagined&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr 18, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://partner.microsoft.com/en-US/&#34; target=&#34;_blank&#34;&gt;MPN Demo (Skyward) - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://gist.github.com/IEvangelist/688502ca6ec59d071b2ae656babda4a4&#34; target=&#34;_blank&#34;&gt;From C# 6 to C# 7, then and now!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr 11, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/Wisconsin-Net-Users-Group/&#34; target=&#34;_blank&#34;&gt;WI .NET User Group - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.meetup.com/Wisconsin-Net-Users-Group/events/237113600/&#34; target=&#34;_blank&#34;&gt;Azure DocumentDb &amp;ndash; the nano-ORM&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apr  7, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.centare.com/&#34; target=&#34;_blank&#34;&gt;Centare (Forward Thinking) - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://gist.github.com/IEvangelist/2bd8a3938f2269151d995262c8265d0e&#34; target=&#34;_blank&#34;&gt;Azure DocumentDb &amp;ndash; the nano-ORM&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mar 31, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://indycode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Indy.Code() - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://indycode.amegala.com/Sessions/51&#34; target=&#34;_blank&#34;&gt;Angular2 with an ASP.NET Core backend, happiness ensues&amp;hellip;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mar 31, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://indycode.amegala.com/&#34; target=&#34;_blank&#34;&gt;Indy.Code() - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://indycode.amegala.com/Sessions/45&#34; target=&#34;_blank&#34;&gt;From C# 6 to C# 7, then and now!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mar 24, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.centare.com/&#34; target=&#34;_blank&#34;&gt;Centare (Forward Thinking) - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://gist.github.com/IEvangelist/287742b6fe343b89da0be88427405bd1&#34; target=&#34;_blank&#34;&gt;Angular2 with an ASP.NET Core backend, happiness ensues&amp;hellip;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mar 17, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://launch.visualstudio.com/local-events/&#34; target=&#34;_blank&#34;&gt;Visual Studio 2017 Launch Event&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://youtu.be/kFpXRooGo0c&#34; target=&#34;_blank&#34;&gt;From C# 6 to C# 7, then and now!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jan 12, 2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://channel9.msdn.com/&#34; target=&#34;_blank&#34;&gt;Microsoft&amp;rsquo;s Channel 9 - 2017&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://channel9.msdn.com/Shows/On-NET/David-Pine-Magic-mirror-on-the-wall-who-is-the-fairest-one-of-all&#34; target=&#34;_blank&#34;&gt;Magic mirror on the wall, who is the fairest one of all?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Oct 29, 2016&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.mkedotnet.com/2016&#34; target=&#34;_blank&#34;&gt;MKE DOT NET - 2016&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.mkedotnet.com/2016/sessions/magic-mirror/&#34; target=&#34;_blank&#34;&gt;Building a &amp;ldquo;Magic Mirror&amp;rdquo;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Oct 15, 2016&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://milwaukeecodecamp.com/&#34; target=&#34;_blank&#34;&gt;Milwaukee Code Camp - 2016&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://milwaukeecodecamp.com/session/details/1065&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash; JavaScript Reimagined&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Jun 24, 2016&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://channel9.msdn.com/Events/Build/2016&#34; target=&#34;_blank&#34;&gt;//Build/ Recap - 2016&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://speakerdeck.com/ievangelist/recap&#34; target=&#34;_blank&#34;&gt;2016 //build/ recap&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;a-few-pictures:991f6edce4c158f0d781901c75294628&#34;&gt;A few pictures&lt;/h2&gt;




    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;5u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/wtf-pine.jpg&#39;
                            alt=&#34;WTF?!&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;7u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/launch-event.jpg&#39;
                            alt=&#34;Visual Studio 2017 Launch Event&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;



&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;0u&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
            
                &lt;div class=&#34;12u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/indy-code.jpg&#39;
                            alt=&#34;Indy.Code() 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;7u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/close-up.jpg&#39;
                            alt=&#34;Indy.Code() 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;5u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/conferences.jpg&#39;
                            alt=&#34;Conferences&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;6u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/ccc-demo.jpg&#39;
                            alt=&#34;Chicago Code Camp - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;6u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/ccc-intro.jpg&#39;
                            alt=&#34;Chicago Code Camp - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;0u&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
            
                &lt;div class=&#34;12u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/ccc-typescript.jpg&#39;
                            alt=&#34;Chicago Code Camp - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;0u&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
            
                &lt;div class=&#34;12u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/wi.net-ug.jpg&#39;
                            alt=&#34;WI .NET User Group - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;0u&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
            
                &lt;div class=&#34;12u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/chi-js.jpg&#39;
                            alt=&#34;Chicago JS Meetup - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;8u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/chi-coder-conf.jpg&#39;
                            alt=&#34;Chicago Coders Conference - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;4u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/chi-coder-conf-2.jpg&#39;
                            alt=&#34;Chicago Coders Conference 2 - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;


    

    
    




    
    
        
    


    

    &lt;div class=&#34;box alt&#34;&gt;
        &lt;div class=&#34;row uniform&#34;&gt;
        
        
        
            
                &lt;div class=&#34;0u&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
            
                &lt;div class=&#34;12u&#34;&gt;
            
            
        
            
                
                    
                    &lt;span class=&#34;image fit&#34;&gt;
                
            
            
        
            
                
                        &lt;img src=&#39;http://davidpine.net/img/2017/04/chi-js-2.jpg&#39;
                            alt=&#34;Chicago JS Meetup - 2017&#34; /&gt;
                    &lt;/span&gt;&lt;/div&gt;
                
                
            
            
        
            
                &lt;div class=&#34;0u$&#34;&gt;
            
            
        
            
                
                    &lt;/div&gt;
                    
                
            
            
        
            
                
                
            
            
        
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring C# 7</title>
      <link>http://davidpine.net/blog/exploring-csharp-seven/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/exploring-csharp-seven/</guid>
      <description>

&lt;h1 id=&#34;intro:0efe24a7225e878a472913ac049c49a3&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Since we have all been actively celebrating the 20&lt;sup&gt;th&lt;/sup&gt; anniversary of &lt;strong&gt;Visual Studio&lt;/strong&gt;, it felt appropriate to post about &lt;strong&gt;C# 7&lt;/strong&gt;!
In this post we will explore the features that make &lt;strong&gt;C# 7&lt;/strong&gt; so promising. I&amp;rsquo;ve put together a demonstration &lt;strong&gt;C# 7&lt;/strong&gt; project, that is available
&lt;a href=&#34;https://github.com/IEvangelist/IEvangelist.CSharp&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post contains examples and details on five of the nine new &lt;strong&gt;C# 7&lt;/strong&gt; features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pattern matching&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out&lt;/code&gt; variables&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;Local functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw&lt;/code&gt; expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the remaining features, that I &lt;strong&gt;do not&lt;/strong&gt; cover in this post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; locals and returns&lt;/li&gt;
&lt;li&gt;More expression-bodied members&lt;/li&gt;
&lt;li&gt;Generalized &lt;code&gt;async&lt;/code&gt; return types&lt;/li&gt;
&lt;li&gt;Numeric literal syntax improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pattern-matching:0efe24a7225e878a472913ac049c49a3&#34;&gt;Pattern Matching&lt;/h2&gt;

&lt;p&gt;With &lt;strong&gt;C# 7&lt;/strong&gt; we welcomed the concept of &amp;ldquo;patterns&amp;rdquo;. This concept allows for the extraction of information when a variable is tested for a certain &amp;ldquo;shape&amp;rdquo; and matches a
specified pattern. We&amp;rsquo;re able to leverage the &amp;ldquo;shape&amp;rdquo; from which we matched on as a declared variable in scope, consuming it as we deem necessary. This is referred to as
&amp;ldquo;dynamic&amp;rdquo; (or &amp;ldquo;method&amp;rdquo;) dispatch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; In computer science, dynamic dispatch is the process of selecting which implementation of a polymorphic operation (method or function) to call at run time.
It is commonly employed in, and considered a prime characteristic of, object-oriented programming (OOP) languages and systems.
&lt;cite&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_dispatch&#34; target=&#34;_blank&#34;&gt;Wiki - Dynamic Dispatch&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dynamic dispatch is nothing new to &lt;strong&gt;C#&lt;/strong&gt;, and has been around forever. &lt;strong&gt;C# 7&lt;/strong&gt; exposes this functionality via constant and type patterns.&lt;/p&gt;

&lt;h3 id=&#34;constant-patterns:0efe24a7225e878a472913ac049c49a3&#34;&gt;Constant Patterns&lt;/h3&gt;

&lt;p&gt;Constant pattern &lt;code&gt;null&lt;/code&gt;, similar to &lt;code&gt;(obj == null)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; The &amp;ldquo;is expression&amp;rdquo; has been expanded&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void IsExpression(object obj)
{
    if (obj is null) // Constant pattern &amp;quot;obj is null&amp;quot;
    {
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;type-patterns:0efe24a7225e878a472913ac049c49a3&#34;&gt;Type Patterns&lt;/h3&gt;

&lt;p&gt;Look closely at this syntax. This is where we start mixing metaphors. Prior to &lt;strong&gt;C# 7&lt;/strong&gt; we could use the &amp;ldquo;is&amp;rdquo; expression to do simple type assertions
&lt;code&gt;obj is [type]&lt;/code&gt;. Additionally, we all know how to declare a variable &lt;code&gt;int i&lt;/code&gt;. This new syntax merges these concepts together and is more compound and
expressive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void IsExpression(object obj)
{
    // (obj is int i)
    // &amp;quot;obj is int&amp;quot;     // type assertion &amp;quot;typically evaluates type compatibility at run time&amp;quot;
    //        &amp;quot;int i&amp;quot;   // declaration

    if (obj is int i) // Type pattern &amp;quot;obj is int i&amp;quot;
    {
        // We can then use the &amp;quot;i&amp;quot; (integer) variable 
    }

    // Note, the variable &amp;quot;i&amp;quot; is also available in this scope.
    // This is in fact by design, more on that out the &amp;quot;out variable&amp;quot; section 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p&gt; The &amp;ldquo;switch statement&amp;rdquo; has been generalized&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;when&lt;/code&gt; keyword has also been extended, now it not only applies to the &lt;code&gt;catch&lt;/code&gt; statement but also the &lt;code&gt;case&lt;/code&gt; labels within a &lt;code&gt;switch&lt;/code&gt; statement.
Consider the following classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Shape
{
    protected internal double Height { get; }

    protected internal double Length { get; }

    protected Shape(double height, double length)
    {
        Height = height;
        Length = length;
    }
}

class Circle : Shape
{
    internal double Radius =&amp;gt; Height / 2;

    internal double Diameter =&amp;gt; Radius * 2;

    internal double Circumference =&amp;gt; 2 * Math.PI * Radius;

    internal Circle(double height, double length) 
        : base(height, length) { }
}

class Rectangle : Shape
{
    internal bool IsSquare =&amp;gt; Height == Length;

    internal Rectangle(double height, double length) 
        : base(height, length) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now imagine that we have a collection of these &lt;code&gt;Shape&lt;/code&gt; objects, and we want to print out their various details - we could use &amp;ldquo;pattern matching&amp;rdquo; as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void OutputShapes(IEnumerable&amp;lt;Shape&amp;gt; shapes)
{
    foreach (var shape in shapes)
    {
        // Previously, this was not permitted. Case labels had to be concrete
        // such as enums, numerics, bools, strings, etc.
        switch (shape)
        {
            case Circle c:
                WriteLine($&amp;quot;circle with circumference {c.Circumference}&amp;quot;);
                break;
            case Rectangle s when (s.IsSquare):
                WriteLine($&amp;quot;{s.Length} x {s.Height} square&amp;quot;);
                break;
            case Rectangle r:
                WriteLine($&amp;quot;{r.Length} x {r.Height} rectangle&amp;quot;);
                break;
            default:
                WriteLine(&amp;quot;This is not a shape that we&#39;re familiar with...&amp;quot;);
                break;
            case null:
                throw new ArgumentNullException(nameof(shape));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we are able to more easily reason about the specific &lt;code&gt;shape&lt;/code&gt; in context. For example, with each iteration of our collection we &lt;code&gt;switch&lt;/code&gt;
on the &lt;code&gt;shape&lt;/code&gt;. If the &lt;code&gt;shape&lt;/code&gt; is an instance of the &lt;code&gt;Circle&lt;/code&gt; subclass, we&amp;rsquo;ll execute the &lt;code&gt;case&lt;/code&gt; label &amp;ldquo;Circle&amp;rdquo; and we get the instance declared as
its type in the variable &lt;code&gt;c&lt;/code&gt;. Likewise, if the &lt;code&gt;shape&lt;/code&gt; is a &lt;code&gt;Rectangle&lt;/code&gt; and that rectangle &lt;code&gt;s&lt;/code&gt; just so happens to also be a square &lt;code&gt;when (s.IsSquare)&lt;/code&gt;
evaluates to &lt;code&gt;true&lt;/code&gt; - we will then execute the square &lt;code&gt;case&lt;/code&gt; label. If the &lt;code&gt;shape&lt;/code&gt; is an instance of a &lt;code&gt;Rectangle&lt;/code&gt; but not a square, we execute the
&amp;ldquo;Rectangle&amp;rdquo; &lt;code&gt;case&lt;/code&gt; label. Notice we still have &lt;code&gt;default&lt;/code&gt; fall-thru. Finally, we can also have a &amp;ldquo;null&amp;rdquo; &lt;code&gt;case&lt;/code&gt; label.&lt;/p&gt;

&lt;h2 id=&#34;out-variables:0efe24a7225e878a472913ac049c49a3&#34;&gt;&lt;code&gt;out&lt;/code&gt; variables&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.NET&lt;/code&gt; developers are more than familiar with the &lt;code&gt;Try*&lt;/code&gt; pattern, but as a refresher this is what it looks like. Imagine we are trying to parse
a &lt;code&gt;System.String&lt;/code&gt; input value as a &lt;code&gt;System.Int32&lt;/code&gt;. Imagine that the consumer doesn&amp;rsquo;t really care if it is parsed, they&amp;rsquo;re fine with a &lt;code&gt;default(int)&lt;/code&gt;
if it fails.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int ToInt32(string input)
{
    int result;
    if (int.TryParse(input, out result))
    {
        return result;
    }

    return default(int);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s quickly recap this. First, we declare a variable namely &lt;code&gt;result&lt;/code&gt;. We then invoke the &lt;code&gt;int.TryParse&lt;/code&gt; which returns a &lt;code&gt;bool&lt;/code&gt; whether or not the
parse was successful. If &lt;code&gt;true&lt;/code&gt; then the declare &lt;code&gt;result&lt;/code&gt; variable is not equal to the parsed &lt;code&gt;int&lt;/code&gt; value. If the &lt;code&gt;input&lt;/code&gt; was &lt;code&gt;&amp;quot;12&amp;quot;&lt;/code&gt;, then &lt;code&gt;result&lt;/code&gt; would be &lt;code&gt;12&lt;/code&gt;. If the &lt;code&gt;input&lt;/code&gt;
was &lt;code&gt;&amp;quot;Pickles&amp;quot;&lt;/code&gt;, then the return from the invocation to the &lt;code&gt;ToInt32&lt;/code&gt; would be &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;int.TryParse&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now with &lt;strong&gt;C# 7&lt;/strong&gt; we can declare our &lt;code&gt;out&lt;/code&gt; variable inline as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int ToInt32(string input)
{
    // Note: the declaration is inline with the out keyword
    if (int.TryParse(input, out int result))
    {
        return result;
    }

    return default(int);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The scope of the &lt;code&gt;result&lt;/code&gt; variable is identical to the previous example, as it actually &amp;ldquo;leaks&amp;rdquo; out to the &lt;code&gt;if&lt;/code&gt; statement. We can re-write this even
more expressively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int ToInt32(string input) =&amp;gt; int.TryParse(input, out var result) ? result : result;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things you might notice. First, this is now a single line as we can express this with the lambda operator. We leverage the ternary operator as
well. Additionally, we can use the &lt;code&gt;var&lt;/code&gt; keyword for our declaration. And since the &lt;code&gt;result&lt;/code&gt; variable is in scope we can use it as both return cases.
If unable to be parsed, it is in fact a &lt;code&gt;default(int)&lt;/code&gt; anyways.&lt;/p&gt;

&lt;h2 id=&#34;tuples:0efe24a7225e878a472913ac049c49a3&#34;&gt;Tuples&lt;/h2&gt;

&lt;p&gt;Most developers are familiar with &lt;code&gt;System.Tuple&amp;lt;T[,T1...]&amp;gt;&lt;/code&gt;. This &lt;code&gt;class&lt;/code&gt; has served us well all the while it has been around.
One of the advantages is that it exposes &lt;code&gt;readonly&lt;/code&gt; fields - from the values that it is instantiated with. This
was also great for equality comparisons and even using the tuple as a dictionary key.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;C# 7&lt;/strong&gt; we have a new syntax for expressing tuples. Enter the &lt;code&gt;ValueTuple&lt;/code&gt;, and as the name implies - this is a &lt;code&gt;struct&lt;/code&gt; instead of a &lt;code&gt;class&lt;/code&gt;. There
are obvious performance gains from using a light-weight value-type over the allocation of a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void LegacyTuple()
{
    var letters = new Tuple&amp;lt;char, char&amp;gt;(&#39;a&#39;, &#39;b&#39;);
    
    // Values were accessible via these Item* fields.
    var a = letters.Item1;
    var b = letters.Item2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wasn&amp;rsquo;t overly exciting from an API perspective, as the field names do not really imply anything about their intention.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void ValueTuple()
{
    var letters = (&#39;a&#39;, &#39;b&#39;);
    var a = letters.Item1;
    var b = letters.Item2;

    // Note: ToTuple extension method
    var systemTuple = letters.ToTuple();
    var c = systemTuple.Item1;
    var d = systemTuple.Item2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might notice that the syntactic sugar is pouring over this new feature. This is referred to as a &amp;ldquo;tuple literal&amp;rdquo;. We dropped the entire &lt;code&gt;new&lt;/code&gt; keyword
usage, as well as specifying the types. They are all inferred and in fact known, IntelliSense proves this immediately. But we still have the issue of
these tuples not being very API friendly. Let&amp;rsquo;s explore how we can give them custom names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void MoreValueTuples()
{
    var lessonDetails = 
        (Subject: &amp;quot;C# Language Semantics&amp;quot;, Category: Categories.Programming, Level: 300);

    // Note: IntelliSense now hides Item1, Item2 and Item3
    // Instead we are provided with the following:

    var subject = lessonDetails.Subject;    // string
    var category = lessonDetails.Category;  // Categories [enum]
    var level = lessonDetails.Level;        // int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deconstruction:0efe24a7225e878a472913ac049c49a3&#34;&gt;Deconstruction&lt;/h3&gt;

&lt;p&gt;Now that we see how we can instantiate a &lt;code&gt;ValueTuple&lt;/code&gt;, let&amp;rsquo;s take a look at how we can declare one for usage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void DeconstructionExamples()
{
    var lessonDetails = 
        (Subject: &amp;quot;C# Language Semantics&amp;quot;, Category: Categories.Programming, Level: 300);
    
    // We can deconstruct in three various ways
    // First, the fully qualified type
    (string subject, Categories category, int level) = lessonDetails;
    
    // Next using the var keyword per named declaration
    (var subject, var category, var level) = lessonDetails;

    // Finally, omitting any type declaration and using var wholeheartedly
    var (subject, category, level) = lessonDetails;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are often questions about how deconstruction is implemented, and whether or not it is ordinal based. For the &lt;code&gt;ValueTuple&lt;/code&gt; it is in fact
ordinal based. However, note that deconstruction is not actually limited to tuples. With &lt;strong&gt;C# 7&lt;/strong&gt; any &lt;code&gt;object&lt;/code&gt; that defines a &lt;code&gt;public void Deconstruct&lt;/code&gt;
method can be deconstructed. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Person
{
    private readonly (string First, string Middle, string Last) _name;

    private readonly DateTime DateOfBirth _dateOfBirth;

    public Person((string f, string m, string l) name, DateTime dob)
    {
        _name = name;
        _dateOfBirth = dob;
    }

    public void Deconstruct(out double age, 
                            out string firstName,
                            out string middleName, 
                            out string lastName)
    {
        age = (DateTime.Now - _dateOfBirth).TotalYears;
        firstName = _name.First;
        middleName = _name.Middle;
        lastName = _name.Last;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the &lt;code&gt;Person&lt;/code&gt; is defined with this &lt;code&gt;Deconstruct&lt;/code&gt; method, we can deconstruct it following the same ordinal based semantics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void DeconstructNonTuple()
{
    var person = new Person((&amp;quot;David&amp;quot;, &amp;quot;Michael&amp;quot;, &amp;quot;Pine&amp;quot;), new DateTime(1984, 7, 7));

    (int age, string first, string middle, string last) = person;

    // Note: to partially deconstruct you can ignore a specific ordinal by using the _
    // This does not actually naming the ordinal variable, but truly ignoring it.

    var (_, _, _, _) = person;          // Ignore all, not very useful
    var (_, firstName, _, _) = person;  // Cherry-pick first name
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;comparing-anonymous-object-vs-valuetuple:0efe24a7225e878a472913ac049c49a3&#34;&gt;Comparing Anonymous &lt;code&gt;object&lt;/code&gt; vs. &lt;code&gt;ValueTuple&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;At first glance tuples look almost like anonymous objects. They are in fact very different. An anonymous object is actually a reference type whereas
a &lt;code&gt;ValueTuple&lt;/code&gt; is a &lt;code&gt;struct&lt;/code&gt; - value type. Also, you can only return an anonymous object from a method as an &lt;code&gt;object&lt;/code&gt; which isn&amp;rsquo;t very API friendly.
Within a fluent &lt;code&gt;LINQ&lt;/code&gt; chained method anonymous objects are great and will still be normal for projection.&lt;/p&gt;

&lt;h2 id=&#34;local-functions:0efe24a7225e878a472913ac049c49a3&#34;&gt;Local Functions&lt;/h2&gt;

&lt;p&gt;At first glance, local functions seem a bit odd. I&amp;rsquo;ve heard people say, &amp;ldquo;this method is starting to look like a class&amp;rdquo;. At first,
I was one of these people too. Once you get used to the idea and see the benefits it really does make sense. Here is a quick
comparison of the two, note the benefits of local functions as they compare to lambdas.&lt;/p&gt;

&lt;style&gt;
    .red { color: red; }
    .green { color: green; }
&lt;/style&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Lambda(s)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Local Function(s)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Generics&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Local functions allow for the use of generics&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Iterators&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;yield&lt;/code&gt; keyword is valid within local functions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Recursion&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Local functions support recursion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Allocatey&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Delegates require an &lt;code&gt;object&lt;/code&gt; allocation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Potential Variable Lifting&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-check green&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;i class=&#34;fa fa-times red&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Implicitly captured closure is non-existent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is vital to understand that local functions are &lt;strong&gt;not&lt;/strong&gt; a replacement for &lt;code&gt;Action&amp;lt;T[,T1...]&amp;gt;&lt;/code&gt; or &lt;code&gt;Func&amp;lt;T[,T1...]&amp;gt;&lt;/code&gt;. These delegate declarations are still
needed as parameters to enable lambda expression arguments. If you see the &lt;strong&gt;#notasugly&lt;/strong&gt; hashtag, this was coined by Mads Torgersen.&lt;/p&gt;

&lt;h3 id=&#34;more-efficient:0efe24a7225e878a472913ac049c49a3&#34;&gt;More efficient&lt;/h3&gt;

&lt;p&gt;When using local functions, there is no &lt;code&gt;object&lt;/code&gt; created - unlike delegates that require an object for it to be used. Likewise, local functions
help to alleviate another issue with lambdas in that they do not need to implicitly capture a variable longer than it is potentially needed.
In &lt;strong&gt;C#&lt;/strong&gt; lambdas capture values by reference, meaning that garbage collection may not be able to correctly clean up code that is &amp;ldquo;allocatey&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;declaration:0efe24a7225e878a472913ac049c49a3&#34;&gt;Declaration&lt;/h4&gt;

&lt;p&gt;With local functions, the declaration of the local function can actually occur after the &lt;code&gt;return&lt;/code&gt; statement - as long as it is within the method body
in which it is consumed. If you&amp;rsquo;re familiar with some of the implementations of the &lt;code&gt;LINQ&lt;/code&gt; extension methods on &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, you would know a lot
of the methods are defined with argument validation followed by the instantiation of &amp;ldquo;Iterator&amp;rdquo; classes, where these classes do the actual work.&lt;/p&gt;

&lt;p&gt;Because of deferred execution, iterators do not actually execute validation logic until they are iterated - for example invoking &lt;code&gt;.ToList()&lt;/code&gt;, &lt;code&gt;.ToArray()&lt;/code&gt;,
or simply using them in a &lt;code&gt;foreach&lt;/code&gt; statement. Ideally, we would like our iterators to &amp;ldquo;fail-fast&amp;rdquo; in the event of being given invalid arguments. Let&amp;rsquo;s
imagine that the &lt;code&gt;.Select&lt;/code&gt; extension method was implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IEnumerable&amp;lt;TResult&amp;gt; Select&amp;lt;T, TResult&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, 
                                                           Func&amp;lt;T, TResult&amp;gt; selector)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (selector == null) throw new ArgumentNullException(nameof(selector));

    foreach (var item in source)
    {
        yield return selector(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this method is written as an iterator, the validation is skipped until it&amp;rsquo;s iterated. With &lt;strong&gt;C# 7&lt;/strong&gt; we can use local function to get both
&amp;ldquo;fail-fast&amp;rdquo; validation and the iterator together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IEnumerable&amp;lt;TResult&amp;gt; Select&amp;lt;T, TResult&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, 
                                                           Func&amp;lt;T, TResult&amp;gt; selector)
{
    if (source == null) throw new ArgumentNullException(nameof(source));
    if (selector == null) throw new ArgumentNullException(nameof(selector));

    return iterator();

    IEnumerable&amp;lt;TResult&amp;gt; iterator()
    {
        foreach (var item in source)
        {
            yield return selector(item);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;throw-expressions:0efe24a7225e878a472913ac049c49a3&#34;&gt;&lt;code&gt;throw&lt;/code&gt; expressions&lt;/h1&gt;

&lt;p&gt;Leveraging some pre-existing &lt;strong&gt;C#&lt;/strong&gt; functionality - &lt;code&gt;null&lt;/code&gt; coalescing, we can now &lt;code&gt;throw&lt;/code&gt; when a value is evaluated as &lt;code&gt;null&lt;/code&gt;. A common validation
mechanism is to &lt;code&gt;throw&lt;/code&gt; if an argument is &lt;code&gt;null&lt;/code&gt;. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class LegacyService : IService
{
    private readonly IContextProvider _provider;

    public LegacyService(IContextProvider provider)
    {
        if (provider == null)
        {
            throw new ArgumentNullException(nameof(provider));
        }

        _provider = provider;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;strong&gt;C# 7&lt;/strong&gt; we can simplify this with the &lt;code&gt;throw&lt;/code&gt; expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class ModernService : IService
{
    private readonly IContextProvider _provider;

    public ModernService(IContextProvider provider)
    {
        _provider = provider ?? throw new ArgumentNullException(nameof(provider));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the given &lt;code&gt;provider&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt; we&amp;rsquo;ll coalesce over to the &lt;code&gt;throw&lt;/code&gt; expression.&lt;/p&gt;

&lt;h1 id=&#34;from-c-6-to-c-7-then-and-now:0efe24a7225e878a472913ac049c49a3&#34;&gt;From C# 6 to C# 7, then and now!&lt;/h1&gt;

&lt;p&gt;I have a presentation that I have been fortunate enough to give at some regional conferences. One of these occasions was recorded, and I felt it
made sense to share it here - Enjoy!!&lt;/p&gt;

&lt;p&gt;&lt;style&gt;
    .iframe_container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 - this is responsive by adjusting the hight according to the width! */
        padding-top: 25px;
        height: 0;
    }
    .iframe_container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
&lt;/style&gt;
&lt;div class=&#34;iframe_container&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/kFpXRooGo0c&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/csharp/csharp-7&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s new in C# 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Overriding ASP.NET Core Framework-Provided Services</title>
      <link>http://davidpine.net/blog/overriding-default-di/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/overriding-default-di/</guid>
      <description>

&lt;h1 id=&#34;overview:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In &lt;strong&gt;.NET&lt;/strong&gt; it&amp;rsquo;s really easy to create your own interfaces and implementations. Likewise, it&amp;rsquo;s seemingly effortless to register them for dependency injection. But it is not always
obvious how to override existing implementations.  Let&amp;rsquo;s discuss various aspects of &amp;ldquo;dependency injection&amp;rdquo; and how you can override the &amp;ldquo;framework-provided services&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;As an example, let&amp;rsquo;s take a recent story on our product backlog for building a security audit of login attempts.  The story involved the capture of attempted usernames along
with their corresponding IP addresses.  This would allow system administrators to monitor for potential attackers. This would require our &lt;strong&gt;ASP.NET Core&lt;/strong&gt; application to have
custom logging implemented.&lt;/p&gt;

&lt;h2 id=&#34;logging:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Logging&lt;/h2&gt;

&lt;p&gt;Luckily &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ASP.NET Core Logging&lt;/code&gt;&lt;/a&gt; is simple to use and is a first-class
citizen within &lt;code&gt;ASP.NET Core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Logging&lt;/strong&gt; repository there is an extension method namely
&lt;a href=&#34;https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging/LoggingServiceCollectionExtensions.cs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;AddLogging&lt;/code&gt;&lt;/a&gt;, here is what it
looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IServiceCollection AddLogging(this IServiceCollection services)
{
    if (services == null)
    {
        throw new ArgumentNullException(nameof(services));
    }

    services.TryAdd(ServiceDescriptor.Singleton&amp;lt;ILoggerFactory, LoggerFactory&amp;gt;());
    services.TryAdd(ServiceDescriptor.Singleton(typeof(ILogger&amp;lt;&amp;gt;), typeof(Logger&amp;lt;&amp;gt;)));

    return services;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it is rather simple. It adds two &lt;code&gt;ServiceDescriptor&lt;/code&gt; instances to the &lt;code&gt;IServiceCollection&lt;/code&gt;, effectively registering the given service type to the
corresponding implementation type.&lt;/p&gt;

&lt;h4 id=&#34;following-the-rabbit-down-the-hole:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Following the rabbit down the hole&lt;/h4&gt;

&lt;p&gt;When you create a new &lt;code&gt;ASP.NET Core&lt;/code&gt; project from &lt;strong&gt;Visual Studio&lt;/strong&gt;, all the templates follow the same pattern. They have the &lt;code&gt;Program.cs&lt;/code&gt; file with a &lt;code&gt;Main&lt;/code&gt; method that looks
very similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseIISIntegration()
        .UseStartup&amp;lt;Startup&amp;gt;()
        .UseApplicationInsights()
        .Build();

    host.Run();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;templates-program-cs:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Templates &lt;code&gt;Program.cs&lt;/code&gt;&lt;/h6&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/EmptyWeb/Program.cs&#34; target=&#34;_blank&#34;&gt;Empty &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/StarterWeb/Program.cs&#34; target=&#34;_blank&#34;&gt;Starter Web &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/WebAPI/Program.cs&#34; target=&#34;_blank&#34;&gt;Web API &amp;nbsp; &lt;i class=&#34;fa fa-external-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One thing that is concerning about a template like this is that the &lt;code&gt;IWebHost&lt;/code&gt; is an &lt;code&gt;IDisposable&lt;/code&gt;, so why then is this statement not wrapped in a &lt;code&gt;using&lt;/code&gt;
&lt;a href=&#34;https://github.com/IEvangelist/Templates/commit/37e78bd0dc33069901cc51924fe8a2740d1e141c&#34; target=&#34;_blank&#34;&gt;you ask&lt;/a&gt;? The answer is that the &lt;code&gt;Run&lt;/code&gt; extension method
internally wraps itself in a &lt;code&gt;using&lt;/code&gt;. If you were wondering where the &lt;code&gt;AddLogging&lt;/code&gt; occurs, it is a result of invoking the &lt;code&gt;Build&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[ Microsoft.AspNetCore.Hosting.WebHostBuilder ] 
    public IWebHost Build() ...
        private IServiceCollection BuildCommonServices() ...
            creates services then invokes services.AddLogging()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-few-words-on-the-service-descriptor:d7c1ff5c185090641e598e96532d52e8&#34;&gt;A few words on the Service Descriptor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ServiceDescriptor&lt;/code&gt; class is an object that &lt;em&gt;describes&lt;/em&gt; a &lt;em&gt;service&lt;/em&gt;, and this is used by dependency injection. In other words, instances of the &lt;code&gt;ServiceDescriptor&lt;/code&gt; are
descriptions of services. The &lt;code&gt;ServiceDescriptor&lt;/code&gt; class exposes several static methods that allow its instantiation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ILoggerFactory&lt;/code&gt; interface is registered as a
&lt;a href=&#34;https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs#L14&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ServiceLifetime.Singleton&lt;/code&gt;&lt;/a&gt;
and its implementation is mapped to the &lt;code&gt;LoggerFactory&lt;/code&gt;. Likewise, the generic type &lt;code&gt;typeof(ILogger&amp;lt;&amp;gt;)&lt;/code&gt; is mapped to &lt;code&gt;typeof(Logger&amp;lt;&amp;gt;)&lt;/code&gt;. This is just one of the several key
&amp;ldquo;Framework-Provided Services&amp;rdquo; that are registered.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-together:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Putting it together&lt;/h2&gt;

&lt;p&gt;Now we know that the framework is providing all implementations of &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, and resolving them as their &lt;code&gt;Logger&amp;lt;T&amp;gt;&lt;/code&gt;. We also know that we could write our own implementation of
the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; interface. Being that this is open-source
&lt;a href=&#34;https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/LoggerOfT.cs&#34; target=&#34;_blank&#34;&gt;we can look to their implementation&lt;/a&gt; for inspiration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class RequestDetailLogger&amp;lt;T&amp;gt; : ILogger&amp;lt;T&amp;gt;
{
    private readonly ILogger _logger;

    public RequestDetailLogger(ILoggerFactory factory,
                               IRequestCategoryProvider requestCategoryProvider)
    {
        if (factory == null)
        {
            throw new ArgumentNullException(nameof(factory));
        }
        if (requestCategoryProvider == null)
        {
            throw new ArgumentNullException(nameof(requestCategoryProvider));
        }

        var category = requestDetailCategoryProvider.CreateCategory&amp;lt;T&amp;gt;();
        _logger = factory.CreateLogger(category);
    }

    IDisposable ILogger.BeginScope&amp;lt;TState&amp;gt;(TState state)
        =&amp;gt; _logger.BeginScope(state);

    bool ILogger.IsEnabled(LogLevel logLevel)
        =&amp;gt; _logger.IsEnabled(logLevel);

    void ILogger.Log&amp;lt;TState&amp;gt;(LogLevel logLevel, 
                             EventId eventId, 
                             TState state, 
                             Exception exception, 
                             Func&amp;lt;TState, Exception, string&amp;gt; formatter)
        =&amp;gt; _logger.Log(logLevel, eventId, state, exception, formatter);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;IRequestCategoryProvider&lt;/code&gt; is defined and implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using static Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelper;

public interface IRequestCategoryProvider
{
    string CreateCategory&amp;lt;T&amp;gt;();
}

public class RequestCategoryProvider : IRequestCategoryProvider
{
    private readonly IPrincipal _principal;
    private readonly IPAddress _ipAddress;

    public RequestCategoryProvider(IPrincipal principal,
                                   IPAddress ipAddress)
    {
        _principal = principal;
        _ipAddress = ipAddress;
    }

    public string CreateCategory&amp;lt;T&amp;gt;()
    {
        var typeDisplayName = GetTypeDisplayName(typeof(T));

        if (_principal == null || _ipAddress == null)
        {
            return typeDisplayName;
        }

        var username = _principal?.Identity?.Name;
        return $&amp;quot;User: {username}, IP: {_ipAddress} {typeDisplayName}&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re curious how to get the &lt;code&gt;IPrincipal&lt;/code&gt; and &lt;code&gt;IPAddress&lt;/code&gt; into this implementation (with DI) -
&lt;a href=&#34;http://davidpine.net/blog/principal-architecture-changes/&#34; target=&#34;_blank&#34;&gt;I discussed it here&lt;/a&gt; briefly. It is pretty straight-forward. In the &lt;code&gt;Startup.ConfigureServices&lt;/code&gt;
method do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // ... omitted for brevity

    services.AddTransient&amp;lt;IRequestCategoryProvider, RequestCategoryProvider&amp;gt;();
    services.AddTransient&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
    services.AddTransient&amp;lt;IPrincipal&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()
                           ?.HttpContext
                           ?.User);
    services.AddTransient&amp;lt;IPAddress&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;()
                           ?.HttpContext
                           ?.Connection
                           ?.RemoteIpAddress);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can
&lt;a href=&#34;https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs&#34;
   target=&#34;_blank&#34;&gt;&lt;code&gt;Replace&lt;/code&gt;&lt;/a&gt; the implementations for the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; by using the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // ... omitted for brevity
    services.Replace(ServiceDescriptor.Transient(typeof(ILogger&amp;lt;&amp;gt;), 
                                                 typeof(RequestDetailLogger&amp;lt;&amp;gt;)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we replace the framework-provided service as a &lt;code&gt;ServiceLifetime.Transient&lt;/code&gt;. Opposed to the default &lt;code&gt;ServiceLifetime.Singleton&lt;/code&gt;. This is more or less an extra
precaution. We know that with each request we get the &lt;code&gt;HttpContext&lt;/code&gt; from the &lt;code&gt;IHttpContextAccessor&lt;/code&gt;, and from this we have the &lt;code&gt;User&lt;/code&gt;. This is what is passed to each
&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This approach is valid for overriding any of the various framework-provided service implementations. It is simply a matter of knowing the correct &lt;code&gt;ServiceLifetime&lt;/code&gt; for your
specific needs. Likewise, it is a good idea to leverage the open-source libraries of the framework for inspiration. With this you can take finite control of your web-stack.&lt;/p&gt;

&lt;h1 id=&#34;further-reading:d7c1ff5c185090641e598e96532d52e8&#34;&gt;Further Reading&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection&#34; target=&#34;_blank&#34;&gt;
&lt;i class=&#34;fa fa-file-text-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;ASP.NET Core - Dependency Injection&lt;/code&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Conclusions</title>
      <link>http://davidpine.net/conclusions/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/conclusions/</guid>
      <description>

&lt;h1 id=&#34;life:0d7c13a1357d7f78d97bc5fd6f7a1ee8&#34;&gt;Life&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Like an aggressive contagion seeking the next victim, negativity can plague an entire team&amp;rsquo;s morale. Negativity is contagious!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;programming:0d7c13a1357d7f78d97bc5fd6f7a1ee8&#34;&gt;Programming&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; In programming there isn&amp;rsquo;t a &amp;ldquo;right way&amp;rdquo; but there is always a &amp;ldquo;wrong way&amp;rdquo;. There is however a &amp;ldquo;better way&amp;rdquo;, until you run out of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;negotiations:0d7c13a1357d7f78d97bc5fd6f7a1ee8&#34;&gt;Negotiations&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Developers are actually negotiators! We negotiate more than we develop. We negotiate with the keyboard all day long, we negotiate with ourselves determining if we&amp;rsquo;ve taken the right
course of action. We negotiate with our peers, arguing our point of views. We negotiate with the stakeholders of the application and the end-users too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;motto:0d7c13a1357d7f78d97bc5fd6f7a1ee8&#34;&gt;Motto&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not what you are, it&amp;rsquo;s what you do&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not what you do, it&amp;rsquo;s how you do it&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not how you do it, it&amp;rsquo;s why you do it&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not where you came from, it&amp;rsquo;s where you are now&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not where you are now, it&amp;rsquo;s where you&amp;rsquo;re going&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not where you’re going, it&amp;rsquo;s how you&amp;rsquo;ll get there&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What happened to my Thread.CurrentPrincipal</title>
      <link>http://davidpine.net/blog/principal-architecture-changes/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://davidpine.net/blog/principal-architecture-changes/</guid>
      <description>

&lt;h1 id=&#34;overview:7e1a3c88d019532475826e491625ef2c&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Like the title claims, if you&amp;rsquo;re using &lt;code&gt;ASP.NET Core&lt;/code&gt; and expecting the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; or &lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; to be populated you&amp;rsquo;d be wrong. This is not the
&lt;code&gt;IPrincipal&lt;/code&gt; you&amp;rsquo;re looking for. In this post we&amp;rsquo;ll discuss what happened and what you need to do now. Additionally we&amp;rsquo;ll cover all the peripheral benefits as a result of this
change.&lt;/p&gt;

&lt;h2 id=&#34;history:7e1a3c88d019532475826e491625ef2c&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;If you have ever done any &lt;strong&gt;.NET Framework&lt;/strong&gt; development, you&amp;rsquo;ve probably seen the &lt;code&gt;Thread&lt;/code&gt; class. You&amp;rsquo;re probably familiar with the
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.threading.thread.currentprincipal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt;&lt;/a&gt; member. This member of the &lt;code&gt;Thread&lt;/code&gt; class
is defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IPrincipal CurrentPrincipal
{
    [System.Security.SecuritySafeCritical]  // auto-generated
    get
    {
        lock (CurrentThread)
        {
            var principal = (IPrincipal)CallContext.Principal;
            if (principal == null)
            {
                principal = GetDomain().GetThreadPrincipal();
                CallContext.Principal = principal;
            }
            return principal;
        }
    }

    [System.Security.SecuritySafeCritical]  // auto-generated
    [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.ControlPrincipal)]
    set
    {
        CallContext.Principal = value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;p/&gt; Gets or sets the thread&amp;rsquo;s current principal (for role-based security).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does anyone see the issue with this? Can you say, &amp;ldquo;publically static mutable state, oh my&amp;rdquo;?! You should be alarmed. This property was never a good idea and today it
simply doesn&amp;rsquo;t belong. &lt;strong&gt;ASP.NET Core&lt;/strong&gt; is not responsible for assigning this. You might not agree with that decision, but it is final.&lt;/p&gt;

&lt;p&gt;Before diving into this, pop over to &lt;a href=&#34;https://github.com/aspnet/Security/issues/322&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
Microsoft.AspNetCore.Security &amp;ndash; Issue 332&lt;/a&gt; for more of the back story.&lt;/p&gt;

&lt;h2 id=&#34;thread-currentprincipal-today-in-asp-net-core:7e1a3c88d019532475826e491625ef2c&#34;&gt;Thread.CurrentPrincipal Today in ASP.NET Core&lt;/h2&gt;

&lt;p&gt;As part of the &lt;code&gt;ASP.NET Core&lt;/code&gt; framework, the following middleware packages are provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Identity&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;Microsoft.AspNetCore.Identity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspnet/Security&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fa fa-github-alt&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; &lt;code&gt;Microsoft.AspNetCore.Security&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you opt-in to using this middleware and you provide a login page (or expose an external provider) you&amp;rsquo;d end up creating an instance of a &lt;code&gt;ClaimsPrincipal&lt;/code&gt; that represents
an authenticated user. Subsequent requests to the web server would be handed the cookie that holds the user&amp;rsquo;s claims. However the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; would &lt;strong&gt;not&lt;/strong&gt;
actually reflect the &lt;code&gt;ClaimsPrincipal&lt;/code&gt; object that was created as the result of the login. In fact,
it would simply be an instance of the &lt;code&gt;GenericPrincipal&lt;/code&gt; implementation. Likewise, walking up to the &lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; property and asking it for the current claims
principal in context wouldn&amp;rsquo;t give you what you might expect either. Additionally, the
&lt;code&gt;ClaimsPrincipal.Current&lt;/code&gt; internally relies on the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; for its value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static ClaimsPrincipal Current
{
    get
    {
         return ClaimsPrincipal.s_principalSelector() ??
                ClaimsPrincipal.SelectClaimsPrincipal();
    }
}

private static ClaimsPrincipal SelectClaimsPrincipal()
{
    return Thread.CurrentPrincipal as ClaimsPrincipal ?? 
           new ClaimsPrincipal(Thread.CurrentPrincipal);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might be asking yourself, &amp;ldquo;how do I access this value then?&amp;rdquo;. If you&amp;rsquo;re in the context of a controller then you already have access to it via the
&lt;code&gt;.User&lt;/code&gt; property. Otherwise, the answer is &amp;ldquo;dependency injection&amp;rdquo;. Wherever you&amp;rsquo;re in need of the identity for accessing claims, use &lt;code&gt;.cstor&lt;/code&gt; injection
and give yourself the &lt;code&gt;IPrincipal&lt;/code&gt; you need. If you&amp;rsquo;re in the context of an action you might be tempted to use the &lt;code&gt;[FromServices]&lt;/code&gt; attribute to inject
the &lt;code&gt;IPrincipal&lt;/code&gt; instance, but remember that this actually comes from the current user - which is
already accessible via the controller&amp;rsquo;s &lt;code&gt;.User&lt;/code&gt; property.&lt;/p&gt;

&lt;h2 id=&#34;dependency-injection:7e1a3c88d019532475826e491625ef2c&#34;&gt;Dependency Injection&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; made dependency injection (DI) a first class citizen, and it is so easy to use. The &lt;code&gt;Startup.cs&lt;/code&gt; by convention has a &lt;code&gt;ConfigureServices&lt;/code&gt; method where you&amp;rsquo;ll
register the dependencies. In the case of &lt;code&gt;ASP.NET Core&lt;/code&gt; you&amp;rsquo;ll need to do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// This method gets called by the runtime. Use this method to add services to the container.
public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
    services.AddTransient&amp;lt;IPrincipal&amp;gt;(
        provider =&amp;gt; provider.GetService&amp;lt;IHttpContextAccessor&amp;gt;().HttpContext.User);

    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might have noticed that we explicitly register the &lt;code&gt;IHttpContextAccessor&lt;/code&gt; and corresponding implementation. This is necessary as that service is not registered for
us. With that in place we can now specify that any class asking for an &lt;code&gt;IPrincipal&lt;/code&gt; will be given the &lt;code&gt;IHttpContextAccessor.HttpContext.User&lt;/code&gt; as the implementation.
This is exactly what we needed. The exact same pattern is true for class libraries that want to leverage identity-based claim values from the &lt;code&gt;ClaimsPrincipal&lt;/code&gt;
implementation of the &lt;code&gt;IPrincipal&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example:7e1a3c88d019532475826e491625ef2c&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Security.Claims;
using System.Security.Principal;

public class SampleService : ISampleService
{
    private readonly ClaimsPrincipal _principal;

    public SampleService(IPrincipal principal)
    {
        _principal = principal as ClaimsPrincipal;
    }

    public Task ConsumeAsync()
    {
        var dobClaim = _principal?.FindFirst(ClaimTypes.DateOfBirth);
        // Take some action ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the example above we can see how simple it is to use dependency injection. Simply define the &lt;code&gt;IPrincipal&lt;/code&gt; as a &lt;code&gt;.cstor&lt;/code&gt; parameter, store it in a field and consume it as needed.&lt;/p&gt;

&lt;h3 id=&#34;but-why:7e1a3c88d019532475826e491625ef2c&#34;&gt;But Why?&lt;/h3&gt;

&lt;p&gt;There are a lot of people who feel as though DI is overrated and that it is much easier to ask the &lt;code&gt;Thread.CurrentPrincipal&lt;/code&gt; for its value. While that is easy, it is also
risky&amp;hellip;think about it. Since it is mutable anyone (even 3rd party libraries) can set it. Additionally, you avoid concerns about trying to synchronize static state between
the &lt;code&gt;Thread&lt;/code&gt; and &lt;code&gt;ClaimsPrincipal&lt;/code&gt; classes. Scott Hanselman blogged about a
&lt;a href=&#34;http://www.hanselman.com/blog/SystemThreadingThreadCurrentPrincipalVsSystemWebHttpContextCurrentUserOrWhyFormsAuthenticationCanBeSubtle.aspx&#34; target=&#34;_blank&#34;&gt;similar issue&lt;/a&gt;
nearly thirteen years ago!&lt;/p&gt;

&lt;p&gt;One of the first benefits that comes to mind from this is the fact that with DI the code is unit-testable. It is extremely easy to mock out an &lt;code&gt;IPrincipal&lt;/code&gt; to use for unit
testing. Additionally, this alleviates all of the concerns about synchronization and reliability. The &lt;code&gt;IPrincipal&lt;/code&gt; you&amp;rsquo;re given is the principal you&amp;rsquo;d expect and it is fully
populated accordingly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>